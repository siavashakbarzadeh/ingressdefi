{"version":3,"sources":["./src/app/pages/nft/import/import.component.ts","./src/app/pages/nft/import/import.component.html","./src/app/pages/nft/import/import.module.ts"],"names":[],"mappings":"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","file":"nft-import-import-module.js","sourcesContent":["import { Component, OnInit, ViewChild, TemplateRef  } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\nimport { DataService } from \"src/app/common/services/api/data.service\";\nimport { ToasterService } from \"src/app/common/toaster/toaster.service\";\nimport { NftService } from \"src/app/common/services/metamask/nft/nft.service\";\nimport { BsModalService, BsModalRef } from 'ngx-bootstrap/modal';\nimport * as $ from \"jquery\";\n\ndeclare let window: any;\n\n@Component({\n  selector: 'app-import',\n  templateUrl: './import.component.html',\n  styleUrls: ['./import.component.css']\n})\nexport class ImportComponent implements OnInit {\n  itemObj: any = {\n    item_image: ''\n  };\n  co_form: FormGroup;\n  submitted = false;\n  msubmitted = false;\n  upload = false;\n  fileerr = false;\n  itemArr: any;\n  pageKey: any;\n  currencies: any;\n  tabsingle = true;\n  saletype:String = 'fixed';\n  modalRef?: BsModalRef | null;\n  network;\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private route: Router,\n    public service: DataService, \n    private toasterService: ToasterService, \n    private nftService: NftService, \n    private formBuilder: FormBuilder,\n    private modalService: BsModalService,\n    ) { }\n\n  ngOnInit() {\n    this.service.isOverlay = false;\n    this.co_form = this.formBuilder.group({  \n      network: ['', Validators.required],\n      contractaddr: ['', Validators.required],\n    });\n    this.itemObj.pagekey = this.activatedRoute.snapshot.queryParamMap.get('id');\n    var collectionId = decodeURIComponent(this.itemObj.pagekey);\n    this.pageKey = collectionId;\n    this.getNetwork();\n  }\n\n  get f() {  return this.co_form.controls; }\n\n  onSubmit() {\n    this.submitted = true;\n    console.log('form submited', this.co_form.value);\n    if (this.co_form.invalid) {\n      this.service.isOverlay = false;\n      return;\n    }\n    var account = this.service.metaDeatails.account;\n    this.msubmitted = true;\n    this.service.isOverlay = true;\n    let datas = this.co_form.value;\n    console.log(datas, 'datas');\n    let addrr = (datas.contractaddr).trim();\n\n    if ((addrr).length != 42) {\n      this.submitted = false;\n      this.msubmitted = false;\n      this.service.isOverlay = false;\n      return this.toasterService.show(false, \"Invalid contract address\");\n    }\n    let obj = {\n      \"account\" : account,\n      \"network\" : datas.network,\n      \"token_currency\" : this.itemObj.currency,\n      \"contract\" : addrr,\n    }\n    var that = this;\n    this.service.postRequest('users/importcontract', obj).subscribe(async function(reqData: any)  {\n      console.log(reqData, 'reqData');\n      if(reqData.status) {\n        var contractId = reqData.contractId;\n        var ABI = JSON.parse(reqData.data);\n        var userContract = new window.web3.eth.Contract(ABI, datas.contractaddr);\n        await userContract.methods.name().call(async (err,res) =>{ \n          console.log(err, 'method name error');\n          let collectionObj = {\n            \"name\" : res,\n          }\n          console.log(collectionObj, 'method name collectionObj');\n          that.service.postRequest('users/createCollection', collectionObj).subscribe(async function(rData: any)  {\n            console.log(rData, 'rData');\n            if (rData.status) {\n              that.onProcess(ABI, datas.contractaddr, rData.collectionId, contractId, that.itemObj.currency, datas.network);\n            }\n            else {\n              that.msubmitted = false;\n              that.service.isOverlay = false;\n              that.toasterService.show(false, rData.msg);\n            }\n          });\n        })\n      } else {\n        this.msubmitted = false;\n        this.service.isOverlay = false;\n        this.toasterService.show(false, reqData.msg);\n      }\n    });\n  }\n\n  async onProcess(ABI, addr, collectionId, contractId, currency, network) {\n    var account = this.service.metaDeatails.account;\n    let verify = await this.nftService.checkBal(addr, ABI, account);\n    console.log(\"verify\",verify);\n    var that = this;\n    if (verify.status && verify.result > 0) {\n      var importstatus = false;\n      for (let i = 0; i < verify.result; i++) {\n        console.log (\"Block statement execution no.\" + i);\n        let tokenOfOwner = await that.nftService.tokenOfOwnerByIndex(addr, ABI, account, i.toString());\n        if(tokenOfOwner.status) {\n          console.log(tokenOfOwner, 'tokenOfOwner');\n          let tokenURI = await that.nftService.tokenURI(addr, ABI, (tokenOfOwner.result).toString());\n          console.log(tokenURI, 'tokenURI');\n          console.log(\"tokenURI.statustokenURI.statustokenURI.status\",tokenURI.status)\n          if (tokenURI.status) {\n            let params = {\n              \"tokenuri\": tokenURI.result,\n              \"account\": account,\n              \"contract\": addr,\n              \"collectionId\": collectionId,\n              \"currency\": currency,\n              \"nftid\": tokenOfOwner.result,\n              \"network\": network,\n              \"contractId\": contractId,\n            }\n            console.log(params, 'params');\n            await that.service.postRequest('users/importobjectdata', params).subscribe((reqData: any) => {\n              if (reqData.status) {\n                  that.toasterService.show(true, \"Successfully imported\");\n                importstatus = true;\n                that.route.navigate(['user']);\n              }\n              else {\n                that.submitted = false;\n                that.msubmitted = false;\n                that.service.isOverlay = false;\n              }\n            });\n          }\n          else {\n            that.submitted = false;\n            that.msubmitted = false;\n            that.service.isOverlay = false;\n            that.toasterService.show(false, \"Sorry! Unable to get Token URI\");\n            that.route.navigate(['user']);\n          }\n        }\n        else {\n          that.submitted = false;\n          that.msubmitted = false;\n          that.service.isOverlay = false;\n          that.toasterService.show(false, tokenOfOwner.message);  \n        }\n      }\n      console.log(importstatus, 'importstatus');\n      if (importstatus) {\n        that.submitted = false;\n        that.msubmitted = false;\n        that.service.isOverlay = false;\n        that.route.navigateByUrl('user'); \n        that.service.isOverlay = false;\n        that.toasterService.show(true, 'Your NFT details imported Success');\n        that.route.navigateByUrl('user');\n      }\n      else {\n        that.submitted = false;\n        that.msubmitted = false;\n        that.service.isOverlay = false;\n        that.route.navigateByUrl('user'); \n        that.service.isOverlay = false;\n        that.toasterService.show(false, \"Sorry failed to import your nft details\");  \n        that.route.navigate(['user']);\n      }\n    }\n    else {\n      that.msubmitted = false;\n      that.service.isOverlay = false;\n      that.toasterService.show(false, \"Sorry No nft available to your account\");\n      that.route.navigateByUrl('/user');\n    }\n  }\n\n  onChangeNetwork(curr) {\n    this.itemObj.currency = curr;\n  }\n\n  getNetwork() {\n    this.service.getRequest('users/getNetworks').subscribe((reqData: any) => {\n      if (reqData.status) {\n       this.network = reqData.data; \n      }\n    });\n  }\n}\n","<div class=\"digital-art-sec\">\n    <div class=\"middle-section\">\n        <div class=\"container tabpages-cnt\">\n            <div class=\"row\">\n                <div class=\"col-lg-12\">\n                    <h3 class=\"section-title text-left\">Create New Item</h3>\n                </div>\n                <form [formGroup]=\"co_form\" (ngSubmit)=\"onSubmit()\">\n                    <div class=\"col-md-12 col-sm-12 col-lg-12 col-xl-12\">\n                      <div class=\"form-group mt-4\">\n                        <label class=\"pb-0 font-16 text-black fontweight-400 mb-2\" for=\"network\">Choose Type of Network <span class=\"text-danger\">*</span></label><br>\n                        <select class=\"form-control\" formControlName=\"network\" *ngFor=\"let net of network;\" (change)=\"onChangeNetwork(net.currencyName)\" [(ngModel)]=\"itemObj.network\" [ngClass]=\"{ 'is-invalid': submitted && f.network.errors }\" required>\n                            <option value=\"\">select network type</option>\n                            <option value=\"{{net.networkName}}\">{{net.networkName}}</option>\n                        </select>\n                        <div *ngIf=\"f.network.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f.network.errors.required\">Network Type is required</div>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group mt-4\">\n                        <label class=\"pb-0 font-16 text-black fontweight-400 mb-2\" for=\"name\">Contract Address <span class=\"text-danger\">*</span></label>\n                        <input type=\"text\" formControlName=\"contractaddr\" [(ngModel)]=\"itemObj.contractaddr\" [ngClass]=\"{ 'is-invalid': submitted && f.contractaddr.errors }\" class=\"form-control input-sec font-16 fontweight-400\"\n                        placeholder=\"0x...sdf3\" required>\n                        <div *ngIf=\"f.contractaddr.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f.contractaddr.errors.required\">Contract Address is required</div>\n                        </div>\n                    </div>\n                    <div class=\"text-left\">\n                        <button class=\"btn default-btn mt-4\" *ngIf=\"!msubmitted\" data-toggle=\"modal\">\n                        Create</button>\n                        <label class=\"btn default-btn mt-4\" *ngIf=\"msubmitted\">Loading...</label>\n                    </div>\n            </div>\n        </form>\n    </div>\n</div>\n</div>\n</div>\n\n\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { Routes, RouterModule } from \"@angular/router\";\nimport { ImportComponent } from \"./import.component\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { TooltipModule } from \"ngx-bootstrap/tooltip/\";\nimport { LoaderModule } from \"src/app/common/loader/loader.module\";\nimport { ModalModule } from \"ngx-bootstrap/modal\";\n\nconst routes: Routes = [\n{\n  path: \"\",\n  component: ImportComponent,\n},\n];\n\n@NgModule({\n  declarations: [ImportComponent],\n  imports: [\n  CommonModule,\n  FormsModule,\n  ReactiveFormsModule,\n  RouterModule.forChild(routes),\n  LoaderModule,\n  TooltipModule.forRoot(),\n  ModalModule.forRoot(),  \n  ],\n})\nexport class ImportModule {}\n"],"sourceRoot":"webpack:///"}