{"version":3,"file":"ngx-bootstrap-accordion.js","sources":["../../../../src/accordion/accordion.config.ts","../../../../src/accordion/accordion.component.ts","../../../../src/accordion/accordion-group.component.ts","../../../../src/accordion/accordion.module.ts","../../../../src/accordion/ngx-bootstrap-accordion.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n/**\n * Configuration service, provides default values for the AccordionComponent.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccordionConfig {\n  /** Whether the other panels should be closed when a panel is opened */\n  closeOthers = false;\n  /** turn on/off animation */\n  isAnimated = false;\n}\n","import { Component, Input } from '@angular/core';\nimport { AccordionPanelComponent } from './accordion-group.component';\nimport { AccordionConfig } from './accordion.config';\n\n/** Displays collapsible content panels for presenting information in a limited amount of space. */\n@Component({\n  selector: 'accordion',\n  template: `<ng-content></ng-content>`,\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n  host: {\n    '[attr.aria-multiselectable]': 'closeOthers',\n    role: 'tablist',\n    class: 'panel-group',\n    style: 'display: block'\n  }\n})\nexport class AccordionComponent {\n  /** turn on/off animation */\n  @Input() isAnimated = false;\n  /** if `true` expanding one item will close all others */\n  @Input() closeOthers = false;\n\n  protected groups: AccordionPanelComponent[] = [];\n\n  constructor(config: AccordionConfig) {\n    Object.assign(this, config);\n  }\n\n  closeOtherPanels(openGroup: AccordionPanelComponent): void {\n    if (!this.closeOthers) {\n      return;\n    }\n\n    this.groups.forEach((group: AccordionPanelComponent) => {\n      if (group !== openGroup) {\n        group.isOpen = false;\n      }\n    });\n  }\n\n  addGroup(group: AccordionPanelComponent): void {\n    group.isAnimated = this.isAnimated;\n    this.groups.push(group);\n  }\n\n  removeGroup(group: AccordionPanelComponent): void {\n    const index = this.groups.indexOf(group);\n    if (index !== -1) {\n      this.groups.splice(index, 1);\n    }\n  }\n}\n","import {\n  Component, HostBinding, Inject, Input, OnDestroy, OnInit, Output, EventEmitter\n} from '@angular/core';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport { AccordionComponent } from './accordion.component';\n\n/**\n * ### Accordion heading\n * Instead of using `heading` attribute on the `accordion-group`, you can use\n * an `accordion-heading` attribute on `any` element inside of a group that\n * will be used as group's header template.\n */\n@Component({\n  selector: 'accordion-group, accordion-panel',\n  templateUrl: './accordion-group.component.html',\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n  host: {\n    class: 'panel',\n    style: 'display: block'\n  },\n  styleUrls: ['./accordion.scss']\n})\nexport class AccordionPanelComponent implements OnInit, OnDestroy {\n  /** turn on/off animation */\n  isAnimated = false;\n  /** Clickable text in accordion's group header, check `accordion heading` below for using html in header */\n  @Input() heading!: string;\n  /** Provides an ability to use Bootstrap's contextual panel classes\n   * (`panel-primary`, `panel-success`, `panel-info`, etc...).\n   * List of all available classes [available here]\n   * (https://getbootstrap.com/docs/3.3/components/#panels-alternatives)\n   */\n  @Input() panelClass = 'panel-default';\n  /** if <code>true</code> â€” disables accordion group */\n  @Input() isDisabled = false;\n  /** Emits when the opened state changes */\n  @Output() isOpenChange: EventEmitter<boolean> = new EventEmitter();\n\n  // Questionable, maybe .panel-open should be on child div.panel element?\n  /** Is accordion group open or closed. This property supports two-way binding */\n  @HostBinding('class.panel-open')\n  @Input()\n  get isOpen(): boolean {\n    return this._isOpen;\n  }\n\n  set isOpen(value: boolean) {\n    if (value !== this.isOpen) {\n      if (value) {\n        this.accordion.closeOtherPanels(this);\n      }\n      this._isOpen = value;\n      Promise.resolve(null)\n      .then(() => {\n        this.isOpenChange.emit(value);\n      });\n    }\n  }\n\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  protected _isOpen = false;\n  protected accordion: AccordionComponent;\n\n  constructor(@Inject(AccordionComponent) accordion: AccordionComponent) {\n    this.accordion = accordion;\n  }\n\n  ngOnInit(): void {\n    this.accordion.addGroup(this);\n  }\n\n  ngOnDestroy(): void {\n    this.accordion.removeGroup(this);\n  }\n\n  toggleOpen(): void {\n    if (!this.isDisabled) {\n      this.isOpen = !this.isOpen;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { AccordionComponent } from './accordion.component';\nimport { AccordionPanelComponent } from './accordion-group.component';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\n\n@NgModule({\n  imports: [CommonModule, CollapseModule],\n  declarations: [AccordionComponent, AccordionPanelComponent],\n  exports: [AccordionComponent, AccordionPanelComponent]\n})\nexport class AccordionModule {\n  static forRoot(): ModuleWithProviders<AccordionModule> {\n    return { ngModule: AccordionModule, providers: [] };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}