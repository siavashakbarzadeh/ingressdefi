{"version":3,"file":"ngx-bootstrap-buttons.js","sources":["../../../../src/buttons/button-checkbox.directive.ts","../../../../src/buttons/button-radio.directive.ts","../../../../src/buttons/button-radio-group.directive.ts","../../../../src/buttons/buttons.module.ts","../../../../src/buttons/ngx-bootstrap-buttons.ts"],"names":["RADIO_CONTROL_VALUE_ACCESSOR"],"mappings":"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","sourcesContent":["import {\n  Directive,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnInit,\n  Provider\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n// TODO: config: activeClass - Class to apply to the checked buttons\nexport const CHECKBOX_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ButtonCheckboxDirective),\n  multi: true\n};\n\ntype AvailableValues = boolean | string | number;\n\n/**\n * Add checkbox functionality to any element\n */\n@Directive({\n  selector: '[btnCheckbox]',\n  providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonCheckboxDirective implements ControlValueAccessor, OnInit {\n  /** Truthy value, will be set to ngModel */\n  @Input() btnCheckboxTrue:AvailableValues = true;\n  /** Falsy value, will be set to ngModel */\n  @Input() btnCheckboxFalse:AvailableValues = false;\n\n  @HostBinding('class.active')\n  @HostBinding('attr.aria-pressed')\n  state = false;\n\n  protected value?: AvailableValues;\n  protected isDisabled = false;\n\n  protected onChange = Function.prototype;\n  protected onTouched = Function.prototype;\n\n  // view -> model\n  @HostListener('click')\n  onClick(): void {\n    if (this.isDisabled) {\n      return;\n    }\n\n    this.toggle(!this.state);\n    this.onChange(this.value);\n  }\n\n  ngOnInit(): void {\n    this.toggle(this.trueValue === this.value);\n  }\n\n  protected get trueValue(): AvailableValues {\n    return typeof this.btnCheckboxTrue !== 'undefined'\n      ? this.btnCheckboxTrue\n      : true;\n  }\n\n  protected get falseValue(): AvailableValues {\n    return typeof this.btnCheckboxFalse !== 'undefined'\n      ? this.btnCheckboxFalse\n      : false;\n  }\n\n  toggle(state: boolean): void {\n    this.state = state;\n    this.value = this.state ? this.trueValue : this.falseValue;\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  writeValue(value: boolean | string | null): void {\n    this.state = this.trueValue === value;\n    this.value = value ? this.trueValue : this.falseValue;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Inject,\n  Input,\n  OnChanges,\n  Optional,\n  Provider,\n  Renderer2,\n  SimpleChanges\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ButtonRadioDirective),\n  multi: true\n};\n\n/**\n * Create radio buttons or groups of buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({\n  selector: '[btnRadio]',\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonRadioDirective implements ControlValueAccessor, OnChanges {\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  /** Radio button value, will be set to `ngModel` */\n  @Input() btnRadio?: string;\n  /** If `true` — radio button can be unchecked */\n  @Input() uncheckable = false;\n  /** Current value of radio component or group */\n  @Input()\n  get value() {\n    return this.group ? this.group.value : this._value;\n  }\n\n  set value(value: string | undefined) {\n    if (this.group) {\n      this.group.value = value;\n\n      return;\n    }\n    this._value = value;\n    this._onChange(value);\n  }\n  /** If `true` — radio button is disabled */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(disabled: boolean) {\n    this.setDisabledState(disabled);\n  }\n\n  @HostBinding('attr.aria-disabled')\n  get controlOrGroupDisabled() {\n    return this.disabled || (this.group && this.group.disabled) ? true : undefined;\n  }\n\n  @HostBinding('class.disabled')\n  get hasDisabledClass() {\n    // Although the radio is disabled the active radio should still stand out.\n    // The disabled class will prevent this so don't add it on the active radio\n    return this.controlOrGroupDisabled && !this.isActive;\n  }\n\n  @HostBinding('class.active')\n  @HostBinding('attr.aria-checked')\n  get isActive(): boolean {\n    return this.btnRadio === this.value;\n  }\n\n  @HostBinding('attr.role') readonly role: string = 'radio';\n\n  @HostBinding('attr.tabindex')\n  get tabindex(): undefined | number {\n    if (this.controlOrGroupDisabled) {\n      // Disabled radio buttons should not receive focus\n      return undefined;\n    } else if (this.isActive || this.group == null) {\n      return 0;\n    } else {\n      return -1;\n    }\n  }\n\n  get hasFocus(): boolean {\n    return this._hasFocus;\n  }\n\n  private _value?: string;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  constructor(\n    private el: ElementRef,\n    private cdr: ChangeDetectorRef,\n    private renderer: Renderer2,\n    @Optional()\n    @Inject(forwardRef(() => ButtonRadioGroupDirective))\n    private group: ButtonRadioGroupDirective\n  ) {}\n\n  @HostListener('click')\n  toggleIfAllowed(): void {\n    if (!this.canToggle()) {\n      return;\n    }\n\n    if (this.uncheckable && this.btnRadio === this.value) {\n      this.value = undefined;\n    } else {\n      this.value = this.btnRadio;\n    }\n  }\n\n  @HostListener('keydown.space', ['$event'])\n  onSpacePressed(event: KeyboardEvent) {\n    this.toggleIfAllowed();\n    event.preventDefault();\n  }\n\n  focus() {\n    this.el.nativeElement.focus();\n  }\n\n  @HostListener('focus')\n  onFocus() {\n    this._hasFocus = true;\n  }\n\n  @HostListener('blur')\n  onBlur() {\n    this._hasFocus = false;\n    this.onTouched();\n  }\n\n  canToggle(): boolean {\n    return !this.controlOrGroupDisabled && (this.uncheckable || this.btnRadio !== this.value);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if ('uncheckable' in changes) {\n      this.uncheckable = this.uncheckable !== false && typeof this.uncheckable !== 'undefined';\n    }\n  }\n\n  _onChange(value?: string): void {\n    if (this.group) {\n      this.group.value = value;\n\n      return;\n    }\n    this.onTouched();\n    this.onChange(value);\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  writeValue(value: string): void {\n    this.value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    this._disabled = disabled;\n    if (disabled) {\n      this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\n\n      return;\n    }\n    this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\n  }\n}\n","import {\n  ChangeDetectorRef,\n  ContentChildren,\n  Directive,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Provider,\n  QueryList\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ButtonRadioDirective } from './button-radio.directive';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ButtonRadioGroupDirective),\n  multi: true\n};\n\n/**\n * A group of radio buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({\n  selector: '[btnRadioGroup]',\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonRadioGroupDirective implements ControlValueAccessor {\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  @HostBinding('attr.role') readonly role: string = 'radiogroup';\n\n  @ContentChildren(forwardRef(() => ButtonRadioDirective))\n  radioButtons?: QueryList<ButtonRadioDirective>;\n\n  constructor(private cdr: ChangeDetectorRef) {\n  }\n\n  private _value?: string;\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value: string | undefined) {\n    this._value = value;\n    this.onChange(value);\n  }\n\n  private _disabled = false;\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  @HostBinding('attr.tabindex')\n  get tabindex(): null | number {\n    if (this._disabled) {\n      return null;\n    } else {\n      return 0;\n    }\n  }\n\n  writeValue(value?: string): void {\n    this._value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    if (this.radioButtons) {\n      this._disabled = disabled;\n      this.radioButtons.forEach(buttons => {\n        buttons.setDisabledState(disabled);\n      });\n      this.cdr.markForCheck();\n    }\n  }\n\n  @HostListener('focus')\n  onFocus() {\n    if (this._disabled) {\n      return;\n    }\n    const activeRadio = this.getActiveOrFocusedRadio();\n    if (activeRadio) {\n      activeRadio.focus();\n      return;\n    }\n\n    if (this.radioButtons) {\n      const firstEnabled = this.radioButtons.find(r => !r.disabled);\n      if (firstEnabled) {\n        firstEnabled.focus();\n      }\n    }\n  }\n\n  @HostListener('blur')\n  onBlur() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  @HostListener('keydown.ArrowRight', ['$event'])\n  @HostListener('keydown.ArrowDown', ['$event'])\n  selectNext(event: KeyboardEvent) {\n    this.selectInDirection('next');\n    event.preventDefault();\n  }\n\n  @HostListener('keydown.ArrowLeft', ['$event'])\n  @HostListener('keydown.ArrowUp', ['$event'])\n  selectPrevious(event: KeyboardEvent) {\n    this.selectInDirection('previous');\n    event.preventDefault();\n  }\n\n  private selectInDirection(direction: 'next' | 'previous') {\n    if (this._disabled) {\n      return;\n    }\n\n    function nextIndex(currentIndex: number, buttonRadioDirectives: ButtonRadioDirective[]) {\n      const step = direction === 'next' ? 1 : -1;\n      let calcIndex = (currentIndex + step) % buttonRadioDirectives.length;\n      if (calcIndex < 0) {\n        calcIndex = buttonRadioDirectives.length - 1;\n      }\n\n      return calcIndex;\n    }\n\n    const activeRadio = this.getActiveOrFocusedRadio();\n\n    if (activeRadio && this.radioButtons) {\n      const buttonRadioDirectives = this.radioButtons.toArray();\n      const currentActiveIndex = buttonRadioDirectives.indexOf(activeRadio);\n      for (\n        let i = nextIndex(currentActiveIndex, buttonRadioDirectives);\n        i !== currentActiveIndex;\n        i = nextIndex(i, buttonRadioDirectives)\n      ) {\n        if (buttonRadioDirectives[i].canToggle()) {\n          buttonRadioDirectives[i].toggleIfAllowed();\n          buttonRadioDirectives[i].focus();\n          break;\n        }\n      }\n    }\n  }\n\n  private getActiveOrFocusedRadio(): ButtonRadioDirective | undefined {\n    if (!this.radioButtons) {\n      return void 0;\n    }\n\n    return this.radioButtons.find(button => button.isActive)\n      || this.radioButtons.find(button => button.hasFocus);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { ButtonCheckboxDirective } from './button-checkbox.directive';\nimport { ButtonRadioDirective } from './button-radio.directive';\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\n\n@NgModule({\n  declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],\n  exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]\n})\nexport class ButtonsModule {\n  static forRoot(): ModuleWithProviders<ButtonsModule> {\n    return { ngModule: ButtonsModule, providers: [] };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {CHECKBOX_CONTROL_VALUE_ACCESSOR as ɵa} from './button-checkbox.directive';\nexport {RADIO_CONTROL_VALUE_ACCESSOR as ɵb} from './button-radio-group.directive';\nexport {RADIO_CONTROL_VALUE_ACCESSOR as ɵc} from './button-radio.directive';"]}