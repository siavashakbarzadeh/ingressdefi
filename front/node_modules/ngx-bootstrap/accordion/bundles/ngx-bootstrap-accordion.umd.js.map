{"version":3,"file":"ngx-bootstrap-accordion.umd.js","sources":["../../../../src/accordion/accordion.config.ts","../../../../src/accordion/accordion.component.ts","../../../../src/accordion/accordion-group.component.ts","../../../../src/accordion/accordion.module.ts","../../../../src/accordion/ngx-bootstrap-accordion.ts"],"names":["Injectable","Component","Input","EventEmitter","isBs3","Inject","Output","HostBinding","NgModule","CommonModule","CollapseModule"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n/**\n * Configuration service, provides default values for the AccordionComponent.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccordionConfig {\n  /** Whether the other panels should be closed when a panel is opened */\n  closeOthers = false;\n  /** turn on/off animation */\n  isAnimated = false;\n}\n","import { Component, Input } from '@angular/core';\nimport { AccordionPanelComponent } from './accordion-group.component';\nimport { AccordionConfig } from './accordion.config';\n\n/** Displays collapsible content panels for presenting information in a limited amount of space. */\n@Component({\n  selector: 'accordion',\n  template: `<ng-content></ng-content>`,\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n  host: {\n    '[attr.aria-multiselectable]': 'closeOthers',\n    role: 'tablist',\n    class: 'panel-group',\n    style: 'display: block'\n  }\n})\nexport class AccordionComponent {\n  /** turn on/off animation */\n  @Input() isAnimated = false;\n  /** if `true` expanding one item will close all others */\n  @Input() closeOthers = false;\n\n  protected groups: AccordionPanelComponent[] = [];\n\n  constructor(config: AccordionConfig) {\n    Object.assign(this, config);\n  }\n\n  closeOtherPanels(openGroup: AccordionPanelComponent): void {\n    if (!this.closeOthers) {\n      return;\n    }\n\n    this.groups.forEach((group: AccordionPanelComponent) => {\n      if (group !== openGroup) {\n        group.isOpen = false;\n      }\n    });\n  }\n\n  addGroup(group: AccordionPanelComponent): void {\n    group.isAnimated = this.isAnimated;\n    this.groups.push(group);\n  }\n\n  removeGroup(group: AccordionPanelComponent): void {\n    const index = this.groups.indexOf(group);\n    if (index !== -1) {\n      this.groups.splice(index, 1);\n    }\n  }\n}\n","import {\n  Component, HostBinding, Inject, Input, OnDestroy, OnInit, Output, EventEmitter\n} from '@angular/core';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport { AccordionComponent } from './accordion.component';\n\n/**\n * ### Accordion heading\n * Instead of using `heading` attribute on the `accordion-group`, you can use\n * an `accordion-heading` attribute on `any` element inside of a group that\n * will be used as group's header template.\n */\n@Component({\n  selector: 'accordion-group, accordion-panel',\n  templateUrl: './accordion-group.component.html',\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n  host: {\n    class: 'panel',\n    style: 'display: block'\n  },\n  styleUrls: ['./accordion.scss']\n})\nexport class AccordionPanelComponent implements OnInit, OnDestroy {\n  /** turn on/off animation */\n  isAnimated = false;\n  /** Clickable text in accordion's group header, check `accordion heading` below for using html in header */\n  @Input() heading!: string;\n  /** Provides an ability to use Bootstrap's contextual panel classes\n   * (`panel-primary`, `panel-success`, `panel-info`, etc...).\n   * List of all available classes [available here]\n   * (https://getbootstrap.com/docs/3.3/components/#panels-alternatives)\n   */\n  @Input() panelClass = 'panel-default';\n  /** if <code>true</code> â€” disables accordion group */\n  @Input() isDisabled = false;\n  /** Emits when the opened state changes */\n  @Output() isOpenChange: EventEmitter<boolean> = new EventEmitter();\n\n  // Questionable, maybe .panel-open should be on child div.panel element?\n  /** Is accordion group open or closed. This property supports two-way binding */\n  @HostBinding('class.panel-open')\n  @Input()\n  get isOpen(): boolean {\n    return this._isOpen;\n  }\n\n  set isOpen(value: boolean) {\n    if (value !== this.isOpen) {\n      if (value) {\n        this.accordion.closeOtherPanels(this);\n      }\n      this._isOpen = value;\n      Promise.resolve(null)\n      .then(() => {\n        this.isOpenChange.emit(value);\n      });\n    }\n  }\n\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  protected _isOpen = false;\n  protected accordion: AccordionComponent;\n\n  constructor(@Inject(AccordionComponent) accordion: AccordionComponent) {\n    this.accordion = accordion;\n  }\n\n  ngOnInit(): void {\n    this.accordion.addGroup(this);\n  }\n\n  ngOnDestroy(): void {\n    this.accordion.removeGroup(this);\n  }\n\n  toggleOpen(): void {\n    if (!this.isDisabled) {\n      this.isOpen = !this.isOpen;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { AccordionComponent } from './accordion.component';\nimport { AccordionPanelComponent } from './accordion-group.component';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\n\n@NgModule({\n  imports: [CommonModule, CollapseModule],\n  declarations: [AccordionComponent, AccordionPanelComponent],\n  exports: [AccordionComponent, AccordionPanelComponent]\n})\nexport class AccordionModule {\n  static forRoot(): ModuleWithProviders<AccordionModule> {\n    return { ngModule: AccordionModule, providers: [] };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}