{"version":3,"file":"alert.component.js","sources":["../../../../src/alert/alert.component.ts"],"names":[],"mappings":";AAAA,OAAO,EACL,uBAAuB,EACvB,iBAAiB,EACjB,SAAS,EACT,YAAY,EACZ,KAAK,EAEL,MAAM,EACP,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAC7C,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAO/C,MAAM,OAAO,cAAc;AAAG,IAyB5B,YAAY,OAAoB,EAAU,eAAkC;AAC9E,QAD4C,oBAAe,GAAf,eAAe,CAAmB;AAAC,QAxB7E;AACF;AACM;AAEA,WADD;AACL,QAAW,SAAI,GAAG,SAAS,CAAC;AAC5B,QAAE,gDAAgD;AAClD,QAA2B,gBAAW,GAAG,KAAK,CAAC;AAC/C,QAGE,uBAAuB;AACzB,QAAW,WAAM,GAAG,IAAI,CAAC;AACzB,QACE;AACF;AAEA,WADK;AACL,QAAY,YAAO,GAAG,IAAI,YAAY,EAAkB,CAAC;AACzD,QAAE,mFAAmF;AACrF,QAAY,aAAQ,GAAG,IAAI,YAAY,EAAkB,CAAC;AAC1D,QAEE,YAAO,GAAG,EAAE,CAAC;AACf,QAAE,sBAAiB,GAAG,IAAI,YAAY,EAAW,CAAC;AAClD,QAEI,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACjC,QAAI,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAC,wBAAwB,EAAE,EAAE;AAClE,YAAM,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE,CAAC;AACjE,YAAM,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;AAC1C,QAAI,CAAC,CAAC,CAAC;AACP,IAAE,CAAC;AACH,IACE,QAAQ;AAAK,QACX,IAAI,IAAI,CAAC,gBAAgB,EAAE;AAC/B,YAAM,wEAAwE;AAC9E,YAAM,UAAU,CACR,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,EAClB,QAAQ,CAAC,IAAI,CAAC,gBAA0B,EAAE,EAAE,CAAC,CAC9C,CAAC;AACR,SAAK;AACL,IAAE,CAAC;AACH,IACE,6EAA6E;AAC/E,IAAE,gDAAgD;AAClD,IAAE;AACF;AACE,OAAG;AACL,IAAE,KAAK;AAAK,QACR,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;AACtB,YAAM,OAAO;AACb,SAAK;AACL,QACI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC5B,QAAI,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AACxB,QAAI,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;AACxC,QAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC7B,IAAE,CAAC;AACH;0CA/DC,SAAS,SAAC,kBACT,QAAQ,EAAE,gBAAgB,kBAC1B;kbAAqC,kBACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM,cAChD;;;;;4FACI;AAAC;AAAwC,YARrC,WAAW;AAAI,YAPtB,iBAAiB;AAClB;AAAG;AAGJ,mBAgBG,KAAK;AAAK,0BAEI,KAAK;AAAK,+BAExB,KAAK;AAAK,qBAGV,KAAK;AAAK,sBAKV,MAAM;AAAK,uBAEX,MAAM;AAAI;AAZc;AAAa,IAArC,QAAQ,EAAE;AAAE;AACV,mDAD0C;;;;;;;;;;;;;;;;;;;;oBAC/C;AAAC","sourcesContent":["import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output\n} from '@angular/core';\nimport { AlertConfig } from './alert.config';\nimport { OnChange } from 'ngx-bootstrap/utils';\n\n@Component({\n  selector: 'alert,bs-alert',\n  templateUrl: './alert.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AlertComponent implements OnInit {\n  /** Alert type.\n   * Provides one of four bootstrap supported contextual classes:\n   * `success`, `info`, `warning` and `danger`\n   */\n  @Input() type = 'warning';\n  /** If set, displays an inline \"Close\" button */\n  @OnChange()   @Input()   dismissible = false;\n  /** Number in milliseconds, after which alert will be closed */\n  @Input() dismissOnTimeout?: number | string;\n\n  /** Is alert visible */\n  @Input() isOpen = true;\n\n  /** This event fires immediately after close instance method is called,\n   * $event is an instance of Alert component.\n   */\n  @Output() onClose = new EventEmitter<AlertComponent>();\n  /** This event fires when alert closed, $event is an instance of Alert component */\n  @Output() onClosed = new EventEmitter<AlertComponent>();\n\n\n  classes = '';\n  dismissibleChange = new EventEmitter<boolean>();\n\n  constructor(_config: AlertConfig, private changeDetection: ChangeDetectorRef) {\n    Object.assign(this, _config);\n    this.dismissibleChange.subscribe((/*dismissible: boolean*/) => {\n      this.classes = this.dismissible ? 'alert-dismissible' : '';\n      this.changeDetection.markForCheck();\n    });\n  }\n\n  ngOnInit(): void {\n    if (this.dismissOnTimeout) {\n      // if dismissOnTimeout used as attr without binding, it will be a string\n      setTimeout(\n        () => this.close(),\n        parseInt(this.dismissOnTimeout as string, 10)\n      );\n    }\n  }\n\n  // todo: animation ` If the .fade and .in classes are present on the element,\n  // the alert will fade out before it is removed`\n  /**\n   * Closes an alert by removing it from the DOM.\n   */\n  close(): void {\n    if (!this.isOpen) {\n      return;\n    }\n\n    this.onClose.emit(this);\n    this.isOpen = false;\n    this.changeDetection.markForCheck();\n    this.onClosed.emit(this);\n  }\n}\n"]}