{"version":3,"file":"ngx-bootstrap-buttons.umd.js","sources":["../../../../src/buttons/button-checkbox.directive.ts","../../../../src/buttons/button-radio.directive.ts","../../../../src/buttons/button-radio-group.directive.ts","../../../../src/buttons/buttons.module.ts","../../../../src/buttons/ngx-bootstrap-buttons.ts"],"names":["NG_VALUE_ACCESSOR","forwardRef","Directive","Input","HostBinding","HostListener","ElementRef","ChangeDetectorRef","Renderer2","Optional","Inject","RADIO_CONTROL_VALUE_ACCESSOR","ContentChildren","NgModule"],"mappings":"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","sourcesContent":["import {\n  Directive,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnInit,\n  Provider\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n// TODO: config: activeClass - Class to apply to the checked buttons\nexport const CHECKBOX_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ButtonCheckboxDirective),\n  multi: true\n};\n\ntype AvailableValues = boolean | string | number;\n\n/**\n * Add checkbox functionality to any element\n */\n@Directive({\n  selector: '[btnCheckbox]',\n  providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonCheckboxDirective implements ControlValueAccessor, OnInit {\n  /** Truthy value, will be set to ngModel */\n  @Input() btnCheckboxTrue:AvailableValues = true;\n  /** Falsy value, will be set to ngModel */\n  @Input() btnCheckboxFalse:AvailableValues = false;\n\n  @HostBinding('class.active')\n  @HostBinding('attr.aria-pressed')\n  state = false;\n\n  protected value?: AvailableValues;\n  protected isDisabled = false;\n\n  protected onChange = Function.prototype;\n  protected onTouched = Function.prototype;\n\n  // view -> model\n  @HostListener('click')\n  onClick(): void {\n    if (this.isDisabled) {\n      return;\n    }\n\n    this.toggle(!this.state);\n    this.onChange(this.value);\n  }\n\n  ngOnInit(): void {\n    this.toggle(this.trueValue === this.value);\n  }\n\n  protected get trueValue(): AvailableValues {\n    return typeof this.btnCheckboxTrue !== 'undefined'\n      ? this.btnCheckboxTrue\n      : true;\n  }\n\n  protected get falseValue(): AvailableValues {\n    return typeof this.btnCheckboxFalse !== 'undefined'\n      ? this.btnCheckboxFalse\n      : false;\n  }\n\n  toggle(state: boolean): void {\n    this.state = state;\n    this.value = this.state ? this.trueValue : this.falseValue;\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  writeValue(value: boolean | string | null): void {\n    this.state = this.trueValue === value;\n    this.value = value ? this.trueValue : this.falseValue;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Inject,\n  Input,\n  OnChanges,\n  Optional,\n  Provider,\n  Renderer2,\n  SimpleChanges\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ButtonRadioDirective),\n  multi: true\n};\n\n/**\n * Create radio buttons or groups of buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({\n  selector: '[btnRadio]',\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonRadioDirective implements ControlValueAccessor, OnChanges {\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  /** Radio button value, will be set to `ngModel` */\n  @Input() btnRadio?: string;\n  /** If `true` — radio button can be unchecked */\n  @Input() uncheckable = false;\n  /** Current value of radio component or group */\n  @Input()\n  get value() {\n    return this.group ? this.group.value : this._value;\n  }\n\n  set value(value: string | undefined) {\n    if (this.group) {\n      this.group.value = value;\n\n      return;\n    }\n    this._value = value;\n    this._onChange(value);\n  }\n  /** If `true` — radio button is disabled */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(disabled: boolean) {\n    this.setDisabledState(disabled);\n  }\n\n  @HostBinding('attr.aria-disabled')\n  get controlOrGroupDisabled() {\n    return this.disabled || (this.group && this.group.disabled) ? true : undefined;\n  }\n\n  @HostBinding('class.disabled')\n  get hasDisabledClass() {\n    // Although the radio is disabled the active radio should still stand out.\n    // The disabled class will prevent this so don't add it on the active radio\n    return this.controlOrGroupDisabled && !this.isActive;\n  }\n\n  @HostBinding('class.active')\n  @HostBinding('attr.aria-checked')\n  get isActive(): boolean {\n    return this.btnRadio === this.value;\n  }\n\n  @HostBinding('attr.role') readonly role: string = 'radio';\n\n  @HostBinding('attr.tabindex')\n  get tabindex(): undefined | number {\n    if (this.controlOrGroupDisabled) {\n      // Disabled radio buttons should not receive focus\n      return undefined;\n    } else if (this.isActive || this.group == null) {\n      return 0;\n    } else {\n      return -1;\n    }\n  }\n\n  get hasFocus(): boolean {\n    return this._hasFocus;\n  }\n\n  private _value?: string;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  constructor(\n    private el: ElementRef,\n    private cdr: ChangeDetectorRef,\n    private renderer: Renderer2,\n    @Optional()\n    @Inject(forwardRef(() => ButtonRadioGroupDirective))\n    private group: ButtonRadioGroupDirective\n  ) {}\n\n  @HostListener('click')\n  toggleIfAllowed(): void {\n    if (!this.canToggle()) {\n      return;\n    }\n\n    if (this.uncheckable && this.btnRadio === this.value) {\n      this.value = undefined;\n    } else {\n      this.value = this.btnRadio;\n    }\n  }\n\n  @HostListener('keydown.space', ['$event'])\n  onSpacePressed(event: KeyboardEvent) {\n    this.toggleIfAllowed();\n    event.preventDefault();\n  }\n\n  focus() {\n    this.el.nativeElement.focus();\n  }\n\n  @HostListener('focus')\n  onFocus() {\n    this._hasFocus = true;\n  }\n\n  @HostListener('blur')\n  onBlur() {\n    this._hasFocus = false;\n    this.onTouched();\n  }\n\n  canToggle(): boolean {\n    return !this.controlOrGroupDisabled && (this.uncheckable || this.btnRadio !== this.value);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if ('uncheckable' in changes) {\n      this.uncheckable = this.uncheckable !== false && typeof this.uncheckable !== 'undefined';\n    }\n  }\n\n  _onChange(value?: string): void {\n    if (this.group) {\n      this.group.value = value;\n\n      return;\n    }\n    this.onTouched();\n    this.onChange(value);\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  writeValue(value: string): void {\n    this.value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    this._disabled = disabled;\n    if (disabled) {\n      this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\n\n      return;\n    }\n    this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\n  }\n}\n","import {\n  ChangeDetectorRef,\n  ContentChildren,\n  Directive,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Provider,\n  QueryList\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ButtonRadioDirective } from './button-radio.directive';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ButtonRadioGroupDirective),\n  multi: true\n};\n\n/**\n * A group of radio buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({\n  selector: '[btnRadioGroup]',\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonRadioGroupDirective implements ControlValueAccessor {\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  @HostBinding('attr.role') readonly role: string = 'radiogroup';\n\n  @ContentChildren(forwardRef(() => ButtonRadioDirective))\n  radioButtons?: QueryList<ButtonRadioDirective>;\n\n  constructor(private cdr: ChangeDetectorRef) {\n  }\n\n  private _value?: string;\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value: string | undefined) {\n    this._value = value;\n    this.onChange(value);\n  }\n\n  private _disabled = false;\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  @HostBinding('attr.tabindex')\n  get tabindex(): null | number {\n    if (this._disabled) {\n      return null;\n    } else {\n      return 0;\n    }\n  }\n\n  writeValue(value?: string): void {\n    this._value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    if (this.radioButtons) {\n      this._disabled = disabled;\n      this.radioButtons.forEach(buttons => {\n        buttons.setDisabledState(disabled);\n      });\n      this.cdr.markForCheck();\n    }\n  }\n\n  @HostListener('focus')\n  onFocus() {\n    if (this._disabled) {\n      return;\n    }\n    const activeRadio = this.getActiveOrFocusedRadio();\n    if (activeRadio) {\n      activeRadio.focus();\n      return;\n    }\n\n    if (this.radioButtons) {\n      const firstEnabled = this.radioButtons.find(r => !r.disabled);\n      if (firstEnabled) {\n        firstEnabled.focus();\n      }\n    }\n  }\n\n  @HostListener('blur')\n  onBlur() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  @HostListener('keydown.ArrowRight', ['$event'])\n  @HostListener('keydown.ArrowDown', ['$event'])\n  selectNext(event: KeyboardEvent) {\n    this.selectInDirection('next');\n    event.preventDefault();\n  }\n\n  @HostListener('keydown.ArrowLeft', ['$event'])\n  @HostListener('keydown.ArrowUp', ['$event'])\n  selectPrevious(event: KeyboardEvent) {\n    this.selectInDirection('previous');\n    event.preventDefault();\n  }\n\n  private selectInDirection(direction: 'next' | 'previous') {\n    if (this._disabled) {\n      return;\n    }\n\n    function nextIndex(currentIndex: number, buttonRadioDirectives: ButtonRadioDirective[]) {\n      const step = direction === 'next' ? 1 : -1;\n      let calcIndex = (currentIndex + step) % buttonRadioDirectives.length;\n      if (calcIndex < 0) {\n        calcIndex = buttonRadioDirectives.length - 1;\n      }\n\n      return calcIndex;\n    }\n\n    const activeRadio = this.getActiveOrFocusedRadio();\n\n    if (activeRadio && this.radioButtons) {\n      const buttonRadioDirectives = this.radioButtons.toArray();\n      const currentActiveIndex = buttonRadioDirectives.indexOf(activeRadio);\n      for (\n        let i = nextIndex(currentActiveIndex, buttonRadioDirectives);\n        i !== currentActiveIndex;\n        i = nextIndex(i, buttonRadioDirectives)\n      ) {\n        if (buttonRadioDirectives[i].canToggle()) {\n          buttonRadioDirectives[i].toggleIfAllowed();\n          buttonRadioDirectives[i].focus();\n          break;\n        }\n      }\n    }\n  }\n\n  private getActiveOrFocusedRadio(): ButtonRadioDirective | undefined {\n    if (!this.radioButtons) {\n      return void 0;\n    }\n\n    return this.radioButtons.find(button => button.isActive)\n      || this.radioButtons.find(button => button.hasFocus);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { ButtonCheckboxDirective } from './button-checkbox.directive';\nimport { ButtonRadioDirective } from './button-radio.directive';\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\n\n@NgModule({\n  declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],\n  exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]\n})\nexport class ButtonsModule {\n  static forRoot(): ModuleWithProviders<ButtonsModule> {\n    return { ngModule: ButtonsModule, providers: [] };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {CHECKBOX_CONTROL_VALUE_ACCESSOR as ɵa} from './button-checkbox.directive';\nexport {RADIO_CONTROL_VALUE_ACCESSOR as ɵb} from './button-radio-group.directive';\nexport {RADIO_CONTROL_VALUE_ACCESSOR as ɵc} from './button-radio.directive';"]}