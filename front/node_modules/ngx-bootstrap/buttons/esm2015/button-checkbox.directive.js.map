{"version":3,"file":"button-checkbox.directive.js","sources":["../../../../src/buttons/button-checkbox.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Directive,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnInit,\n  Provider\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n// TODO: config: activeClass - Class to apply to the checked buttons\nexport const CHECKBOX_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ButtonCheckboxDirective),\n  multi: true\n};\n\ntype AvailableValues = boolean | string | number;\n\n/**\n * Add checkbox functionality to any element\n */\n@Directive({\n  selector: '[btnCheckbox]',\n  providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonCheckboxDirective implements ControlValueAccessor, OnInit {\n  /** Truthy value, will be set to ngModel */\n  @Input() btnCheckboxTrue:AvailableValues = true;\n  /** Falsy value, will be set to ngModel */\n  @Input() btnCheckboxFalse:AvailableValues = false;\n\n  @HostBinding('class.active')\n  @HostBinding('attr.aria-pressed')\n  state = false;\n\n  protected value?: AvailableValues;\n  protected isDisabled = false;\n\n  protected onChange = Function.prototype;\n  protected onTouched = Function.prototype;\n\n  // view -> model\n  @HostListener('click')\n  onClick(): void {\n    if (this.isDisabled) {\n      return;\n    }\n\n    this.toggle(!this.state);\n    this.onChange(this.value);\n  }\n\n  ngOnInit(): void {\n    this.toggle(this.trueValue === this.value);\n  }\n\n  protected get trueValue(): AvailableValues {\n    return typeof this.btnCheckboxTrue !== 'undefined'\n      ? this.btnCheckboxTrue\n      : true;\n  }\n\n  protected get falseValue(): AvailableValues {\n    return typeof this.btnCheckboxFalse !== 'undefined'\n      ? this.btnCheckboxFalse\n      : false;\n  }\n\n  toggle(state: boolean): void {\n    this.state = state;\n    this.value = this.state ? this.trueValue : this.falseValue;\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  writeValue(value: boolean | string | null): void {\n    this.state = this.trueValue === value;\n    this.value = value ? this.trueValue : this.falseValue;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n}\n"]}