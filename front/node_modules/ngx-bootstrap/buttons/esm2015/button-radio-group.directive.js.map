{"version":3,"file":"button-radio-group.directive.js","sources":["../../../../src/buttons/button-radio-group.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ChangeDetectorRef,\n  ContentChildren,\n  Directive,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Provider,\n  QueryList\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ButtonRadioDirective } from './button-radio.directive';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ButtonRadioGroupDirective),\n  multi: true\n};\n\n/**\n * A group of radio buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({\n  selector: '[btnRadioGroup]',\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonRadioGroupDirective implements ControlValueAccessor {\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  @HostBinding('attr.role') readonly role: string = 'radiogroup';\n\n  @ContentChildren(forwardRef(() => ButtonRadioDirective))\n  radioButtons?: QueryList<ButtonRadioDirective>;\n\n  constructor(private cdr: ChangeDetectorRef) {\n  }\n\n  private _value?: string;\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value: string | undefined) {\n    this._value = value;\n    this.onChange(value);\n  }\n\n  private _disabled = false;\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  @HostBinding('attr.tabindex')\n  get tabindex(): null | number {\n    if (this._disabled) {\n      return null;\n    } else {\n      return 0;\n    }\n  }\n\n  writeValue(value?: string): void {\n    this._value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    if (this.radioButtons) {\n      this._disabled = disabled;\n      this.radioButtons.forEach(buttons => {\n        buttons.setDisabledState(disabled);\n      });\n      this.cdr.markForCheck();\n    }\n  }\n\n  @HostListener('focus')\n  onFocus() {\n    if (this._disabled) {\n      return;\n    }\n    const activeRadio = this.getActiveOrFocusedRadio();\n    if (activeRadio) {\n      activeRadio.focus();\n      return;\n    }\n\n    if (this.radioButtons) {\n      const firstEnabled = this.radioButtons.find(r => !r.disabled);\n      if (firstEnabled) {\n        firstEnabled.focus();\n      }\n    }\n  }\n\n  @HostListener('blur')\n  onBlur() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  @HostListener('keydown.ArrowRight', ['$event'])\n  @HostListener('keydown.ArrowDown', ['$event'])\n  selectNext(event: KeyboardEvent) {\n    this.selectInDirection('next');\n    event.preventDefault();\n  }\n\n  @HostListener('keydown.ArrowLeft', ['$event'])\n  @HostListener('keydown.ArrowUp', ['$event'])\n  selectPrevious(event: KeyboardEvent) {\n    this.selectInDirection('previous');\n    event.preventDefault();\n  }\n\n  private selectInDirection(direction: 'next' | 'previous') {\n    if (this._disabled) {\n      return;\n    }\n\n    function nextIndex(currentIndex: number, buttonRadioDirectives: ButtonRadioDirective[]) {\n      const step = direction === 'next' ? 1 : -1;\n      let calcIndex = (currentIndex + step) % buttonRadioDirectives.length;\n      if (calcIndex < 0) {\n        calcIndex = buttonRadioDirectives.length - 1;\n      }\n\n      return calcIndex;\n    }\n\n    const activeRadio = this.getActiveOrFocusedRadio();\n\n    if (activeRadio && this.radioButtons) {\n      const buttonRadioDirectives = this.radioButtons.toArray();\n      const currentActiveIndex = buttonRadioDirectives.indexOf(activeRadio);\n      for (\n        let i = nextIndex(currentActiveIndex, buttonRadioDirectives);\n        i !== currentActiveIndex;\n        i = nextIndex(i, buttonRadioDirectives)\n      ) {\n        if (buttonRadioDirectives[i].canToggle()) {\n          buttonRadioDirectives[i].toggleIfAllowed();\n          buttonRadioDirectives[i].focus();\n          break;\n        }\n      }\n    }\n  }\n\n  private getActiveOrFocusedRadio(): ButtonRadioDirective | undefined {\n    if (!this.radioButtons) {\n      return void 0;\n    }\n\n    return this.radioButtons.find(button => button.isActive)\n      || this.radioButtons.find(button => button.hasFocus);\n  }\n}\n"]}