{"version":3,"file":"bs-days-calendar-view.component.js","sources":["../../../../../../src/datepicker/themes/bs/bs-days-calendar-view.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  Output\n} from '@angular/core';\n\nimport { isSameDay } from 'ngx-bootstrap/chronos';\n\nimport {\n  BsDatepickerViewMode,\n  BsNavigationDirection,\n  BsNavigationEvent,\n  CellHoverEvent, DatepickerDateTooltipText,\n  DatepickerRenderOptions,\n  DaysCalendarViewModel,\n  DayViewModel, WeekViewModel\n} from '../../models';\n\nimport { BsDatepickerConfig } from '../../bs-datepicker.config';\n\n@Component({\n  selector: 'bs-days-calendar-view',\n  // changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <bs-calendar-layout>\n      <bs-datepicker-navigation-view\n        [calendar]=\"calendar\"\n        (onNavigate)=\"navigateTo($event)\"\n        (onViewMode)=\"changeViewMode($event)\"\n      ></bs-datepicker-navigation-view>\n      <!--days matrix-->\n      <table role=\"grid\" class=\"days weeks\">\n        <thead>\n        <tr>\n          <!--if show weeks-->\n          <th *ngIf=\"options && options.showWeekNumbers\"></th>\n          <th *ngFor=\"let weekday of calendar.weekdays; let i = index\"\n              aria-label=\"weekday\">{{ calendar.weekdays[i] }}\n          </th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let week of calendar.weeks; let i = index\">\n          <td class=\"week\" [class.active-week]=\"isWeekHovered\"  *ngIf=\"options && options.showWeekNumbers\">\n            <span *ngIf=\"isiOS\" (click)=\"selectWeek(week)\">{{ calendar.weekNumbers[i] }}</span>\n            <span *ngIf=\"!isiOS\"\n                (click)=\"selectWeek(week)\"\n                (mouseenter)=\"weekHoverHandler(week, true)\"\n                (mouseleave)=\"weekHoverHandler(week, false)\">{{ calendar.weekNumbers[i] }}</span>\n          </td>\n          <td *ngFor=\"let day of week.days\" role=\"gridcell\">\n\n            <!-- When we want to show tooltips for dates -->\n            <span *ngIf=\"!isiOS && isShowTooltip\" bsDatepickerDayDecorator\n                [day]=\"day\"\n                (click)=\"selectDay(day)\"\n                tooltip=\"{{day.tooltipText}}\"\n                (mouseenter)=\"hoverDay(day, true)\"\n                (mouseleave)=\"hoverDay(day, false)\">{{ day.label }} 3</span>\n            <!-- When tooltips for dates are disabled -->\n            <span *ngIf=\"!isiOS && !isShowTooltip\" bsDatepickerDayDecorator\n                  [day]=\"day\"\n                  (click)=\"selectDay(day)\"\n                  (mouseenter)=\"hoverDay(day, true)\"\n                  (mouseleave)=\"hoverDay(day, false)\">{{ day.label }} 2</span>\n\n            <!-- For mobile iOS view, tooltips are not needed -->\n            <span *ngIf=\"isiOS\" bsDatepickerDayDecorator\n                  [day]=\"day\"\n                  (click)=\"selectDay(day)\">{{ day.label }} 1</span>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n\n    </bs-calendar-layout>\n  `\n})\nexport class BsDaysCalendarViewComponent  {\n  @Input() calendar!: DaysCalendarViewModel;\n  @Input() options?: DatepickerRenderOptions | null;\n\n  @Output() onNavigate = new EventEmitter<BsNavigationEvent>();\n  @Output() onViewMode = new EventEmitter<BsDatepickerViewMode>();\n\n  @Output() onSelect = new EventEmitter<DayViewModel>();\n  @Output() onHover = new EventEmitter<CellHoverEvent>();\n  @Output() onHoverWeek = new EventEmitter<WeekViewModel>();\n\n  isWeekHovered?: boolean;\n  isiOS: boolean;\n  isShowTooltip?: boolean;\n\n  constructor(private _config: BsDatepickerConfig) {\n    this.isiOS = (/iPad|iPhone|iPod/.test(navigator.platform) ||\n      (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1));\n    if (this._config.dateTooltipTexts && this._config.dateTooltipTexts.length > 0) {\n      this.isShowTooltip = true;\n    }\n  }\n\n  navigateTo(event: BsNavigationDirection): void {\n    const step = BsNavigationDirection.DOWN === event ? -1 : 1;\n    this.onNavigate.emit({ step: { month: step } });\n  }\n\n  changeViewMode(event: BsDatepickerViewMode): void {\n    this.onViewMode.emit(event);\n  }\n\n  selectDay(event: DayViewModel): void {\n    this.onSelect.emit(event);\n  }\n\n  selectWeek(week: WeekViewModel): void {\n    if (!this._config.selectWeek && !this._config.selectWeekDateRange) {\n      return;\n    }\n\n    if (week.days.length === 0) {\n      return;\n    }\n\n    if (this._config.selectWeek && week.days[0]\n        && !week.days[0].isDisabled\n        && this._config.selectFromOtherMonth) {\n\n        this.onSelect.emit(week.days[0]);\n\n        return;\n    }\n\n    const selectedDay = week.days.find((day: DayViewModel) => {\n      return this._config.selectFromOtherMonth\n        ? !day.isDisabled\n        : !day.isOtherMonth && !day.isDisabled;\n    });\n\n    this.onSelect.emit(selectedDay);\n\n    if (this._config.selectWeekDateRange) {\n      const days = week.days.slice(0);\n      const lastDayOfRange = days.reverse().find((day: DayViewModel) => {\n        return this._config.selectFromOtherMonth\n          ? !day.isDisabled\n          : !day.isOtherMonth && !day.isDisabled;\n      });\n\n      this.onSelect.emit(lastDayOfRange);\n    }\n  }\n\n  weekHoverHandler(cell: WeekViewModel, isHovered: boolean): void {\n    if (!this._config.selectWeek && !this._config.selectWeekDateRange) {\n      return;\n    }\n\n    const hasActiveDays = cell.days.find((day: DayViewModel) => {\n      return this._config.selectFromOtherMonth\n        ? !day.isDisabled\n        : !day.isOtherMonth && !day.isDisabled;\n    });\n\n    if (hasActiveDays) {\n      cell.isHovered = isHovered;\n      this.isWeekHovered = isHovered;\n      this.onHoverWeek.emit(cell);\n    }\n  }\n\n  hoverDay(cell: DayViewModel, isHovered: boolean): void {\n    if (this._config.selectFromOtherMonth && cell.isOtherMonth) {\n      cell.isOtherMonthHovered = isHovered;\n    }\n\n    if (this._config.dateTooltipTexts) {\n      cell.tooltipText = '';\n      this._config.dateTooltipTexts.forEach((dateData: DatepickerDateTooltipText) => {\n\n        if (isSameDay(dateData.date, cell.date)) {\n          cell.tooltipText = dateData.tooltipText;\n\n          return;\n        }\n      });\n    }\n\n    this.onHover.emit({ cell, isHovered });\n  }\n}\n"]}