{"version":3,"file":"interactivity-checker.js","sources":["../../../../src/focus-trap/interactivity-checker.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/* eslint-disable */\n\nimport { Platform } from './platform';\nimport { Injectable } from '@angular/core';\n\n/**\n * Configuration for the isFocusable method.\n */\nexport class IsFocusableConfig {\n  /**\n   * Whether to count an element as focusable even if it is not currently visible.\n   */\n  ignoreVisibility: boolean = false;\n}\n\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\n@Injectable({ providedIn: 'root' })\nexport class InteractivityChecker {\n\n  constructor(private _platform: Platform) {\n  }\n\n  /**\n   * Gets whether an element is disabled.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is disabled.\n   */\n  isDisabled(element: HTMLElement): boolean {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n\n  /**\n   * Gets whether an element is visible for the purposes of interactivity.\n   *\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\n   *\n   * @returns Whether the element is visible.\n   */\n  isVisible(element: HTMLElement): boolean {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n\n  /**\n   * Gets whether an element can be reached via Tab key.\n   * Assumes that the element has already been checked with isFocusable.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is tabbable.\n   */\n  isTabbable(element: HTMLElement): boolean {\n    // Nothing is tabbable on the server ðŸ˜Ž\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    const frameElement = getFrameElement(getWindow(element));\n\n    if (frameElement) {\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n\n      // Browsers disable tabbing to an element inside of an invisible frame.\n      if (!this.isVisible(frameElement)) {\n        return false;\n      }\n    }\n\n    let nodeName = element.nodeName.toLowerCase();\n    let tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe' || nodeName === 'object') {\n      // The frame or object's content may be tabbable depending on the content, but it's\n      // not possibly to reliably detect the content of the frames. We always consider such\n      // elements as non-tabbable.\n      return false;\n    }\n\n    // In iOS, the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      // Audio elements without controls enabled are never tabbable, regardless\n      // of the tabindex attribute explicitly being set.\n      if (!element.hasAttribute('controls')) {\n        return false;\n      }\n      // Audio elements with controls are by default tabbable unless the\n      // tabindex attribute is set to `-1` explicitly.\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'video') {\n      // For all video elements, if the tabindex attribute is set to `-1`, the video\n      // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n      // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n      // tabindex attribute is the source of truth here.\n      if (tabIndexValue === -1) {\n        return false;\n      }\n      // If the tabindex is explicitly set, and not `-1` (as per check before), the\n      // video element is always tabbable (regardless of whether it has controls or not).\n      if (tabIndexValue !== null) {\n        return true;\n      }\n      // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n      // has controls enabled. Firefox is special as videos are always tabbable regardless\n      // of whether there are controls or not.\n      return this._platform.FIREFOX || element.hasAttribute('controls');\n    }\n\n    return element.tabIndex >= 0;\n  }\n\n  /**\n   * Gets whether an element can be focused by the user.\n   *\n   * @param element Element to be checked.\n   * @param config The config object with options to customize this method's behavior\n   * @returns Whether the element is focusable.\n   */\n  isFocusable(element: HTMLElement, config?: IsFocusableConfig): boolean {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) &&\n      (config?.ignoreVisibility || this.isVisible(element));\n  }\n\n}\n\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window: Window) {\n  try {\n    return window.frameElement as HTMLElement;\n  } catch {\n    return null;\n  }\n}\n\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element: HTMLElement): boolean {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight ||\n    (typeof element.getClientRects === 'function' && element.getClientRects().length));\n}\n\n/** Gets whether an element's  */\nfunction isNativeFormElement(element: Node) {\n  let nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' ||\n    nodeName === 'select' ||\n    nodeName === 'button' ||\n    nodeName === 'textarea';\n}\n\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element: HTMLElement): boolean {\n  return isInputElement(element) && element.type == 'hidden';\n}\n\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element: HTMLElement): boolean {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n\n/** Gets whether an element is an input element. */\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\n  return element.nodeName.toLowerCase() == 'input';\n}\n\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\n  return element.nodeName.toLowerCase() == 'a';\n}\n\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element: HTMLElement): boolean {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let tabIndex = element.getAttribute('tabindex');\n\n  // IE11 parses tabindex=\"\" as the value \"-32768\"\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element: HTMLElement): number | null {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element: HTMLElement): boolean {\n  let nodeName = element.nodeName.toLowerCase();\n  let inputType = nodeName === 'input' && (element as HTMLInputElement).type;\n\n  return inputType === 'text'\n    || inputType === 'password'\n    || nodeName === 'select'\n    || nodeName === 'textarea';\n}\n\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) ||\n    isAnchorWithHref(element) ||\n    element.hasAttribute('contenteditable') ||\n    hasValidTabIndex(element);\n}\n\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node: HTMLElement): Window {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n"]}