{"version":3,"file":"progressbar.component.js","sources":["../../../../src/progressbar/progressbar.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,uBAAuB,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAE1E,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBzD,MAAM,OAAO,oBAAoB;AACjC,IA+BE,YAAY,MAAyB;AACvC,QAhCE,8CAA8C;AAChD,QAAW,QAAG,GAAG,GAAG,CAAC;AACrB,QACE,gEAAgE;AAClE,QAAW,YAAO,GAAG,KAAK,CAAC;AAC3B,QACE,6CAA6C;AAC/C,QAAW,YAAO,GAAG,KAAK,CAAC;AAC3B,QAmBE,cAAS,GAAG,KAAK,CAAC;AACpB,QAAE,WAAM,GAAI,CAAC,CAAC;AACd,QAGI,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAChC,IAAE,CAAC;AACH,IAtBE;AACF;AACE,OAAG;AACL,IAAE,IACI,KAAK,CAAC,KAA0B;AACtC,QAAI,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC1C,QAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;AACnC,YAAM,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AAC1B,YAAM,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC;AAC5B,SAAK;AAAC,aAAK;AACX,YAAM,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;AAC3B,YAAM,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;AAC3B,SAAK;AACL,IAAE,CAAC;AACH;gDA1CC,SAAS,SAAC,kBACT,QAAQ,EAAE,aAAa,kBACvB;;;;wKAA2C,kBAC3C,eAAe,EAAE,uBAAuB,CAAC,MAAM,kBAC/C,qEAAqE,iBACrE,IAAI,EAAE,sBACJ,kBAAkB,EAAE,MAAM,sBAC1B,YAAY,EAAE;EAAK,kBACpB;aACQ,6DAIJ,eACN;;;;;;;gLACI;AAAC;AACU,YAlBP,iBAAiB;AAAG;AAAG;AAGhC,kBAgBG,KAAK;AAAK,sBAGV,KAAK;AAAK,sBAGV,KAAK;AAAK,mBAGV,KAAK;AAAK,oBAKV,KAAK;AACP;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAC","sourcesContent":["import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { BarValue, ProgressbarType } from './progressbar-type.interface';\nimport { ProgressbarConfig } from './progressbar.config';\n\n@Component({\n  selector: 'progressbar',\n  templateUrl: './progressbar.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n  host: {\n    '[class.progress]': 'true',\n    '[attr.max]': 'max'\n  },\n  styles: [`\n    :host {\n      width: 100%;\n      display: flex;\n    } `]\n})\nexport class ProgressbarComponent {\n  /** maximum total value of progress element */\n  @Input() max = 100;\n\n  /** if `true` changing value of progress bar will be animated */\n  @Input() animate = false;\n\n  /** If `true`, striped classes are applied */\n  @Input() striped = false;\n\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\n  @Input() type?: ProgressbarType;\n\n  /** current value of progress bar. Could be a number or array of objects\n   * like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"}\n   */\n  @Input()\n  set value(value: number | BarValue[]) {\n    this.isStacked = Array.isArray(value);\n    if (typeof value === 'number') {\n      this._value = value;\n      this._values = void 0;\n    } else {\n      this._value = void 0;\n      this._values = value;\n    }\n  }\n\n  isStacked = false;\n  _value? = 0;\n  _values?: BarValue[];\n\n  constructor(config: ProgressbarConfig) {\n    Object.assign(this, config);\n  }\n}\n"]}