{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-unit.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-period.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-format.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker-event.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/dom.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker.utils.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/time-adapter.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/ngx-material-timepicker-container/ngx-material-timepicker-container.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/tokens/time-locale.token.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-toggle-icon.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-timepicker.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-theme.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker-time.utils.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-face/ngx-material-timepicker-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial/ngx-material-timepicker-dial.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-parser.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial-control/ngx-material-timepicker-dial-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-period/ngx-material-timepicker-period.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/overlay.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/minutes-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/autofocus.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/ngx-timepicker-field.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/timepicker-time-control/ngx-timepicker-time-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/timepicker-period-selector/ngx-timepicker-period-selector.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-localizer.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/active-hour.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/active-minute.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/ngx-material-timepicker-content/ngx-material-timepicker-content.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/append-to-input.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","TimeUnit","TimePeriod","TimeFormat","NgxMaterialTimepickerEventService","backdropClickSubject","Subject","keydownEventSubject","asObservable","pipe","shareReplay","bufferSize","refCount","dispatchEvent","event","type","next","Error","Injectable","providedIn","DomService","cfr","appRef","injector","document","appendTimepickerToBody","timepicker","config","_this","componentRef","resolveComponentFactory","keys","forEach","instance","attachView","hostView","domElement","rootNodes","body","appendChild","destroyTimepicker","destroy","detachView","ComponentFactoryResolver","ApplicationRef","Injector","Optional","Inject","args","DOCUMENT","tslib_1.__param","isSameOrAfter","time","compareWith","unit","hour","hasSame","valueOf","isSameOrBefore","isDigit","e","some","keyCode","ctrlKey","metaKey","TimeAdapter","parseTime","opts","_a","getLocaleOptionsByTime","numberingSystem","locale","timeMask","split","TWELVE_SHORT","TWENTY_FOUR_SHORT","DateTime","fromFormat","formatTime","format","parsedTime","setLocale","DEFAULT_LOCALE","toLocaleString","TIME_SIMPLE","hour12","DEFAULT_NUMBERING_SYSTEM","replace","toISOTime","includeOffset","suppressMilliseconds","suppressSeconds","toLocaleTimeString","DEFAULT_FORMAT","_b","hourCycle","timeFormat","isTimeAvailable","min","max","granularity","minutesGap","convertedTime","minutes","minute","isAfter","isBefore","between","before","after","isBetween","formatHour","currentHour","period","AM","PM","fromDateTimeToString","TWENTY_FOUR","TWELVE","reconfigure","toFormat","luxon","local","resolvedLocaleOpts","localeConfig","defaultConfig","isNaN","parseInt","DEFAULT_HOUR","angle","DEFAULT_MINUTE","NgxMaterialTimepickerService","hourSubject","BehaviorSubject","minuteSubject","periodSubject","setDefaultTimeIfAvailable","setDefaultTime","console","error","getFullTime","selectedHour","getValue","selectedMinute","trim","defaultTime","toJSDate","fromJSDate","isValid","substr","toUpperCase","getHours","formatHourByPeriod","getMinutes","resetTime","AnimationState","TIME_LOCALE","InjectionToken","factory","NgxMaterialTimepickerContainerComponent","timepickerService","eventService","timeUnit","activeTimeUnit","HOUR","unsubscribe","_defaultTime","onKeydown","stopPropagation","ngOnInit","animationState","disableAnimation","ENTER","defineTime","selectedPeriod","timepickerBaseRef","timeUpdated","takeUntil","subscribe","bind","onHourChange","onTimeChange","onHourSelected","hoursOnly","changeTimeUnit","MINUTE","hourSelected","onMinuteChange","changePeriod","setTime","timeSet","close","LEAVE","animationDone","phaseName","toState","ngOnDestroy","complete","minTime","maxTime","timeChanged","emit","tslib_1.__decorate","Input","HostListener","Component","selector","template","animations","trigger","transition","style","transform","animate","opacity","providers","NgxMaterialTimepickerComponent","domService","isEsc","EventEmitter","opened","closed","theme","warn","_ngxMaterialTimepickerTheme","timepickerInput","_format","value","_minutesGap","gap","Math","floor","disabled","element","registerInput","input","open","cancelBtnTmpl","confirmBtnTmpl","editableHintTmpl","enableKeyboardInput","preventOverlayClick","appendToInput","timepickerClass","inputElement","subscribeToEvents","unsubscribeFromEvents","updateTime","merge","backdropClick","keydownEvent","filter","Output","NgxMaterialTimepickerToggleIconDirective","Directive","NgxMaterialTimepickerToggleComponent","undefined","_disabled","ContentChild","static","TimepickerDirective","elementRef","_value","timepickerSubscriptions","onTouched","onChange","previousFormat","_timepicker","_min","_max","picker","registerTimepicker","updateInputValue","nativeElement","updateValue","ngOnChanges","changes","currentValue","onClick","disableClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","push","ElementRef","TimepickerDirective_1","provide","NG_VALUE_ACCESSOR","useExisting","multi","host","[disabled]","(change)","(blur)","NgxMaterialTimepickerThemeDirective","ngAfterViewInit","setTheme","val","prop","setProperty","toLowerCase","TimepickerTimeUtils","fill","map","v","disableHours","hours","currentTime","fromObject","disableMinutes","hour_1","NgxMaterialTimepickerHoursFace","hourChange","hoursList","onTimeSelected","NgxMaterialTimepicker24HoursFaceComponent","_super","tslib_1.__extends","ngAfterContentInit","changeDetection","ChangeDetectionStrategy","OnPush","NgxMaterialTimepicker12HoursFaceComponent","NgxMaterialTimepickerMinutesFaceComponent","minutesList","minuteChange","CLOCK_HAND_STYLES","height","top","NgxMaterialTimepickerFaceComponent","innerClockFaceSize","timeChange","timeSelected","setClockHandPosition","addTouchEvents","faceTimeChanges","selectedTimeChanges","selectedTime","faceTime","find","setTimeout","selectAvailableTime","trackByTime","_","onMousedown","preventDefault","isStarted","selectTime","MouseEvent","x0","y0","x","y","currentAngle","clockFaceCords","clockFace","getBoundingClientRect","centerX","left","width","centerY","arctangent","atan","abs","clientX","clientY","PI","circleAngle","isInnerClockChosen","isInnerClockFace","step","round","roundAngle","onMouseup","removeTouchEvents","touchStartHandler","touchEndHandler","addEventListener","removeEventListener","decreaseClockHand","increaseClockHand","clockHand","isClockFaceDisabled","every","availableTime","sqrt","pow","ViewChild","NgxMaterialTimepickerButtonComponent","NgxMaterialTimepickerDialComponent","meridiems","Info","periodChanged","timeUnitChanged","hourChanged","minuteChanged","changeHour","changeMinute","showHint","isHintVisible","hideHint","TimeParserPipe","timeMeasure","String","Pipe","name","NgxMaterialTimepickerDialControlComponent","timeParserPipe","focused","unfocused","timeList","saveTimeAndChangeTimeUnit","previousTime","changeTimeByKeyboard","char","fromCharCode","nextTime","test","isTimeUnavailable","isTimeDisabledToChange","changeTimeByArrow","onModelChange","toString","NgxMaterialTimepickerPeriodComponent","timePeriod","isPeriodAvailable","isSwitchPeriodAvailable","getDisabledTimeByPeriod","sequence","TimeFormatterPipe","OverlayDirective","preventClick","MinutesFormatterPipe","AutofocusDirective","activeElement","isFocusActive","focus","preventScroll","NgxTimepickerFieldComponent","minHour","maxHour","buttonAlign","unsubscribe$","isFirstTimeChange","timepickerTime","isDefaultTime","initTime","isTimeRangeSet","hour$","tap","clockTime","changeDefaultTimeValue","updateAvailableMinutes","minute$","distinctUntilChanged","isChangePeriodDisabled","isPeriodDisabled","updateAvailableTime","h","changeTime","m","onTimeSet","emitLocalTimeChange","localTime","clockFaceTime","updateAvailableHours","formattedTime","NgxTimepickerFieldComponent_1","NgxTimepickerTimeControlComponent","timeParser","isSelectedTimeDisabled","setAvailableTime","concatTime","changeTimeIfValid","increase","decrease","preventTyping","getAvailableTime","getNextAvailableTime","getPrevAvailableTime","onFocus","isFocused","onBlur","timeString","index","timeCollection","maxValue","findIndex","NgxTimepickerPeriodSelectorComponent","periodSelected","periods","localizedPeriod","indexOf","isOpened","select","TimeLocalizerPipe","isKeyboardEnabled","ActiveHourPipe","ActiveMinutePipe","currentMinute","NgxMaterialTimepickerContentComponent","AppendToInputDirective","renderer","offsetHeight","_inputCords","bottom","isElementFit","window","innerHeight","inputCords","_direction","direction","append","changePosition","defineElementYByDirection","setStyle","inputTop","inputBottom","Renderer2","NgxMaterialTimepickerModule","ngModule","NgxMaterialTimepickerModule_1","useValue","NgModule","imports","CommonModule","FormsModule","exports","declarations","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum TimeUnit {\n    HOUR,\n    MINUTE\n}\n","export enum TimePeriod {\n    AM = 'AM',\n    PM = 'PM'\n}\n","export enum TimeFormat {\n    TWELVE = 'hh:mm a',\n    TWELVE_SHORT = 'h:m a',\n    TWENTY_FOUR = 'HH:mm',\n    TWENTY_FOUR_SHORT = 'H:m'\n}\n","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NgxMaterialTimepickerEventService {\n\n    private backdropClickSubject: Subject<MouseEvent> = new Subject();\n    private keydownEventSubject: Subject<KeyboardEvent> = new Subject();\n\n    get backdropClick(): Observable<MouseEvent> {\n        return this.backdropClickSubject.asObservable().pipe(shareReplay({bufferSize: 1, refCount: true}));\n    }\n\n    get keydownEvent(): Observable<KeyboardEvent> {\n        return this.keydownEventSubject.asObservable().pipe(shareReplay({bufferSize: 1, refCount: true}));\n    }\n\n    dispatchEvent(event: KeyboardEvent | MouseEvent): void {\n        switch (event.type) {\n            case 'click':\n                this.backdropClickSubject.next(<MouseEvent>event);\n                break;\n            case 'keydown':\n                this.keydownEventSubject.next(<KeyboardEvent>event);\n                break;\n            default:\n                throw new Error('no such event type');\n        }\n    }\n\n}\n","import {\n    ApplicationRef,\n    ComponentFactoryResolver,\n    ComponentRef,\n    EmbeddedViewRef,\n    Inject,\n    Injectable,\n    Injector,\n    Optional,\n    Type\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    NgxMaterialTimepickerContainerComponent\n} from '../components/ngx-material-timepicker-container/ngx-material-timepicker-container.component';\nimport { TimepickerConfig } from '../models/timepicker-config.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DomService {\n\n    private componentRef: ComponentRef<NgxMaterialTimepickerContainerComponent>;\n\n    constructor(private cfr: ComponentFactoryResolver,\n                private appRef: ApplicationRef,\n                private injector: Injector,\n                @Optional() @Inject(DOCUMENT) private document: any) {\n    }\n\n    appendTimepickerToBody(timepicker: Type<NgxMaterialTimepickerContainerComponent>, config: TimepickerConfig): void {\n        this.componentRef = this.cfr.resolveComponentFactory(timepicker).create(this.injector);\n\n        Object.keys(config).forEach(key => this.componentRef.instance[key] = config[key]);\n\n        this.appRef.attachView(this.componentRef.hostView);\n\n        const domElement: HTMLElement = (this.componentRef.hostView as EmbeddedViewRef<NgxMaterialTimepickerContainerComponent>)\n            .rootNodes[0];\n\n        this.document.body.appendChild(domElement);\n    }\n\n    destroyTimepicker(): void {\n        this.componentRef.destroy();\n        this.appRef.detachView(this.componentRef.hostView);\n    }\n}\n","/* tslint:disable */\nimport { DateTime } from 'luxon';\n\n\nexport function isSameOrAfter(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return time.hour >= compareWith.hour;\n    }\n    if (unit === 'minutes') {\n        return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\n    }\n}\n\nexport function isSameOrBefore(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return time.hour <= compareWith.hour;\n    }\n    if (unit === 'minutes') {\n        return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\n    }\n}\n\nexport function isBetween(time: DateTime, before: DateTime, after: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return isSameOrBefore(time, after, unit) && isSameOrAfter(time, before, unit);\n    }\n    if (unit === 'minutes') {\n        return isSameOrBefore(time, after) && isSameOrAfter(time, before);\n    }\n}\n\nexport function isDigit(e: KeyboardEvent) {\n    // Allow: backspace, delete, tab, escape, enter\n    if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\n        // Allow: Ctrl/cmd+A\n        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: Ctrl/cmd+C\n        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: Ctrl/cmd+X\n        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: home, end, left, right, up, down\n        (e.keyCode >= 35 && e.keyCode <= 40)) {\n\n        return true;\n    }\n    return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\n}\n","import { DateTime, LocaleOptions } from 'luxon';\n\nimport { TimeFormat } from '../models/time-format.enum';\nimport { TimePeriod } from '../models/time-period.enum';\nimport { isBetween, isSameOrAfter, isSameOrBefore } from '../utils/timepicker.utils';\nimport { TimeOptions } from '../models/time-options.interface';\n\n// @dynamic\nexport class TimeAdapter {\n    static DEFAULT_FORMAT = 12;\n    static DEFAULT_LOCALE = 'en-US';\n    static DEFAULT_NUMBERING_SYSTEM = 'latn';\n\n    static parseTime(time: string, opts: TimeOptions): DateTime {\n        const {numberingSystem, locale} = TimeAdapter.getLocaleOptionsByTime(time, opts);\n        const isPeriodExist = time.split(' ').length === 2;\n        const timeMask = isPeriodExist ? TimeFormat.TWELVE_SHORT : TimeFormat.TWENTY_FOUR_SHORT;\n\n        return DateTime.fromFormat(time, timeMask, {numberingSystem, locale});\n    }\n\n    static formatTime(time: string, opts: TimeOptions): string {\n        if (!time) {\n            return 'Invalid Time';\n        }\n        const {format} = opts;\n        const parsedTime = TimeAdapter.parseTime(time, opts).setLocale(TimeAdapter.DEFAULT_LOCALE);\n\n        if (format !== 24) {\n            return parsedTime.toLocaleString({\n                ...DateTime.TIME_SIMPLE,\n                hour12: format !== 24,\n                numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM\n            }).replace(/\\u200E/g, '');\n        }\n        return parsedTime.toISOTime({\n            includeOffset: false,\n            suppressMilliseconds: true,\n            suppressSeconds: true\n        }).replace(/\\u200E/g, '');\n    }\n\n    static toLocaleTimeString(time: string, opts: TimeOptions = {}): string {\n        const {format = TimeAdapter.DEFAULT_FORMAT, locale = TimeAdapter.DEFAULT_LOCALE} = opts;\n        const hourCycle = format === 24 ? 'h23' : 'h12';\n        const timeFormat = {...DateTime.TIME_SIMPLE, hourCycle};\n        const timeMask = (format === 24) ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;\n\n        return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(timeFormat);\n    }\n\n    static isTimeAvailable(\n        time: string,\n        min?: DateTime,\n        max?: DateTime,\n        granularity?: 'hours' | 'minutes',\n        minutesGap?: number | null,\n        format?: number\n    ): boolean {\n        if (!time) {\n            return;\n        }\n\n        const convertedTime = this.parseTime(time, {format});\n        const minutes = convertedTime.minute;\n\n        if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {\n            throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\n        }\n        const isAfter = (min && !max)\n            && isSameOrAfter(convertedTime, min, granularity);\n        const isBefore = (max && !min)\n            && isSameOrBefore(convertedTime, max, granularity);\n        const between = (min && max)\n            && isBetween(convertedTime, min, max, granularity);\n        const isAvailable = !min && !max;\n\n        return isAfter || isBefore || between || isAvailable;\n    }\n\n    /***\n     *  Format hour according to time format (12 or 24)\n     */\n    static formatHour(currentHour: number, format: number, period: TimePeriod): number {\n        if (format === 24) {\n            return currentHour;\n        }\n        const hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\n\n        if (period === TimePeriod.AM && hour === 12) {\n            return 0;\n        } else if (period === TimePeriod.PM && hour === 24) {\n            return 12;\n        }\n        return hour;\n    }\n\n    static fromDateTimeToString(time: DateTime, format: number): string {\n        const timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\n\n        return time.reconfigure({\n            numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM,\n            locale: TimeAdapter.DEFAULT_LOCALE\n        }).toFormat(timeFormat);\n    }\n\n    private static getLocaleOptionsByTime(time: string, opts: TimeOptions): LocaleOptions {\n        const {numberingSystem, locale} = DateTime.local().setLocale(opts.locale).resolvedLocaleOpts();\n        const localeConfig: LocaleOptions = {numberingSystem: numberingSystem, locale};\n        const defaultConfig: LocaleOptions = {numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM, locale: TimeAdapter.DEFAULT_LOCALE};\n\n        return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ClockFaceTime } from '../models/clock-face-time.interface';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { TimePeriod } from '../models/time-period.enum';\nimport { TimeAdapter } from './time-adapter';\nimport { DateTime } from 'luxon';\n\n\nconst DEFAULT_HOUR: ClockFaceTime = {\n    time: 12,\n    angle: 360\n};\nconst DEFAULT_MINUTE: ClockFaceTime = {\n    time: 0,\n    angle: 360\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NgxMaterialTimepickerService {\n\n    private hourSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_HOUR);\n    private minuteSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_MINUTE);\n    private periodSubject = new BehaviorSubject<TimePeriod>(TimePeriod.AM);\n\n\n    set hour(hour: ClockFaceTime) {\n        this.hourSubject.next(hour);\n    }\n\n    get selectedHour(): Observable<ClockFaceTime> {\n        return this.hourSubject.asObservable();\n    }\n\n    set minute(minute: ClockFaceTime) {\n        this.minuteSubject.next(minute);\n    }\n\n    get selectedMinute(): Observable<ClockFaceTime> {\n        return this.minuteSubject.asObservable();\n    }\n\n    set period(period: TimePeriod) {\n        const isPeriodValid = (period === TimePeriod.AM) || (period === TimePeriod.PM);\n\n        if (isPeriodValid) {\n            this.periodSubject.next(period);\n        }\n    }\n\n    get selectedPeriod(): Observable<TimePeriod> {\n        return this.periodSubject.asObservable();\n    }\n\n\n    setDefaultTimeIfAvailable(time: string, min: DateTime, max: DateTime, format: number, minutesGap?: number) {\n        /* Workaround to double error message*/\n        try {\n            if (TimeAdapter.isTimeAvailable(time, min, max, 'minutes', minutesGap)) {\n                this.setDefaultTime(time, format);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    getFullTime(format: number): string {\n        const selectedHour = this.hourSubject.getValue().time;\n        const selectedMinute = this.minuteSubject.getValue().time;\n        const hour = selectedHour != null ? selectedHour : DEFAULT_HOUR.time;\n        const minute = selectedMinute != null ? selectedMinute : DEFAULT_MINUTE.time;\n        const period = format === 12 ? this.periodSubject.getValue() : '';\n        const time = `${hour}:${minute} ${period}`.trim();\n\n        return TimeAdapter.formatTime(time, {format});\n    }\n\n    private setDefaultTime(time: string, format: number) {\n        const defaultTime = TimeAdapter.parseTime(time, {format}).toJSDate();\n\n        if (DateTime.fromJSDate(defaultTime).isValid) {\n            const period = time.substr(time.length - 2).toUpperCase();\n            const hour = defaultTime.getHours();\n\n            this.hour = {...DEFAULT_HOUR, time: formatHourByPeriod(hour, period as TimePeriod)};\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\n            this.period = period as TimePeriod;\n\n        } else {\n            this.resetTime();\n        }\n    }\n\n    private resetTime(): void {\n        this.hour = {...DEFAULT_HOUR};\n        this.minute = {...DEFAULT_MINUTE};\n        this.period = TimePeriod.AM;\n    }\n}\n\n/***\n *  Format hour in 24hours format to meridian (AM or PM) format\n */\nfunction formatHourByPeriod(hour: number, period: TimePeriod): number {\n    switch (period) {\n        case TimePeriod.AM:\n            return hour === 0 ? 12 : hour;\n        case TimePeriod.PM:\n            return hour === 12 ? 12 : hour - 12;\n        default:\n            return hour;\n    }\n}\n","import { Component, HostListener, Inject, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { DateTime } from 'luxon';\nimport { animate, AnimationEvent, style, transition, trigger } from '@angular/animations';\nimport { NgxMaterialTimepickerService } from '../../services/ngx-material-timepicker.service';\nimport { Observable, Subject } from 'rxjs';\nimport { shareReplay, takeUntil } from 'rxjs/operators';\nimport { TimeAdapter } from '../../services/time-adapter';\nimport { TimepickerRef } from '../../models/timepicker-ref.interface';\nimport { TimepickerConfig } from '../../models/timepicker-config.interface';\nimport { NgxMaterialTimepickerEventService } from '../../services/ngx-material-timepicker-event.service';\nimport { NgxMaterialTimepickerTheme } from '../../models/ngx-material-timepicker-theme.interface';\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\n\nexport enum AnimationState {\n    ENTER = 'enter',\n    LEAVE = 'leave'\n}\n\n@Component({\n    selector: 'ngx-material-timepicker-container',\n    templateUrl: './ngx-material-timepicker-container.component.html',\n    styleUrls: ['./ngx-material-timepicker-container.component.scss'],\n    animations: [\n        trigger('timepicker', [\n            transition(`* => ${AnimationState.ENTER}`, [\n                style({transform: 'translateY(-30%)'}),\n                animate('0.2s ease-out', style({transform: 'translateY(0)'}))\n            ]),\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\n                style({transform: 'translateY(0)', opacity: 1}),\n                animate('0.2s ease-out', style({transform: 'translateY(-30%)', opacity: 0}))\n            ])\n        ])\n    ],\n    providers: [NgxMaterialTimepickerService]\n})\nexport class NgxMaterialTimepickerContainerComponent implements OnInit, OnDestroy, TimepickerConfig {\n\n    selectedHour: Observable<ClockFaceTime>;\n    selectedMinute: Observable<ClockFaceTime>;\n    selectedPeriod: Observable<TimePeriod>;\n\n    timeUnit = TimeUnit;\n    activeTimeUnit = TimeUnit.HOUR;\n\n    animationState: AnimationState;\n\n    cancelBtnTmpl: TemplateRef<Node>;\n    editableHintTmpl: TemplateRef<Node>;\n    confirmBtnTmpl: TemplateRef<Node>;\n    inputElement: any;\n\n    enableKeyboardInput: boolean;\n    preventOverlayClick: boolean;\n    disableAnimation: boolean;\n    disabled: boolean;\n    appendToInput: boolean;\n    hoursOnly: boolean;\n\n    format: number;\n    minutesGap: number;\n\n    minTime: DateTime;\n    maxTime: DateTime;\n    time: string;\n\n    timepickerClass: string;\n    theme: NgxMaterialTimepickerTheme;\n    timepickerBaseRef: TimepickerRef;\n\n    @Input()\n    set defaultTime(time: string) {\n        this._defaultTime = time;\n        this.setDefaultTime(time);\n    }\n\n    get defaultTime(): string {\n        return this._defaultTime;\n    }\n\n    private _defaultTime: string;\n\n    private unsubscribe = new Subject();\n\n    constructor(private timepickerService: NgxMaterialTimepickerService,\n                private eventService: NgxMaterialTimepickerEventService,\n                @Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(e: any): void {\n        this.eventService.dispatchEvent(e);\n        e.stopPropagation();\n    }\n\n    ngOnInit(): void {\n\n        this.animationState = !this.disableAnimation && AnimationState.ENTER;\n\n        this.defineTime();\n\n        this.selectedHour = this.timepickerService.selectedHour\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n\n        this.selectedMinute = this.timepickerService.selectedMinute\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n\n        this.selectedPeriod = this.timepickerService.selectedPeriod\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n\n        this.timepickerBaseRef.timeUpdated.pipe(takeUntil(this.unsubscribe))\n            .subscribe(this.setDefaultTime.bind(this));\n    }\n\n    onHourChange(hour: ClockFaceTime): void {\n        this.timepickerService.hour = hour;\n        this.onTimeChange();\n    }\n\n    onHourSelected(hour: number): void {\n        if (!this.hoursOnly) {\n            this.changeTimeUnit(TimeUnit.MINUTE);\n        }\n        this.timepickerBaseRef.hourSelected.next(hour);\n    }\n\n    onMinuteChange(minute: ClockFaceTime): void {\n        this.timepickerService.minute = minute;\n        this.onTimeChange();\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.timepickerService.period = period;\n        this.onTimeChange();\n    }\n\n    changeTimeUnit(unit: TimeUnit): void {\n        this.activeTimeUnit = unit;\n    }\n\n    setTime(): void {\n        this.timepickerBaseRef.timeSet.next(this.timepickerService.getFullTime(this.format));\n        this.close();\n    }\n\n    close(): void {\n        if (this.disableAnimation) {\n            this.timepickerBaseRef.close();\n            return;\n        }\n\n        this.animationState = AnimationState.LEAVE;\n    }\n\n    animationDone(event: AnimationEvent): void {\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\n            this.timepickerBaseRef.close();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.unsubscribe.next();\n        this.unsubscribe.complete();\n    }\n\n    private setDefaultTime(time: string): void {\n        this.timepickerService.setDefaultTimeIfAvailable(\n            time, this.minTime, this.maxTime, this.format, this.minutesGap);\n    }\n\n    private defineTime(): void {\n        const minTime = this.minTime;\n\n        if (minTime && (!this.time && !this.defaultTime)) {\n            const time = TimeAdapter.fromDateTimeToString(minTime, this.format);\n\n            this.setDefaultTime(time);\n        }\n    }\n\n    private onTimeChange(): void {\n        const time = TimeAdapter.toLocaleTimeString(this.timepickerService.getFullTime(this.format), {\n            locale: this.locale,\n            format: this.format\n        });\n\n        this.timepickerBaseRef.timeChanged.emit(time);\n    }\n\n}\n","import { InjectionToken } from '@angular/core';\nimport { TimeAdapter } from '../services/time-adapter';\n\nexport const TIME_LOCALE = new InjectionToken<string>('TimeLocale', {\n    providedIn: 'root',\n    factory: () => TimeAdapter.DEFAULT_LOCALE\n});\n","import { Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\nimport { merge, Subject } from 'rxjs';\nimport { NgxMaterialTimepickerEventService } from './services/ngx-material-timepicker-event.service';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\nimport { DateTime } from 'luxon';\nimport { DomService } from './services/dom.service';\nimport {\n    NgxMaterialTimepickerContainerComponent\n} from './components/ngx-material-timepicker-container/ngx-material-timepicker-container.component';\nimport { TimepickerRef } from './models/timepicker-ref.interface';\nimport { NgxMaterialTimepickerTheme } from './models/ngx-material-timepicker-theme.interface';\n\nconst ESCAPE = 27;\n\n@Component({\n    selector: 'ngx-material-timepicker',\n    template: '',\n})\nexport class NgxMaterialTimepickerComponent implements TimepickerRef {\n\n    timeUpdated = new Subject<string>();\n\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\n    @Input('ESC') isEsc = true;\n    @Input() enableKeyboardInput: boolean;\n    @Input() preventOverlayClick: boolean;\n    @Input() disableAnimation: boolean;\n    @Input() appendToInput: boolean;\n    @Input() hoursOnly = false;\n    @Input() defaultTime: string;\n    @Input() timepickerClass: string;\n    @Input() theme: NgxMaterialTimepickerTheme;\n    @Input() min: DateTime;\n    @Input() max: DateTime;\n    /**\n     * @deprecated Since version 5.1.1. Will be deleted on version 6.0.0. Use @Input() theme instead\n     */\n    @Input()\n    set ngxMaterialTimepickerTheme(theme: NgxMaterialTimepickerTheme) {\n        console.warn(`'ngxMaterialTimepickerTheme' is deprecated. Use 'theme' instead`);\n        this._ngxMaterialTimepickerTheme = theme;\n    }\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n    }\n\n    get format(): number {\n        return this.timepickerInput ? this.timepickerInput.format : this._format;\n    }\n\n    @Input()\n    set minutesGap(gap: number) {\n        if (gap == null) {\n            return;\n        }\n        gap = Math.floor(gap);\n        this._minutesGap = gap <= 59 ? gap : 1;\n    }\n\n    get minutesGap(): number {\n        return this._minutesGap;\n    }\n\n    @Output() timeSet = new EventEmitter<string>();\n    @Output() opened = new EventEmitter<null>();\n    @Output() closed = new EventEmitter<null>();\n    @Output() hourSelected = new EventEmitter<number>();\n    @Output() timeChanged = new EventEmitter<string>();\n\n    private _minutesGap: number;\n    private _format: number;\n    private _ngxMaterialTimepickerTheme: NgxMaterialTimepickerTheme;\n    private timepickerInput: TimepickerDirective;\n    private unsubscribe = new Subject();\n\n    constructor(private eventService: NgxMaterialTimepickerEventService,\n                private domService: DomService) {\n    }\n\n    get minTime(): DateTime {\n        return this.timepickerInput ? (this.timepickerInput.min as DateTime) : this.min;\n    }\n\n    get maxTime(): DateTime {\n        return this.timepickerInput ? (this.timepickerInput.max as DateTime) : this.max;\n    }\n\n    get disabled(): boolean {\n        return this.timepickerInput && this.timepickerInput.disabled;\n    }\n\n    get time(): string {\n        return this.timepickerInput && this.timepickerInput.value;\n    }\n\n    get inputElement(): any {\n        return this.timepickerInput && this.timepickerInput.element;\n    }\n\n    /***\n     * Register an input with this timepicker.\n     * input - The timepicker input to register with this timepicker\n     */\n    registerInput(input: TimepickerDirective): void {\n        if (this.timepickerInput) {\n            throw Error('A Timepicker can only be associated with a single input.');\n        }\n        this.timepickerInput = input;\n    }\n\n    open(): void {\n        this.domService.appendTimepickerToBody(NgxMaterialTimepickerContainerComponent, {\n            timepickerBaseRef: this,\n            time: this.time,\n            defaultTime: this.defaultTime,\n            maxTime: this.maxTime,\n            minTime: this.minTime,\n            format: this.format,\n            minutesGap: this.minutesGap,\n            disableAnimation: this.disableAnimation,\n            cancelBtnTmpl: this.cancelBtnTmpl,\n            confirmBtnTmpl: this.confirmBtnTmpl,\n            editableHintTmpl: this.editableHintTmpl,\n            disabled: this.disabled,\n            enableKeyboardInput: this.enableKeyboardInput,\n            preventOverlayClick: this.preventOverlayClick,\n            appendToInput: this.appendToInput,\n            hoursOnly: this.hoursOnly,\n            theme: this.theme || this._ngxMaterialTimepickerTheme,\n            timepickerClass: this.timepickerClass,\n            inputElement: this.inputElement\n        });\n        this.opened.next();\n        this.subscribeToEvents();\n    }\n\n    close(): void {\n        this.domService.destroyTimepicker();\n        this.closed.next();\n        this.unsubscribeFromEvents();\n    }\n\n    updateTime(time: string): void {\n        this.timeUpdated.next(time);\n    }\n\n    private subscribeToEvents(): void {\n        merge(this.eventService.backdropClick,\n            this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc)))\n            .pipe(takeUntil(this.unsubscribe))\n            .subscribe(() => this.close());\n    }\n\n    private unsubscribeFromEvents(): void {\n        this.unsubscribe.next();\n        this.unsubscribe.complete();\n    }\n}\n","import {Directive} from '@angular/core';\n\n/* To override a default toggle icon */\n@Directive({selector: '[ngxMaterialTimepickerToggleIcon]'})\n\nexport class NgxMaterialTimepickerToggleIconDirective {\n}\n","import {Component, ContentChild, Input} from '@angular/core';\nimport {NgxMaterialTimepickerToggleIconDirective} from '../../directives/ngx-material-timepicker-toggle-icon.directive';\nimport {NgxMaterialTimepickerComponent} from '../../ngx-material-timepicker.component';\n\n@Component({\n    selector: 'ngx-material-timepicker-toggle',\n    templateUrl: 'ngx-material-timepicker-toggle.component.html',\n    styleUrls: ['ngx-material-timepicker-toggle.component.scss']\n})\n\nexport class NgxMaterialTimepickerToggleComponent {\n\n    @Input('for') timepicker: NgxMaterialTimepickerComponent;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    private _disabled: boolean;\n\n    @ContentChild(NgxMaterialTimepickerToggleIconDirective, {static: true}) customIcon: NgxMaterialTimepickerToggleIconDirective;\n\n    open(event): void {\n        if (this.timepicker) {\n            this.timepicker.open();\n            event.stopPropagation();\n        }\n    }\n}\n","import { Directive, ElementRef, HostListener, Inject, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { NgxMaterialTimepickerComponent } from '../ngx-material-timepicker.component';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { TimeAdapter } from '../services/time-adapter';\nimport { DateTime } from 'luxon';\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\n\n@Directive({\n    selector: '[ngxTimepicker]',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: TimepickerDirective,\n            multi: true\n        }\n    ],\n    host: {\n        '[disabled]': 'disabled',\n        '(change)': 'updateValue($event.target.value)',\n        '(blur)': 'onTouched()',\n    },\n})\nexport class TimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n        const isDynamicallyChanged = value && (this.previousFormat && this.previousFormat !== this._format);\n\n        if (isDynamicallyChanged) {\n            this.value = this._value;\n            this._timepicker.updateTime(this._value);\n        }\n        this.previousFormat = this._format;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n    private _format = 12;\n\n    @Input()\n    set min(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._min = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\n            return;\n        }\n        this._min = value;\n    }\n\n    get min(): string | DateTime {\n        return this._min;\n    }\n\n    private _min: string | DateTime;\n\n    @Input()\n    set max(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._max = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\n            return;\n        }\n        this._max = value;\n    }\n\n    get max(): string | DateTime {\n        return this._max;\n    }\n\n    private _max: string | DateTime;\n\n    @Input('ngxTimepicker')\n    set timepicker(picker: NgxMaterialTimepickerComponent) {\n        this.registerTimepicker(picker);\n    }\n\n    private _timepicker: NgxMaterialTimepickerComponent;\n\n    @Input()\n    set value(value: string) {\n        if (!value) {\n            this._value = '';\n            this.updateInputValue();\n            return;\n        }\n        const time = TimeAdapter.formatTime(value, {locale: this.locale, format: this.format});\n        const isAvailable = TimeAdapter.isTimeAvailable(\n            time,\n            <DateTime>this._min,\n            <DateTime>this._max,\n            'minutes',\n            this._timepicker.minutesGap,\n            this._format\n        );\n\n        if (isAvailable) {\n            this._value = time;\n            this.updateInputValue();\n            return;\n        }\n        console.warn('Selected time doesn\\'t match min or max value');\n    }\n\n    get value(): string {\n        if (!this._value) {\n            return '';\n        }\n        return TimeAdapter.toLocaleTimeString(this._value, {format: this.format, locale: this.locale});\n    }\n\n    private _value = '';\n\n    @Input() disabled: boolean;\n    @Input() disableClick: boolean;\n\n    private timepickerSubscriptions: Subscription[] = [];\n    private previousFormat: number;\n\n    onTouched = () => {\n    }\n\n    private onChange: (value: any) => void = () => {\n    }\n\n    constructor(private elementRef: ElementRef,\n                @Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    get element(): any {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    private set defaultTime(time: string) {\n        this._timepicker.defaultTime = TimeAdapter.formatTime(time, {locale: this.locale, format: this.format});\n    }\n\n    updateValue(value: string) {\n        this.value = value;\n        this.onChange(value);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['value'] && changes['value'].currentValue) {\n            this.defaultTime = changes['value'].currentValue;\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event) {\n        if (!this.disableClick) {\n            this._timepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    writeValue(value: string): void {\n        this.value = value;\n        if (value) {\n            this.defaultTime = value;\n        }\n    }\n\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    ngOnDestroy() {\n        this.timepickerSubscriptions.forEach(s => s.unsubscribe());\n    }\n\n    private registerTimepicker(picker: NgxMaterialTimepickerComponent): void {\n        if (picker) {\n            this._timepicker = picker;\n            this._timepicker.registerInput(this);\n            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time: string) => {\n                this.value = time;\n                this.onChange(this.value);\n                this.onTouched();\n                this.defaultTime = this._value;\n            }));\n        } else {\n            throw new Error('NgxMaterialTimepickerComponent is not defined.' +\n                ' Please make sure you passed the timepicker to ngxTimepicker directive');\n        }\n    }\n\n    private updateInputValue(): void {\n        this.elementRef.nativeElement.value = this.value;\n    }\n\n}\n\n","import {AfterViewInit, Directive, ElementRef, Input} from '@angular/core';\nimport {NgxMaterialTimepickerTheme} from '../models/ngx-material-timepicker-theme.interface';\n\n@Directive({selector: '[ngxMaterialTimepickerTheme]'})\nexport class NgxMaterialTimepickerThemeDirective implements AfterViewInit {\n\n    @Input('ngxMaterialTimepickerTheme') theme: NgxMaterialTimepickerTheme;\n\n    private element: HTMLElement;\n\n    constructor(elementRef: ElementRef) {\n        this.element = elementRef.nativeElement;\n    }\n\n    ngAfterViewInit() {\n        if (this.theme) {\n            this.setTheme(this.theme);\n        }\n    }\n\n    private setTheme(theme): void {\n        for (const val in theme) {\n            if (theme.hasOwnProperty(val)) {\n                if (typeof theme[val] === 'string') {\n                    for (const prop in theme) {\n                        if (theme.hasOwnProperty(prop)) {\n                            this.element.style.setProperty(`--${camelCaseToDash(prop)}`, theme[prop]);\n                        }\n                    }\n                    return;\n                }\n                this.setTheme(theme[val]);\n            }\n\n        }\n    }\n}\n\nfunction camelCaseToDash(myStr) {\n    return myStr.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n","import { ClockFaceTime } from '../models/clock-face-time.interface';\nimport { TimeAdapter } from '../services/time-adapter';\nimport { TimeFormat } from '../models/time-format.enum';\nimport { DisabledTimeConfig } from '../models/disabled-time-config.interface';\nimport { DateTime } from 'luxon';\n\n// @dynamic\nexport class TimepickerTimeUtils {\n\n  static  getHours(format: number): ClockFaceTime[] {\n        return Array(format).fill(1).map((v, i) => {\n            const angleStep = 30;\n            const time = v + i;\n            const angle = angleStep * time;\n            return {time: time === 24 ? 0 : time, angle};\n        });\n    }\n\n  static  disableHours(hours: ClockFaceTime[], config: DisabledTimeConfig): ClockFaceTime[] {\n        if (config.min || config.max) {\n\n            return hours.map(value => {\n                const hour = config.format === 24 ? value.time : TimeAdapter.formatHour(value.time, config.format, config.period);\n                const currentTime = DateTime.fromObject({hour}).toFormat(TimeFormat.TWELVE);\n\n                return {\n                    ...value,\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours')\n                };\n            });\n        }\n        return hours;\n    }\n\n   static getMinutes(gap = 1): ClockFaceTime[] {\n        const minutesCount = 60;\n        const angleStep = 360 / minutesCount;\n        const minutes = [];\n\n        for (let i = 0; i < minutesCount; i++) {\n            const angle = angleStep * i;\n            if (i % gap === 0) {\n                minutes.push({time: i, angle: angle !== 0 ? angle : 360});\n            }\n        }\n        return minutes;\n    }\n\n    static disableMinutes(minutes: ClockFaceTime[], selectedHour: number, config: DisabledTimeConfig) {\n        if (config.min || config.max) {\n\n            const hour = TimeAdapter.formatHour(selectedHour, config.format, config.period);\n\n            return minutes.map(value => {\n                const currentTime = DateTime.fromObject({hour, minute: value.time}).toFormat(TimeFormat.TWELVE);\n\n                return {\n                    ...value,\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes')\n                };\n            });\n        }\n        return minutes;\n    }\n\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\nimport { DateTime } from 'luxon';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n\nexport class NgxMaterialTimepickerHoursFace {\n\n    @Input() selectedHour: ClockFaceTime;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() format: number;\n\n    @Output() hourChange = new EventEmitter<ClockFaceTime>();\n    @Output() hourSelected = new EventEmitter<number>();\n\n    hoursList: ClockFaceTime[] = [];\n\n    protected constructor(format: number) {\n        this.hoursList = TimepickerTimeUtils.getHours(format);\n    }\n\n    onTimeSelected(time: number): void {\n        this.hourSelected.next(time);\n    }\n}\n","import { AfterContentInit, ChangeDetectionStrategy, Component } from '@angular/core';\nimport { NgxMaterialTimepickerHoursFace } from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n@Component({\n    selector: 'ngx-material-timepicker-24-hours-face',\n    templateUrl: 'ngx-material-timepicker-24-hours-face.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements AfterContentInit {\n\n    constructor() {\n        super(24);\n    }\n\n    ngAfterContentInit() {\n        this.hoursList = TimepickerTimeUtils.disableHours(this.hoursList, {\n            min: this.minTime,\n            max: this.maxTime,\n            format: this.format\n        });\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { NgxMaterialTimepickerHoursFace } from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n\n@Component({\n    selector: 'ngx-material-timepicker-12-hours-face',\n    templateUrl: 'ngx-material-timepicker-12-hours-face.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements OnChanges {\n\n    @Input() period: TimePeriod;\n\n    constructor() {\n        super(12);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue) {\n            this.hoursList = TimepickerTimeUtils.disableHours(this.hoursList, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { DateTime } from 'luxon';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n\n@Component({\n    selector: 'ngx-material-timepicker-minutes-face',\n    templateUrl: './ngx-material-timepicker-minutes-face.component.html'\n})\nexport class NgxMaterialTimepickerMinutesFaceComponent implements OnChanges {\n\n    minutesList: ClockFaceTime[] = [];\n    timeUnit = TimeUnit;\n\n    @Input() selectedMinute: ClockFaceTime;\n    @Input() selectedHour: number;\n    @Input() period: TimePeriod;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() format: number;\n    @Input() minutesGap: number;\n\n    @Output() minuteChange = new EventEmitter<ClockFaceTime>();\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue) {\n            const minutes = TimepickerTimeUtils.getMinutes(this.minutesGap);\n            this.minutesList = TimepickerTimeUtils.disableMinutes(minutes, this.selectedHour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\n\nconst CLOCK_HAND_STYLES = {\n    small: {\n        height: '75px',\n        top: 'calc(50% - 75px)'\n    },\n    large: {\n        height: '103px',\n        top: 'calc(50% - 103px)'\n    }\n};\n\n@Component({\n    selector: 'ngx-material-timepicker-face',\n    templateUrl: './ngx-material-timepicker-face.component.html',\n    styleUrls: ['./ngx-material-timepicker-face.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\n\n    timeUnit = TimeUnit;\n\n    isClockFaceDisabled: boolean;\n    innerClockFaceSize = 85;\n\n    @Input() faceTime: ClockFaceTime[];\n    @Input() selectedTime: ClockFaceTime;\n    @Input() unit: TimeUnit;\n    @Input() format: number;\n    @Input() minutesGap: number;\n\n    @Output() timeChange = new EventEmitter<ClockFaceTime>();\n    @Output() timeSelected = new EventEmitter<number>();\n\n    @ViewChild('clockFace', {static: true}) clockFace: ElementRef;\n    @ViewChild('clockHand', {static: true}) clockHand: ElementRef;\n\n    private isStarted: boolean;\n    private touchStartHandler: () => any;\n    private touchEndHandler: () => any;\n\n    ngAfterViewInit() {\n        this.setClockHandPosition();\n        this.addTouchEvents();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const faceTimeChanges = changes['faceTime'];\n        const selectedTimeChanges = changes['selectedTime'];\n\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\n            /* Set time according to passed an input value */\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\n        }\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\n            this.setClockHandPosition();\n        }\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\n            setTimeout(() => this.selectAvailableTime());\n        }\n    }\n\n\n    trackByTime(_, time: ClockFaceTime): string | number {\n        return time.time;\n    }\n\n    @HostListener('mousedown', ['$event'])\n    onMousedown(e: any) {\n        e.preventDefault();\n        this.isStarted = true;\n    }\n\n    @HostListener('click', ['$event'])\n    @HostListener('touchmove', ['$event.changedTouches[0]'])\n    @HostListener('touchend', ['$event.changedTouches[0]'])\n    @HostListener('mousemove', ['$event'])\n    selectTime(e: any): void {\n\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\n            return;\n        }\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\n\n        /* Get x0 and y0 of the circle */\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\n        /* Counting the arctangent and convert it to from radian to deg */\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\n        /* Get angle according to quadrant */\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\n        /* Check if selected time from the inner clock face (24 hours format only) */\n        const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\n        /* Round angle according to angle step */\n        const angleStep = this.unit === TimeUnit.MINUTE ? (6 * (this.minutesGap || 1)) : 30;\n        const roundedAngle = roundAngle(circleAngle, angleStep);\n        const angle = (roundedAngle || 360) + (isInnerClockChosen ? 360 : 0);\n\n        const selectedTime = this.faceTime.find(val => val.angle === angle);\n\n        if (selectedTime && !selectedTime.disabled) {\n            this.timeChange.next(selectedTime);\n\n            /* To let know whether user ended interaction with clock face */\n            if (!this.isStarted) {\n                this.timeSelected.next(selectedTime.time);\n            }\n        }\n\n    }\n\n    @HostListener('mouseup', ['$event'])\n    onMouseup(e: any) {\n        e.preventDefault();\n        this.isStarted = false;\n    }\n\n    ngOnDestroy() {\n        this.removeTouchEvents();\n    }\n\n    private addTouchEvents(): void {\n        this.touchStartHandler = this.onMousedown.bind(this);\n        this.touchEndHandler = this.onMouseup.bind(this);\n\n        this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\n        this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\n    }\n\n    private removeTouchEvents(): void {\n        this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\n        this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\n    }\n\n    private setClockHandPosition(): void {\n        if (this.format === 24) {\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\n                this.decreaseClockHand();\n            } else {\n                this.increaseClockHand();\n            }\n        }\n\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\n    }\n\n    private selectAvailableTime(): void {\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\n\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\n            const availableTime = this.faceTime.find(time => !time.disabled);\n\n            this.timeChange.next(availableTime);\n        }\n    }\n\n    private isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\n        /* Detect whether time from the inner clock face or not (24 format only) */\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\n    }\n\n    private decreaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\n    }\n\n    private increaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\n    }\n}\n\nfunction roundAngle(angle: number, step: number): number {\n    return Math.round(angle / step) * step;\n}\n\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\n    if (y > y0 && x >= x0) {// II quarter\n        return 180 - currentAngle;\n    } else if (y > y0 && x < x0) {// III quarter\n        return 180 + currentAngle;\n    } else if (y < y0 && x < x0) {// IV quarter\n        return 360 - currentAngle;\n    } else {// I quarter\n        return currentAngle;\n    }\n}\n","import {Component} from '@angular/core';\n\n@Component({\n    selector: 'ngx-material-timepicker-button',\n    templateUrl: './ngx-material-timepicker-button.component.html',\n    styleUrls: ['./ngx-material-timepicker-button.component.scss']\n})\nexport class NgxMaterialTimepickerButtonComponent {\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges,\n    TemplateRef\n} from '@angular/core';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { DateTime, Info } from 'luxon';\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n@Component({\n    selector: 'ngx-material-timepicker-dial',\n    templateUrl: 'ngx-material-timepicker-dial.component.html',\n    styleUrls: ['ngx-material-timepicker-dial.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMaterialTimepickerDialComponent implements OnChanges {\n\n    timeUnit = TimeUnit;\n\n    hours: ClockFaceTime[];\n    minutes: ClockFaceTime[];\n    meridiems = Info.meridiems({locale: this.locale});\n\n    isHintVisible: boolean;\n\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() hour: number | string;\n    @Input() minute: number | string;\n    @Input() format: number;\n    @Input() period: TimePeriod;\n    @Input() activeTimeUnit: TimeUnit;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() isEditable: boolean;\n    @Input() minutesGap: number;\n    @Input() hoursOnly: boolean;\n\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\n    @Output() hourChanged = new EventEmitter<ClockFaceTime>();\n    @Output() minuteChanged = new EventEmitter<ClockFaceTime>();\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue\n            || changes['format'] && changes['format'].currentValue) {\n            const hours = TimepickerTimeUtils.getHours(this.format);\n\n            this.hours = TimepickerTimeUtils.disableHours(hours, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n        if (changes['period'] && changes['period'].currentValue\n            || changes['hour'] && changes['hour'].currentValue) {\n            const minutes = TimepickerTimeUtils.getMinutes(this.minutesGap);\n\n            this.minutes = TimepickerTimeUtils.disableMinutes(minutes, +this.hour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n\n    changeTimeUnit(unit: TimeUnit): void {\n        this.timeUnitChanged.next(unit);\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.periodChanged.next(period);\n    }\n\n    changeHour(hour: ClockFaceTime): void {\n        this.hourChanged.next(hour);\n    }\n\n    changeMinute(minute: ClockFaceTime): void {\n        this.minuteChanged.next(minute);\n    }\n\n    showHint(): void {\n        this.isHintVisible = true;\n    }\n\n    hideHint(): void {\n        this.isHintVisible = false;\n    }\n}\n","import { Inject, Injectable, Pipe, PipeTransform } from '@angular/core';\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime } from 'luxon';\n\ntype TimeMeasure = 'hour' | 'minute';\n\n@Pipe({\n    name: 'timeParser'\n})\n@Injectable()\nexport class TimeParserPipe implements PipeTransform {\n\n    private readonly numberingSystem: string;\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n        this.numberingSystem = DateTime.local().setLocale(this.locale).resolvedLocaleOpts().numberingSystem;\n    }\n\n    transform(time: string | number, timeUnit = TimeUnit.HOUR): number | string {\n        if (time == null || time === '') {\n            return '';\n        }\n\n        if (!isNaN(+time)) {\n            return time;\n        }\n\n        if (timeUnit === TimeUnit.MINUTE) {\n            return this.parseTime(time, 'm', 'minute');\n        }\n\n        return this.parseTime(time, 'H', 'hour');\n\n    }\n\n    private parseTime(time: string | number, format: string, timeMeasure: TimeMeasure): number {\n        const parsedTime = DateTime.fromFormat(String(time), format, {numberingSystem: this.numberingSystem})[timeMeasure];\n\n        if (!isNaN(parsedTime)) {\n            return parsedTime;\n        }\n\n        throw new Error(`Cannot parse time - ${time}`);\n    }\n\n}\n","/* tslint:disable:triple-equals */\nimport {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\nimport {TimeUnit} from '../../models/time-unit.enum';\nimport {isDigit} from '../../utils/timepicker.utils';\nimport {TimeParserPipe} from '../../pipes/time-parser.pipe';\n\n@Component({\n    selector: 'ngx-material-timepicker-dial-control',\n    templateUrl: 'ngx-material-timepicker-dial-control.component.html',\n    styleUrls: ['ngx-material-timepicker-dial-control.component.scss'],\n    providers: [TimeParserPipe]\n})\nexport class NgxMaterialTimepickerDialControlComponent {\n\n    previousTime: number | string;\n\n    @Input() timeList: ClockFaceTime[];\n    @Input() timeUnit: TimeUnit;\n    @Input() time: string;\n    @Input() isActive: boolean;\n    @Input() isEditable: boolean;\n    @Input() minutesGap: number;\n    @Input() disabled: boolean;\n\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\n    @Output() timeChanged = new EventEmitter<ClockFaceTime>();\n    @Output() focused = new EventEmitter<null>();\n    @Output() unfocused = new EventEmitter<null>();\n\n    constructor(private timeParserPipe: TimeParserPipe) {\n    }\n\n    private get selectedTime(): ClockFaceTime {\n        if (!!this.time) {\n            return this.timeList.find(t => t.time === +this.time);\n        }\n    }\n\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: TimeUnit): void {\n        event.preventDefault();\n        this.previousTime = this.time;\n        this.timeUnitChanged.next(unit);\n        this.focused.next();\n    }\n\n    updateTime(): void {\n        const time = this.selectedTime;\n        if (time) {\n            this.timeChanged.next(time);\n            this.previousTime = time.time;\n        }\n    }\n\n    changeTimeByKeyboard(e: any): void {\n        const char = String.fromCharCode(e.keyCode);\n\n        if (isTimeDisabledToChange(this.time, char, this.timeList)) {\n            e.preventDefault();\n        }\n    }\n\n    onKeydown(e: any): void {\n        if (!isDigit(e)) {\n            e.preventDefault();\n        } else {\n            this.changeTimeByArrow(e.keyCode);\n        }\n    }\n\n    onModelChange(value: string): void {\n        this.time = this.timeParserPipe.transform(value, this.timeUnit).toString();\n    }\n\n    private changeTimeByArrow(keyCode: number): void {\n        const ARROW_UP = 38;\n        const ARROW_DOWN = 40;\n        let time: string;\n\n        if (keyCode === ARROW_UP) {\n            time = String(+this.time + (this.minutesGap || 1));\n        } else if (keyCode === ARROW_DOWN) {\n            time = String(+this.time - (this.minutesGap || 1));\n        }\n\n        if (!isTimeUnavailable(time, this.timeList)) {\n            this.time = time;\n            this.updateTime();\n        }\n    }\n\n}\n\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: ClockFaceTime[]): boolean {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n        return isTimeUnavailable(time, timeList);\n    }\n}\n\nfunction isTimeUnavailable(time: string, timeList: ClockFaceTime[]): boolean {\n    const selectedTime = timeList.find(value => value.time === +time);\n    return !selectedTime || (selectedTime && selectedTime.disabled);\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { animate, sequence, style, transition, trigger } from '@angular/animations';\nimport { DateTime } from 'luxon';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n@Component({\n    selector: 'ngx-material-timepicker-period',\n    templateUrl: 'ngx-material-timepicker-period.component.html',\n    styleUrls: ['ngx-material-timepicker-period.component.scss'],\n    animations: [\n        trigger('scaleInOut', [\n            transition(':enter', [\n                style({transform: 'scale(0)'}),\n                animate('.2s', style({transform: 'scale(1)'})),\n                sequence([\n                    animate('3s', style({opacity: 1})),\n                    animate('.3s', style({opacity: 0}))\n                ])\n            ])\n        ])\n    ]\n})\nexport class NgxMaterialTimepickerPeriodComponent {\n\n    timePeriod = TimePeriod;\n    isPeriodAvailable = true;\n\n    @Input() selectedPeriod: TimePeriod;\n    @Input() format: number;\n    @Input() activeTimeUnit: TimeUnit;\n    @Input() hours: ClockFaceTime[];\n    @Input() minutes: ClockFaceTime[];\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() selectedHour: number | string;\n    @Input() meridiems: string[];\n\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\n\n    changePeriod(period: TimePeriod): void {\n        this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);\n        if (this.isPeriodAvailable) {\n            this.periodChanged.next(period);\n        }\n    }\n\n    animationDone(): void {\n        this.isPeriodAvailable = true;\n    }\n\n    private isSwitchPeriodAvailable(period: TimePeriod): boolean {\n        const time = this.getDisabledTimeByPeriod(period);\n        return !time.every(t => t.disabled);\n    }\n\n    private getDisabledTimeByPeriod(period: TimePeriod): ClockFaceTime[] {\n        switch (this.activeTimeUnit) {\n            case TimeUnit.HOUR:\n                return TimepickerTimeUtils.disableHours(this.hours, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            case TimeUnit.MINUTE:\n                return TimepickerTimeUtils.disableMinutes(this.minutes, +this.selectedHour, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            default:\n                throw new Error('no such TimeUnit');\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime } from 'luxon';\n\n@Pipe({\n    name: 'timeFormatter'\n})\nexport class TimeFormatterPipe implements PipeTransform {\n\n    transform(time: number | string, timeUnit: TimeUnit): any {\n        if (time == null || time === '') {\n            return time;\n        }\n        switch (timeUnit) {\n            case TimeUnit.HOUR:\n                return DateTime.fromObject({hour: +time}).toFormat('HH');\n            case TimeUnit.MINUTE:\n                return DateTime.fromObject({minute: +time}).toFormat('mm');\n            default:\n                throw new Error('no such time unit');\n        }\n    }\n\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport {NgxMaterialTimepickerEventService} from '../services/ngx-material-timepicker-event.service';\n\n@Directive({\n    selector: '[overlay]'\n})\nexport class OverlayDirective {\n\n    @Input('overlay') preventClick: boolean;\n\n    constructor(private eventService: NgxMaterialTimepickerEventService) {\n    }\n\n\n    @HostListener('click', ['$event'])\n    onClick(e: any) {\n        if (!this.preventClick) {\n            this.eventService.dispatchEvent(e);\n        }\n        e.preventDefault();\n    }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n    name: 'minutesFormatter'\n})\nexport class MinutesFormatterPipe implements PipeTransform {\n\n    transform(minute: number, gap = 5): number | string {\n        if (!minute) {\n            return minute;\n        }\n\n        return minute % gap === 0 ? minute : '';\n    }\n\n}\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\n@Directive({\n    selector: '[timepickerAutofocus]'\n})\nexport class AutofocusDirective implements OnChanges, OnDestroy {\n\n    @Input('timepickerAutofocus') isFocusActive: boolean;\n\n    private activeElement: HTMLElement;\n\n    constructor(private element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\n        this.activeElement = this.document.activeElement;\n    }\n\n    ngOnChanges() {\n        if (this.isFocusActive) {\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n            setTimeout(() => this.element.nativeElement.focus({ preventScroll: true }));\n        }\n    }\n\n    ngOnDestroy() {\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n        setTimeout(() => this.activeElement.focus({ preventScroll: true }));\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, OnDestroy, OnInit, Output, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { NgxMaterialTimepickerService } from '../../services/ngx-material-timepicker.service';\nimport { Observable, Subject } from 'rxjs';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { NgxMaterialTimepickerTheme } from '../../models/ngx-material-timepicker-theme.interface';\nimport { TimeAdapter } from '../../services/time-adapter';\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\nimport { DateTime } from 'luxon';\nimport { distinctUntilChanged, map, takeUntil, tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'ngx-timepicker-field',\n    templateUrl: './ngx-timepicker-field.component.html',\n    styleUrls: ['./ngx-timepicker-field.component.scss'],\n    providers: [\n        NgxMaterialTimepickerService,\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: NgxTimepickerFieldComponent,\n            multi: true\n        }\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxTimepickerFieldComponent implements OnInit, OnDestroy, ControlValueAccessor {\n\n    period: TimePeriod;\n    hour$: Observable<ClockFaceTime>;\n    minute$: Observable<ClockFaceTime>;\n\n    minHour = 1;\n    maxHour = 12;\n\n    timeUnit = TimeUnit;\n    timepickerTime: string;\n\n    hoursList: ClockFaceTime[];\n    minutesList: ClockFaceTime[];\n\n    isTimeRangeSet: boolean;\n    isChangePeriodDisabled: boolean;\n\n    @Input() disabled: boolean;\n    @Input() toggleIcon: TemplateRef<HTMLObjectElement>;\n    @Input() buttonAlign: 'right' | 'left' = 'right';\n    @Input() clockTheme: NgxMaterialTimepickerTheme;\n    @Input() controlOnly: boolean;\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n        this.minHour = this._format === 12 ? 1 : 0;\n        this.maxHour = this._format === 12 ? 12 : 23;\n        this.hoursList = TimepickerTimeUtils.getHours(this._format);\n        const isDynamicallyChanged = value && (this.previousFormat && this.previousFormat !== this._format);\n\n        if (isDynamicallyChanged) {\n            this.updateTime(this.timepickerTime);\n        }\n        this.previousFormat = this._format;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n    @Input()\n    set min(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._min = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\n            return;\n        }\n        this._min = value;\n    }\n\n    get min(): string | DateTime {\n        return this._min;\n    }\n\n    @Input()\n    set max(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._max = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\n            return;\n        }\n        this._max = value;\n    }\n\n    get max(): string | DateTime {\n        return this._max;\n    }\n\n    @Input()\n    set defaultTime(val: string) {\n        this._defaultTime = val;\n        this.isDefaultTime = !!val;\n    }\n\n    get defaultTime(): string {\n        return this._defaultTime;\n    }\n\n    @Output() timeChanged = new EventEmitter<string>();\n\n    private _defaultTime: string;\n    private _format = 12;\n    private _min: string | DateTime;\n    private _max: string | DateTime;\n    private previousFormat: number;\n\n    private unsubscribe$ = new Subject();\n\n    private isFirstTimeChange = true;\n    private isDefaultTime: boolean;\n    private selectedHour: number;\n\n    private onChange: (value: string) => void = () => {\n    }\n\n    constructor(private timepickerService: NgxMaterialTimepickerService,\n                @Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    ngOnInit() {\n        this.initTime(this.defaultTime);\n\n        this.hoursList = TimepickerTimeUtils.getHours(this._format);\n        this.minutesList = TimepickerTimeUtils.getMinutes();\n        this.isTimeRangeSet = !!(this.min || this.max);\n\n        this.hour$ = this.timepickerService.selectedHour.pipe(\n            tap((clockTime: ClockFaceTime) => this.selectedHour = clockTime.time),\n            map(this.changeDefaultTimeValue.bind(this)),\n            tap(() => this.isTimeRangeSet && this.updateAvailableMinutes())\n        ) as Observable<ClockFaceTime>;\n        this.minute$ = this.timepickerService.selectedMinute.pipe(\n            map(this.changeDefaultTimeValue.bind(this)),\n            tap(() => this.isFirstTimeChange = false)\n        ) as Observable<ClockFaceTime>;\n\n        if (this.format === 12) {\n            this.timepickerService.selectedPeriod.pipe(\n                distinctUntilChanged<TimePeriod>(),\n                tap((period: TimePeriod) => this.period = period),\n                tap(period => this.isChangePeriodDisabled = this.isPeriodDisabled(period)),\n                takeUntil(this.unsubscribe$)\n            ).subscribe(() => this.isTimeRangeSet && this.updateAvailableTime());\n        }\n\n    }\n\n    writeValue(val: string): void {\n        if (val) {\n            this.initTime(val);\n        } else {\n            this.resetTime();\n        }\n    }\n\n    registerOnTouched(fn: any): void {\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    changeHour(hour: number): void {\n        this.timepickerService.hour = this.hoursList.find(h => h.time === hour);\n        this.changeTime();\n    }\n\n    changeMinute(minute: number): void {\n        this.timepickerService.minute = this.minutesList.find(m => m.time === minute);\n        this.changeTime();\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.timepickerService.period = period;\n        this.changeTime();\n    }\n\n    onTimeSet(time: string): void {\n        this.updateTime(time);\n        this.emitLocalTimeChange(time);\n    }\n\n    ngOnDestroy(): void {\n        this.unsubscribe$.next();\n        this.unsubscribe$.complete();\n    }\n\n    private changeTime(): void {\n        const time = this.timepickerService.getFullTime(this.format);\n        this.timepickerTime = time;\n\n        this.emitLocalTimeChange(time);\n    }\n\n    private resetTime(): void {\n        this.timepickerService.hour = {angle: 0, time: null};\n        this.timepickerService.minute = {angle: 0, time: null};\n    }\n\n    private emitLocalTimeChange(time: string): void {\n        const localTime = TimeAdapter.toLocaleTimeString(time, {format: this.format, locale: this.locale});\n\n        this.onChange(localTime);\n        this.timeChanged.emit(localTime);\n    }\n\n    private changeDefaultTimeValue(clockFaceTime: ClockFaceTime): ClockFaceTime {\n        if (!this.isDefaultTime && this.isFirstTimeChange) {\n            return {...clockFaceTime, time: null};\n        }\n        return clockFaceTime;\n    }\n\n    private updateAvailableHours(): void {\n        this.hoursList = TimepickerTimeUtils.disableHours(this.hoursList, {\n            min: this.min as DateTime,\n            max: this.max as DateTime,\n            format: this.format,\n            period: this.period\n        });\n    }\n\n    private updateAvailableMinutes(): void {\n        this.minutesList = TimepickerTimeUtils.disableMinutes(this.minutesList, this.selectedHour, {\n            min: this.min as DateTime,\n            max: this.max as DateTime,\n            format: this.format,\n            period: this.period\n        });\n    }\n\n    private updateAvailableTime(): void {\n        this.updateAvailableHours();\n        if (this.selectedHour) {\n            this.updateAvailableMinutes();\n        }\n    }\n\n    private updateTime(time: string): void {\n        if (time) {\n            const formattedTime = TimeAdapter.formatTime(time, {locale: this.locale, format: this.format});\n            this.timepickerService.setDefaultTimeIfAvailable(formattedTime, this.min as DateTime, this.max as DateTime, this.format);\n            this.timepickerTime = formattedTime;\n        }\n    }\n\n    private initTime(time): void {\n        const isDefaultTimeAvailable = TimeAdapter\n            .isTimeAvailable(time, this.min as DateTime, this.max as DateTime, 'minutes', null, this.format);\n        if (!isDefaultTimeAvailable) {\n            if (this.min) {\n                this.updateTime(TimeAdapter.fromDateTimeToString(this.min as DateTime, this.format));\n                return;\n            }\n            if (this.max) {\n                this.updateTime(TimeAdapter.fromDateTimeToString(this.max as DateTime, this.format));\n                return;\n            }\n        }\n        this.updateTime(time);\n    }\n\n    private isPeriodDisabled(period): boolean {\n        return TimepickerTimeUtils.disableHours(TimepickerTimeUtils.getHours(12), {\n            min: this.min as DateTime,\n            max: this.max as DateTime,\n            format: 12,\n            period: period === TimePeriod.AM ? TimePeriod.PM : TimePeriod.AM\n        }).every(time => time.disabled);\n    }\n\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { isDigit } from '../../../utils/timepicker.utils';\nimport { TimeUnit } from '../../../models/time-unit.enum';\nimport { TimeParserPipe } from '../../../pipes/time-parser.pipe';\nimport { ClockFaceTime } from '../../../models/clock-face-time.interface';\n\n@Component({\n    selector: 'ngx-timepicker-time-control',\n    templateUrl: './ngx-timepicker-time-control.component.html',\n    styleUrls: ['./ngx-timepicker-time-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TimeParserPipe]\n})\n\nexport class NgxTimepickerTimeControlComponent implements OnChanges {\n\n    @Input() time: number;\n    @Input() min: number;\n    @Input() max: number;\n    @Input() placeholder: string;\n    @Input() timeUnit: TimeUnit;\n    @Input() disabled: boolean;\n    @Input() timeList: ClockFaceTime[];\n    @Input() preventTyping: boolean;\n\n    @Output() timeChanged = new EventEmitter<number>();\n\n    isFocused: boolean;\n\n    private previousTime: number;\n\n    constructor(private timeParser: TimeParserPipe) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.timeList && this.time != null) {\n            if (this.isSelectedTimeDisabled(this.time)) {\n                this.setAvailableTime();\n            }\n        }\n    }\n\n    changeTime(event: any): void {\n        event.stopPropagation();\n\n        const char = String.fromCharCode(event.keyCode);\n        const time = concatTime(String(this.time), char);\n\n        this.changeTimeIfValid(time);\n    }\n\n    onKeydown(event: any): void {\n        event.stopPropagation();\n\n        if (!isDigit(event)) {\n            event.preventDefault();\n        }\n\n        switch (event.key) {\n            case 'ArrowUp':\n                this.increase();\n                break;\n            case 'ArrowDown':\n                this.decrease();\n                break;\n        }\n\n        if (this.preventTyping && event.key !== 'Tab') {\n            event.preventDefault();\n        }\n    }\n\n    increase(): void {\n        if (!this.disabled) {\n            let nextTime = +this.time + 1;\n\n            if (nextTime > this.max) {\n                nextTime = this.min;\n            }\n\n            if (this.isSelectedTimeDisabled(nextTime)) {\n                nextTime = this.getAvailableTime(nextTime, this.getNextAvailableTime.bind(this));\n            }\n\n            if (nextTime !== this.time) {\n                this.timeChanged.emit(nextTime);\n            }\n        }\n    }\n\n    decrease(): void {\n        if (!this.disabled) {\n            let previousTime = +this.time - 1;\n\n            if (previousTime < this.min) {\n                previousTime = this.max;\n            }\n\n            if (this.isSelectedTimeDisabled(previousTime)) {\n                previousTime = this.getAvailableTime(previousTime, this.getPrevAvailableTime.bind(this));\n            }\n\n            if (previousTime !== this.time) {\n                this.timeChanged.emit(previousTime);\n            }\n        }\n    }\n\n    onFocus(): void {\n        this.isFocused = true;\n        this.previousTime = this.time;\n    }\n\n    onBlur(): void {\n        this.isFocused = false;\n\n        if (this.previousTime !== this.time) {\n            this.changeTimeIfValid(+this.time);\n        }\n    }\n\n    onModelChange(value: string): void {\n        this.time = +this.timeParser.transform(value, this.timeUnit);\n    }\n\n    private changeTimeIfValid(value: number | undefined) {\n        if (!isNaN(value)) {\n            this.time = value;\n\n            if (this.time > this.max) {\n                const timeString = String(value);\n                this.time = +timeString[timeString.length - 1];\n            }\n\n            if (this.time < this.min) {\n                this.time = this.min;\n            }\n\n            this.timeChanged.emit(this.time);\n        }\n    }\n\n    private isSelectedTimeDisabled(time: number): boolean {\n        return this.timeList.find((faceTime: ClockFaceTime) => faceTime.time === time).disabled;\n    }\n\n    private getNextAvailableTime(index: number): number | undefined {\n        const timeCollection = this.timeList;\n        const maxValue = timeCollection.length;\n        for (let i = index + 1; i < maxValue; i++) {\n            const time = timeCollection[i];\n            if (!time.disabled) {\n                return time.time;\n            }\n        }\n    }\n\n    private getPrevAvailableTime(index: number): number | undefined {\n        for (let i = index; i >= 0; i--) {\n            const time = this.timeList[i];\n            if (!time.disabled) {\n                return time.time;\n            }\n        }\n    }\n\n    private getAvailableTime(currentTime: number, fn: (index: number) => number | undefined): number | undefined {\n        const currentTimeIndex = this.timeList.findIndex(time => time.time === currentTime);\n        const availableTime = fn(currentTimeIndex);\n\n        return availableTime != null ? availableTime : this.time;\n    }\n\n    private setAvailableTime(): void {\n        this.time = this.timeList.find(t => !t.disabled).time;\n        this.timeChanged.emit(this.time);\n    }\n}\n\nfunction concatTime(currentTime: string, nextTime: string): number {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n        return +time;\n    }\n}\n\n","import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { TimePeriod } from '../../../models/time-period.enum';\nimport { animate, style, transition, trigger } from '@angular/animations';\nimport { TIME_LOCALE } from '../../../tokens/time-locale.token';\nimport { Info } from 'luxon';\n\n@Component({\n    selector: 'ngx-timepicker-period-selector',\n    templateUrl: 'ngx-timepicker-period-selector.component.html',\n    styleUrls: ['./ngx-timepicker-period-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger('scaleInOut', [\n            transition(':enter', [\n                style({transform: 'scale(0)', opacity: 0}),\n                animate(200, style({transform: 'scale(1)', opacity: 1}))\n            ]),\n            transition(':leave', [\n                animate(200, style({transform: 'scale(0)', opacity: 0}))\n            ])\n        ])\n    ]\n})\n\nexport class NgxTimepickerPeriodSelectorComponent {\n\n    @Input() isOpened: boolean;\n    @Input() disabled: boolean;\n    @Input()\n    set selectedPeriod(period: TimePeriod) {\n        if (period) {\n            const periods = [TimePeriod.AM, TimePeriod.PM];\n            this.localizedPeriod = this.meridiems[periods.indexOf(period)];\n        }\n    }\n\n    @Output() periodSelected = new EventEmitter<TimePeriod>();\n\n    period = TimePeriod;\n    meridiems = Info.meridiems({locale: this.locale});\n    localizedPeriod: string;\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    open(): void {\n        if (!this.disabled) {\n            this.isOpened = true;\n        }\n    }\n\n    select(period: TimePeriod): void {\n        this.periodSelected.next(period);\n        this.isOpened = false;\n    }\n\n    backdropClick(): void {\n        this.isOpened = false;\n    }\n}\n","import { Inject, Pipe, PipeTransform } from '@angular/core';\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime } from 'luxon';\n\ntype TimeMeasure = 'hour' | 'minute';\n\n@Pipe({\n    name: 'timeLocalizer'\n})\nexport class TimeLocalizerPipe implements PipeTransform {\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    transform(time: number | string, timeUnit: TimeUnit, isKeyboardEnabled = false): string {\n        if (time == null || time === '') {\n            return '';\n        }\n\n        switch (timeUnit) {\n            case TimeUnit.HOUR: {\n                const format = (time === 0 || isKeyboardEnabled) ? 'HH' : 'H';\n                return this.formatTime('hour', time, format);\n            }\n            case TimeUnit.MINUTE:\n                return this.formatTime('minute', time, 'mm');\n            default:\n                throw new Error(`There is no Time Unit with type ${timeUnit}`);\n        }\n    }\n\n    private formatTime(timeMeasure: TimeMeasure, time: string | number, format: string): string {\n        try {\n            return DateTime.fromObject({[timeMeasure]: +time}).setLocale(this.locale).toFormat(format);\n        } catch {\n            throw new Error(`Cannot format provided time - ${time} to locale - ${this.locale}`);\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'activeHour'\n})\nexport class ActiveHourPipe implements PipeTransform {\n\n    transform(hour: number, currentHour: number, isClockFaceDisabled: boolean): boolean {\n        if (hour == null || isClockFaceDisabled) {\n            return false;\n        }\n\n        return hour === currentHour;\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'activeMinute'\n})\nexport class ActiveMinutePipe implements PipeTransform {\n\n    transform(minute: number, currentMinute: number, gap: number, isClockFaceDisabled: boolean): boolean {\n        if (minute == null || isClockFaceDisabled) {\n            return false;\n        }\n        const defaultGap = 5;\n\n        return ((currentMinute === minute) && (minute % (gap || defaultGap) === 0));\n    }\n\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'ngx-material-timepicker-content',\n    templateUrl: './ngx-material-timepicker-content.component.html',\n})\nexport class NgxMaterialTimepickerContentComponent {\n    @Input() appendToInput: boolean;\n    @Input() inputElement: any;\n}\n","import { AfterViewInit, Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';\n\ntype TimepickerDirection = 'top' | 'center' | 'bottom';\n\n@Directive({\n    selector: '[ngxAppendToInput]'\n})\nexport class AppendToInputDirective implements AfterViewInit {\n\n    @Input('ngxAppendToInput') inputElement: any;\n\n    private _direction: TimepickerDirection;\n    private _inputCords: ClientRect;\n    private readonly element: HTMLElement;\n\n    constructor(elementRef: ElementRef<HTMLElement>,\n                private renderer: Renderer2) {\n        this.element = elementRef.nativeElement;\n    }\n\n    private get inputCords(): ClientRect {\n        return this.inputElement.getBoundingClientRect();\n    }\n\n    private get direction(): TimepickerDirection {\n        const height = this.element.offsetHeight;\n        const {bottom, top} = this._inputCords;\n        const isElementFit = (window && window.innerHeight) - bottom < height;\n        const isTop = isElementFit && top > height;\n        const isCenter = isElementFit && top < height;\n\n        if (isTop) {\n            return 'top';\n        } else if (isCenter) {\n            return 'center';\n        }\n        return 'bottom';\n    }\n\n    ngAfterViewInit(): void {\n        this._inputCords = this.inputCords;\n        this._direction = this.direction;\n\n        this.append();\n    }\n\n    @HostListener('window:scroll')\n    changePosition(): void {\n        const {bottom, top} = this.inputCords;\n        const y = this.defineElementYByDirection(top, bottom);\n        this.setStyle('top', `${y}px`);\n    }\n\n    private append(): void {\n        const {left, bottom, top} = this._inputCords;\n        const y = this.defineElementYByDirection(top, bottom);\n\n        this.setStyle('position', 'fixed');\n        this.setStyle('left', `${left}px`);\n        this.setStyle('top', `${y}px`);\n    }\n\n    private setStyle(style: string, value: string): void {\n        this.renderer.setStyle(this.element, style, value);\n    }\n\n    private defineElementYByDirection(inputTop: number, inputBottom: number): number {\n        if (this._direction === 'top') {\n            return inputTop - this.element.offsetHeight;\n        } else if (this._direction === 'center') {\n            return inputTop - (this.element.offsetHeight / 2);\n        }\n        return inputBottom;\n    }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxMaterialTimepickerComponent } from './ngx-material-timepicker.component';\nimport { FormsModule } from '@angular/forms';\nimport { NgxMaterialTimepickerToggleComponent } from './components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\nimport { NgxMaterialTimepickerToggleIconDirective } from './directives/ngx-material-timepicker-toggle-icon.directive';\nimport { NgxMaterialTimepickerThemeDirective } from './directives/ngx-material-timepicker-theme.directive';\nimport {\n    NgxMaterialTimepicker24HoursFaceComponent\n} from './components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component';\nimport {\n    NgxMaterialTimepicker12HoursFaceComponent\n} from './components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component';\nimport {\n    NgxMaterialTimepickerMinutesFaceComponent } from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';\nimport { NgxMaterialTimepickerFaceComponent } from './components/timepicker-face/ngx-material-timepicker-face.component';\nimport { NgxMaterialTimepickerButtonComponent } from './components/timepicker-button/ngx-material-timepicker-button.component';\nimport { NgxMaterialTimepickerDialComponent } from './components/timepicker-dial/ngx-material-timepicker-dial.component';\nimport {\n    NgxMaterialTimepickerDialControlComponent } from './components/timepicker-dial-control/ngx-material-timepicker-dial-control.component';\nimport { NgxMaterialTimepickerPeriodComponent } from './components/timepicker-period/ngx-material-timepicker-period.component';\nimport { TimeFormatterPipe } from './pipes/time-formatter.pipe';\nimport { OverlayDirective } from './directives/overlay.directive';\nimport { MinutesFormatterPipe } from './pipes/minutes-formatter.pipe';\nimport { AutofocusDirective } from './directives/autofocus.directive';\nimport { NgxTimepickerFieldComponent } from './components/timepicker-field/ngx-timepicker-field.component';\nimport {\n    NgxTimepickerTimeControlComponent\n} from './components/timepicker-field/timepicker-time-control/ngx-timepicker-time-control.component';\nimport {\n    NgxTimepickerPeriodSelectorComponent\n} from './components/timepicker-field/timepicker-period-selector/ngx-timepicker-period-selector.component';\nimport { TimeLocalizerPipe } from './pipes/time-localizer.pipe';\nimport { TIME_LOCALE } from './tokens/time-locale.token';\nimport { TimeParserPipe } from './pipes/time-parser.pipe';\nimport { ActiveHourPipe } from './pipes/active-hour.pipe';\nimport { ActiveMinutePipe } from './pipes/active-minute.pipe';\nimport {\n    NgxMaterialTimepickerContainerComponent\n} from './components/ngx-material-timepicker-container/ngx-material-timepicker-container.component';\nimport {\n    NgxMaterialTimepickerContentComponent\n} from './components/ngx-material-timepicker-content/ngx-material-timepicker-content.component';\nimport { AppendToInputDirective } from './directives/append-to-input.directive';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [\n        NgxMaterialTimepickerComponent,\n        NgxMaterialTimepickerToggleComponent,\n        NgxTimepickerFieldComponent,\n        TimepickerDirective,\n        NgxMaterialTimepickerToggleIconDirective,\n        NgxMaterialTimepickerThemeDirective,\n        NgxMaterialTimepicker24HoursFaceComponent,\n        NgxMaterialTimepicker12HoursFaceComponent,\n        NgxMaterialTimepickerMinutesFaceComponent,\n        NgxMaterialTimepickerFaceComponent,\n        NgxMaterialTimepickerDialComponent,\n        NgxMaterialTimepickerDialControlComponent\n    ],\n    declarations: [\n        NgxMaterialTimepickerComponent,\n        NgxMaterialTimepicker24HoursFaceComponent,\n        NgxMaterialTimepicker12HoursFaceComponent,\n        NgxMaterialTimepickerMinutesFaceComponent,\n        NgxMaterialTimepickerFaceComponent,\n        NgxMaterialTimepickerToggleComponent,\n        NgxMaterialTimepickerButtonComponent,\n        NgxMaterialTimepickerDialComponent,\n        NgxMaterialTimepickerDialControlComponent,\n        NgxMaterialTimepickerPeriodComponent,\n        TimeFormatterPipe,\n        TimepickerDirective,\n        OverlayDirective,\n        NgxMaterialTimepickerToggleIconDirective,\n        AutofocusDirective,\n        MinutesFormatterPipe,\n        NgxMaterialTimepickerThemeDirective,\n        NgxTimepickerFieldComponent,\n        NgxTimepickerTimeControlComponent,\n        NgxTimepickerPeriodSelectorComponent,\n        TimeLocalizerPipe,\n        TimeParserPipe,\n        ActiveHourPipe,\n        ActiveMinutePipe,\n        NgxMaterialTimepickerContainerComponent,\n        NgxMaterialTimepickerContentComponent,\n        AppendToInputDirective\n    ],\n    entryComponents: [NgxMaterialTimepickerContainerComponent]\n})\nexport class NgxMaterialTimepickerModule {\n\n    static setLocale(locale: string): ModuleWithProviders<NgxMaterialTimepickerModule> {\n        return {\n            ngModule: NgxMaterialTimepickerModule,\n            providers: [\n                {provide: TIME_LOCALE, useValue: locale}\n            ]\n        };\n    }\n}\n"]}