import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';
import * as ɵngcc0 from '@angular/core';
export class NgxMaterialTimepickerHoursFace {
    constructor(format) {
        this.hourChange = new EventEmitter();
        this.hourSelected = new EventEmitter();
        this.hoursList = [];
        this.hoursList = TimepickerTimeUtils.getHours(format);
    }
    onTimeSelected(time) {
        this.hourSelected.next(time);
    }
}
NgxMaterialTimepickerHoursFace.ɵfac = function NgxMaterialTimepickerHoursFace_Factory(t) { ɵngcc0.ɵɵinvalidFactory(); };
NgxMaterialTimepickerHoursFace.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgxMaterialTimepickerHoursFace, inputs: { selectedHour: "selectedHour", minTime: "minTime", maxTime: "maxTime", format: "format" }, outputs: { hourChange: "hourChange", hourSelected: "hourSelected" } });
tslib_1.__decorate([
    Input()
], NgxMaterialTimepickerHoursFace.prototype, "selectedHour", void 0);
tslib_1.__decorate([
    Input()
], NgxMaterialTimepickerHoursFace.prototype, "minTime", void 0);
tslib_1.__decorate([
    Input()
], NgxMaterialTimepickerHoursFace.prototype, "maxTime", void 0);
tslib_1.__decorate([
    Input()
], NgxMaterialTimepickerHoursFace.prototype, "format", void 0);
tslib_1.__decorate([
    Output()
], NgxMaterialTimepickerHoursFace.prototype, "hourChange", void 0);
tslib_1.__decorate([
    Output()
], NgxMaterialTimepickerHoursFace.prototype, "hourSelected", void 0);

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdGVyaWFsLXRpbWVwaWNrZXItaG91cnMtZmFjZS5qcyIsInNvdXJjZXMiOlsibmc6L25neC1tYXRlcmlhbC10aW1lcGlja2VyL3NyYy9hcHAvbWF0ZXJpYWwtdGltZXBpY2tlci9jb21wb25lbnRzL3RpbWVwaWNrZXItaG91cnMtZmFjZS9uZ3gtbWF0ZXJpYWwtdGltZXBpY2tlci1ob3Vycy1mYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHNUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7O0FBR3hFLE1BQU0sT0FBTyw4QkFBOEI7QUFDM0MsSUFXSSxZQUFzQixNQUFjO0FBQ3hDLFFBTmMsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFpQixDQUFDO0FBQzdELFFBQWMsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO0FBQ3hELFFBQ0ksY0FBUyxHQUFvQixFQUFFLENBQUM7QUFDcEMsUUFFUSxJQUFJLENBQUMsU0FBUyxHQUFHLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM5RCxJQUFJLENBQUM7QUFDTCxJQUNJLGNBQWMsQ0FBQyxJQUFZO0FBQUksUUFDM0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDckMsSUFBSSxDQUFDO0FBQ0w7O2tSQUFDO0FBakJZO0FBQXFCLElBQTdCLEtBQUssRUFBRTtBQUFDLG9FQUE0QjtBQUM1QjtBQUNYLElBREcsS0FBSyxFQUFFO0FBQUMsK0RBQWtCO0FBQ2xCO0FBQ1gsSUFERyxLQUFLLEVBQUU7QUFBQywrREFBa0I7QUFDbEI7QUFFVCxJQUZDLEtBQUssRUFBRTtBQUFDLDhEQUFlO0FBRWQ7QUFBcUIsSUFBOUIsTUFBTSxFQUFFO0FBQUMsa0VBQStDO0FBQy9DO0FBQXFCLElBQTlCLE1BQU0sRUFBRTtBQUFDLG9FQUEwQztBQUN4RDtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gJ2x1eG9uJztcbmltcG9ydCB7IENsb2NrRmFjZVRpbWUgfSBmcm9tICcuLi8uLi9tb2RlbHMvY2xvY2stZmFjZS10aW1lLmludGVyZmFjZSc7XG5pbXBvcnQgeyBUaW1lcGlja2VyVGltZVV0aWxzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdGltZXBpY2tlci10aW1lLnV0aWxzJztcblxuXG5leHBvcnQgY2xhc3MgTmd4TWF0ZXJpYWxUaW1lcGlja2VySG91cnNGYWNlIHtcblxuICAgIEBJbnB1dCgpIHNlbGVjdGVkSG91cjogQ2xvY2tGYWNlVGltZTtcbiAgICBASW5wdXQoKSBtaW5UaW1lOiBEYXRlVGltZTtcbiAgICBASW5wdXQoKSBtYXhUaW1lOiBEYXRlVGltZTtcbiAgICBASW5wdXQoKSBmb3JtYXQ6IG51bWJlcjtcblxuICAgIEBPdXRwdXQoKSBob3VyQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxDbG9ja0ZhY2VUaW1lPigpO1xuICAgIEBPdXRwdXQoKSBob3VyU2VsZWN0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcblxuICAgIGhvdXJzTGlzdDogQ2xvY2tGYWNlVGltZVtdID0gW107XG5cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoZm9ybWF0OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5ob3Vyc0xpc3QgPSBUaW1lcGlja2VyVGltZVV0aWxzLmdldEhvdXJzKGZvcm1hdCk7XG4gICAgfVxuXG4gICAgb25UaW1lU2VsZWN0ZWQodGltZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaG91clNlbGVjdGVkLm5leHQodGltZSk7XG4gICAgfVxufVxuIl19