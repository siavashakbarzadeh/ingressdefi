import * as tslib_1 from "tslib";
import { AfterViewInit, Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
let AppendToInputDirective = class AppendToInputDirective {
    constructor(elementRef, renderer) {
        this.renderer = renderer;
        this.element = elementRef.nativeElement;
    }
    get inputCords() {
        return this.inputElement.getBoundingClientRect();
    }
    get direction() {
        const height = this.element.offsetHeight;
        const { bottom, top } = this._inputCords;
        const isElementFit = (window && window.innerHeight) - bottom < height;
        const isTop = isElementFit && top > height;
        const isCenter = isElementFit && top < height;
        if (isTop) {
            return 'top';
        }
        else if (isCenter) {
            return 'center';
        }
        return 'bottom';
    }
    ngAfterViewInit() {
        this._inputCords = this.inputCords;
        this._direction = this.direction;
        this.append();
    }
    changePosition() {
        const { bottom, top } = this.inputCords;
        const y = this.defineElementYByDirection(top, bottom);
        this.setStyle('top', `${y}px`);
    }
    append() {
        const { left, bottom, top } = this._inputCords;
        const y = this.defineElementYByDirection(top, bottom);
        this.setStyle('position', 'fixed');
        this.setStyle('left', `${left}px`);
        this.setStyle('top', `${y}px`);
    }
    setStyle(style, value) {
        this.renderer.setStyle(this.element, style, value);
    }
    defineElementYByDirection(inputTop, inputBottom) {
        if (this._direction === 'top') {
            return inputTop - this.element.offsetHeight;
        }
        else if (this._direction === 'center') {
            return inputTop - (this.element.offsetHeight / 2);
        }
        return inputBottom;
    }
};
AppendToInputDirective.ɵfac = function AppendToInputDirective_Factory(t) { return new (t || AppendToInputDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
AppendToInputDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AppendToInputDirective, selectors: [["", "ngxAppendToInput", ""]], hostBindings: function AppendToInputDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("scroll", function AppendToInputDirective_scroll_HostBindingHandler() { return ctx.changePosition(); }, false, ɵngcc0.ɵɵresolveWindow);
    } }, inputs: { inputElement: ["ngxAppendToInput", "inputElement"] } });
AppendToInputDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
tslib_1.__decorate([
    Input('ngxAppendToInput')
], AppendToInputDirective.prototype, "inputElement", void 0);
tslib_1.__decorate([
    HostListener('window:scroll')
], AppendToInputDirective.prototype, "changePosition", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppendToInputDirective, [{
        type: Directive,
        args: [{
                selector: '[ngxAppendToInput]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { changePosition: [{
            type: HostListener,
            args: ['window:scroll']
        }], inputElement: [{
            type: Input,
            args: ['ngxAppendToInput']
        }] }); })();
export { AppendToInputDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwZW5kLXRvLWlucHV0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmc6L25neC1tYXRlcmlhbC10aW1lcGlja2VyL3NyYy9hcHAvbWF0ZXJpYWwtdGltZXBpY2tlci9kaXJlY3RpdmVzL2FwcGVuZC10by1pbnB1dC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFPckcsSUFBYSxzQkFBc0IsR0FBbkMsTUFBYSxzQkFBc0I7QUFBRyxJQVFsQyxZQUFZLFVBQW1DLEVBQzNCLFFBQW1CO0FBQzNDLFFBRHdCLGFBQVEsR0FBUixRQUFRLENBQVc7QUFBQyxRQUNwQyxJQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxhQUFhLENBQUM7QUFDaEQsSUFBSSxDQUFDO0FBQ0wsSUFDSSxJQUFZLFVBQVU7QUFBSyxRQUN2QixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMscUJBQXFCLEVBQUUsQ0FBQztBQUN6RCxJQUFJLENBQUM7QUFDTCxJQUNJLElBQVksU0FBUztBQUFLLFFBQ3RCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO0FBQ2pELFFBQVEsTUFBTSxFQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQy9DLFFBQVEsTUFBTSxZQUFZLEdBQUcsQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDOUUsUUFBUSxNQUFNLEtBQUssR0FBRyxZQUFZLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQztBQUNuRCxRQUFRLE1BQU0sUUFBUSxHQUFHLFlBQVksSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDO0FBQ3RELFFBQ1EsSUFBSSxLQUFLLEVBQUU7QUFDbkIsWUFBWSxPQUFPLEtBQUssQ0FBQztBQUN6QixTQUFTO0FBQUMsYUFBSyxJQUFJLFFBQVEsRUFBRTtBQUM3QixZQUFZLE9BQU8sUUFBUSxDQUFDO0FBQzVCLFNBQVM7QUFDVCxRQUFRLE9BQU8sUUFBUSxDQUFDO0FBQ3hCLElBQUksQ0FBQztBQUNMLElBQ0ksZUFBZTtBQUFLLFFBQ2hCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUMzQyxRQUFRLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztBQUN6QyxRQUNRLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUN0QixJQUFJLENBQUM7QUFDTCxJQUVJLGNBQWM7QUFBSyxRQUNmLE1BQU0sRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUM5QyxRQUFRLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDOUQsUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkMsSUFBSSxDQUFDO0FBQ0wsSUFDWSxNQUFNO0FBQUssUUFDZixNQUFNLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQ3JELFFBQVEsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM5RCxRQUNRLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzNDLFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDO0FBQzNDLFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3ZDLElBQUksQ0FBQztBQUNMLElBQ1ksUUFBUSxDQUFDLEtBQWEsRUFBRSxLQUFhO0FBQUksUUFDN0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDM0QsSUFBSSxDQUFDO0FBQ0wsSUFDWSx5QkFBeUIsQ0FBQyxRQUFnQixFQUFFLFdBQW1CO0FBQUksUUFDdkUsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLEtBQUssRUFBRTtBQUN2QyxZQUFZLE9BQU8sUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO0FBQ3hELFNBQVM7QUFBQyxhQUFLLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxRQUFRLEVBQUU7QUFDakQsWUFBWSxPQUFPLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzlELFNBQVM7QUFDVCxRQUFRLE9BQU8sV0FBVyxDQUFDO0FBQzNCLElBQUksQ0FBQztBQUNMLENBQUM7Ozs7MkVBQUE7QUFDRDtBQUFnRCxZQTVEcEIsVUFBVTtBQUFJLFlBQ1IsU0FBUztBQUFHO0FBUGY7QUFFOUIsSUFGSSxLQUFLLENBQUMsa0JBQWtCLENBQUM7QUFBQyw0REFBa0I7QUFzQzdDO0FBQXFCLElBRHBCLFlBQVksQ0FBQyxlQUFlLENBQUM7QUFDbEMsNERBSUs7QUE1Q1Esc0JBQXNCLDRCQUhsQyxTQUFTLENBQUMsVUFDUCxRQUFRLEVBQUU7bUJBQW9CO0FBQ2pDLENBQUMsSUFDVztVQUFzQixDQW1FbEM7Ozs7Ozs7O29CQUNEO0FBQUMsU0FwRVksc0JBQXNCO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG50eXBlIFRpbWVwaWNrZXJEaXJlY3Rpb24gPSAndG9wJyB8ICdjZW50ZXInIHwgJ2JvdHRvbSc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW25neEFwcGVuZFRvSW5wdXRdJ1xufSlcbmV4cG9ydCBjbGFzcyBBcHBlbmRUb0lucHV0RGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgICBASW5wdXQoJ25neEFwcGVuZFRvSW5wdXQnKSBpbnB1dEVsZW1lbnQ6IGFueTtcblxuICAgIHByaXZhdGUgX2RpcmVjdGlvbjogVGltZXBpY2tlckRpcmVjdGlvbjtcbiAgICBwcml2YXRlIF9pbnB1dENvcmRzOiBDbGllbnRSZWN0O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudDogSFRNTEVsZW1lbnQ7XG5cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgICAgICAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0IGlucHV0Q29yZHMoKTogQ2xpZW50UmVjdCB7XG4gICAgICAgIHJldHVybiB0aGlzLmlucHV0RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCBkaXJlY3Rpb24oKTogVGltZXBpY2tlckRpcmVjdGlvbiB7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIGNvbnN0IHtib3R0b20sIHRvcH0gPSB0aGlzLl9pbnB1dENvcmRzO1xuICAgICAgICBjb25zdCBpc0VsZW1lbnRGaXQgPSAod2luZG93ICYmIHdpbmRvdy5pbm5lckhlaWdodCkgLSBib3R0b20gPCBoZWlnaHQ7XG4gICAgICAgIGNvbnN0IGlzVG9wID0gaXNFbGVtZW50Rml0ICYmIHRvcCA+IGhlaWdodDtcbiAgICAgICAgY29uc3QgaXNDZW50ZXIgPSBpc0VsZW1lbnRGaXQgJiYgdG9wIDwgaGVpZ2h0O1xuXG4gICAgICAgIGlmIChpc1RvcCkge1xuICAgICAgICAgICAgcmV0dXJuICd0b3AnO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQ2VudGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2NlbnRlcic7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdib3R0b20nO1xuICAgIH1cblxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5faW5wdXRDb3JkcyA9IHRoaXMuaW5wdXRDb3JkcztcbiAgICAgICAgdGhpcy5fZGlyZWN0aW9uID0gdGhpcy5kaXJlY3Rpb247XG5cbiAgICAgICAgdGhpcy5hcHBlbmQoKTtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCd3aW5kb3c6c2Nyb2xsJylcbiAgICBjaGFuZ2VQb3NpdGlvbigpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qge2JvdHRvbSwgdG9wfSA9IHRoaXMuaW5wdXRDb3JkcztcbiAgICAgICAgY29uc3QgeSA9IHRoaXMuZGVmaW5lRWxlbWVudFlCeURpcmVjdGlvbih0b3AsIGJvdHRvbSk7XG4gICAgICAgIHRoaXMuc2V0U3R5bGUoJ3RvcCcsIGAke3l9cHhgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFwcGVuZCgpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qge2xlZnQsIGJvdHRvbSwgdG9wfSA9IHRoaXMuX2lucHV0Q29yZHM7XG4gICAgICAgIGNvbnN0IHkgPSB0aGlzLmRlZmluZUVsZW1lbnRZQnlEaXJlY3Rpb24odG9wLCBib3R0b20pO1xuXG4gICAgICAgIHRoaXMuc2V0U3R5bGUoJ3Bvc2l0aW9uJywgJ2ZpeGVkJyk7XG4gICAgICAgIHRoaXMuc2V0U3R5bGUoJ2xlZnQnLCBgJHtsZWZ0fXB4YCk7XG4gICAgICAgIHRoaXMuc2V0U3R5bGUoJ3RvcCcsIGAke3l9cHhgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldFN0eWxlKHN0eWxlOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsZW1lbnQsIHN0eWxlLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZWZpbmVFbGVtZW50WUJ5RGlyZWN0aW9uKGlucHV0VG9wOiBudW1iZXIsIGlucHV0Qm90dG9tOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICBpZiAodGhpcy5fZGlyZWN0aW9uID09PSAndG9wJykge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0VG9wIC0gdGhpcy5lbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9kaXJlY3Rpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXRUb3AgLSAodGhpcy5lbGVtZW50Lm9mZnNldEhlaWdodCAvIDIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnB1dEJvdHRvbTtcbiAgICB9XG59XG4iXX0=