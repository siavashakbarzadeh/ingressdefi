import * as tslib_1 from "tslib";
import * as ɵngcc0 from '@angular/core';
var TimepickerDirective_1;
import { Directive, ElementRef, HostListener, Inject, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { TimeAdapter } from '../services/time-adapter';
import { TIME_LOCALE } from '../tokens/time-locale.token';
let TimepickerDirective = TimepickerDirective_1 = class TimepickerDirective {
    constructor(elementRef, locale) {
        this.elementRef = elementRef;
        this.locale = locale;
        this._format = 12;
        this._value = '';
        this.timepickerSubscriptions = [];
        this.onTouched = () => {
        };
        this.onChange = () => {
        };
    }
    set format(value) {
        this._format = value === 24 ? 24 : 12;
        const isDynamicallyChanged = value && (this.previousFormat && this.previousFormat !== this._format);
        if (isDynamicallyChanged) {
            this.value = this._value;
            this._timepicker.updateTime(this._value);
        }
        this.previousFormat = this._format;
    }
    get format() {
        return this._format;
    }
    set min(value) {
        if (typeof value === 'string') {
            this._min = TimeAdapter.parseTime(value, { locale: this.locale, format: this.format });
            return;
        }
        this._min = value;
    }
    get min() {
        return this._min;
    }
    set max(value) {
        if (typeof value === 'string') {
            this._max = TimeAdapter.parseTime(value, { locale: this.locale, format: this.format });
            return;
        }
        this._max = value;
    }
    get max() {
        return this._max;
    }
    set timepicker(picker) {
        this.registerTimepicker(picker);
    }
    set value(value) {
        if (!value) {
            this._value = '';
            this.updateInputValue();
            return;
        }
        const time = TimeAdapter.formatTime(value, { locale: this.locale, format: this.format });
        const isAvailable = TimeAdapter.isTimeAvailable(time, this._min, this._max, 'minutes', this._timepicker.minutesGap, this._format);
        if (isAvailable) {
            this._value = time;
            this.updateInputValue();
            return;
        }
        console.warn('Selected time doesn\'t match min or max value');
    }
    get value() {
        if (!this._value) {
            return '';
        }
        return TimeAdapter.toLocaleTimeString(this._value, { format: this.format, locale: this.locale });
    }
    get element() {
        return this.elementRef && this.elementRef.nativeElement;
    }
    set defaultTime(time) {
        this._timepicker.defaultTime = TimeAdapter.formatTime(time, { locale: this.locale, format: this.format });
    }
    updateValue(value) {
        this.value = value;
        this.onChange(value);
    }
    ngOnChanges(changes) {
        if (changes['value'] && changes['value'].currentValue) {
            this.defaultTime = changes['value'].currentValue;
        }
    }
    onClick(event) {
        if (!this.disableClick) {
            this._timepicker.open();
            event.stopPropagation();
        }
    }
    writeValue(value) {
        this.value = value;
        if (value) {
            this.defaultTime = value;
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    ngOnDestroy() {
        this.timepickerSubscriptions.forEach(s => s.unsubscribe());
    }
    registerTimepicker(picker) {
        if (picker) {
            this._timepicker = picker;
            this._timepicker.registerInput(this);
            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time) => {
                this.value = time;
                this.onChange(this.value);
                this.onTouched();
                this.defaultTime = this._value;
            }));
        }
        else {
            throw new Error('NgxMaterialTimepickerComponent is not defined.' +
                ' Please make sure you passed the timepicker to ngxTimepicker directive');
        }
    }
    updateInputValue() {
        this.elementRef.nativeElement.value = this.value;
    }
};
TimepickerDirective.ɵfac = function TimepickerDirective_Factory(t) { return new (t || TimepickerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(TIME_LOCALE)); };
TimepickerDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TimepickerDirective, selectors: [["", "ngxTimepicker", ""]], hostVars: 1, hostBindings: function TimepickerDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("change", function TimepickerDirective_change_HostBindingHandler($event) { return ctx.updateValue($event.target.value); })("blur", function TimepickerDirective_blur_HostBindingHandler() { return ctx.onTouched(); })("click", function TimepickerDirective_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("disabled", ctx.disabled);
    } }, inputs: { format: "format", value: "value", min: "min", max: "max", timepicker: ["ngxTimepicker", "timepicker"], disabled: "disabled", disableClick: "disableClick" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: TimepickerDirective_1,
                multi: true
            }
        ]), ɵngcc0.ɵɵNgOnChangesFeature] });
TimepickerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: String, decorators: [{ type: Inject, args: [TIME_LOCALE,] }] }
];
tslib_1.__decorate([
    Input()
], TimepickerDirective.prototype, "format", null);
tslib_1.__decorate([
    Input()
], TimepickerDirective.prototype, "min", null);
tslib_1.__decorate([
    Input()
], TimepickerDirective.prototype, "max", null);
tslib_1.__decorate([
    Input('ngxTimepicker')
], TimepickerDirective.prototype, "timepicker", null);
tslib_1.__decorate([
    Input()
], TimepickerDirective.prototype, "value", null);
tslib_1.__decorate([
    Input()
], TimepickerDirective.prototype, "disabled", void 0);
tslib_1.__decorate([
    Input()
], TimepickerDirective.prototype, "disableClick", void 0);
tslib_1.__decorate([
    HostListener('click', ['$event'])
], TimepickerDirective.prototype, "onClick", null);
TimepickerDirective = TimepickerDirective_1 = tslib_1.__decorate([ tslib_1.__param(1, Inject(TIME_LOCALE))
], TimepickerDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimepickerDirective, [{
        type: Directive,
        args: [{
                selector: '[ngxTimepicker]',
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: TimepickerDirective_1,
                        multi: true
                    }
                ],
                host: {
                    '[disabled]': 'disabled',
                    '(change)': 'updateValue($event.target.value)',
                    '(blur)': 'onTouched()'
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: String, decorators: [{
                type: Inject,
                args: [TIME_LOCALE]
            }] }]; }, { format: [{
            type: Input
        }], value: [{
            type: Input
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }], timepicker: [{
            type: Input,
            args: ['ngxTimepicker']
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], disabled: [{
            type: Input
        }], disableClick: [{
            type: Input
        }] }); })();
export { TimepickerDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,