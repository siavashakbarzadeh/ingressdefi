import * as tslib_1 from "tslib";
import { Directive, HostListener, Input } from '@angular/core';
import { NgxMaterialTimepickerEventService } from '../services/ngx-material-timepicker-event.service';
import * as ɵngcc0 from '@angular/core';
let OverlayDirective = class OverlayDirective {
    constructor(eventService) {
        this.eventService = eventService;
    }
    onClick(e) {
        if (!this.preventClick) {
            this.eventService.dispatchEvent(e);
        }
        e.preventDefault();
    }
};
OverlayDirective.ɵfac = function OverlayDirective_Factory(t) { return new (t || OverlayDirective)(ɵngcc0.ɵɵdirectiveInject(NgxMaterialTimepickerEventService)); };
OverlayDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: OverlayDirective, selectors: [["", "overlay", ""]], hostBindings: function OverlayDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function OverlayDirective_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } }, inputs: { preventClick: ["overlay", "preventClick"] } });
OverlayDirective.ctorParameters = () => [
    { type: NgxMaterialTimepickerEventService }
];
tslib_1.__decorate([
    Input('overlay')
], OverlayDirective.prototype, "preventClick", void 0);
tslib_1.__decorate([
    HostListener('click', ['$event'])
], OverlayDirective.prototype, "onClick", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayDirective, [{
        type: Directive,
        args: [{
                selector: '[overlay]'
            }]
    }], function () { return [{ type: NgxMaterialTimepickerEventService }]; }, { onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], preventClick: [{
            type: Input,
            args: ['overlay']
        }] }); })();
export { OverlayDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtbWF0ZXJpYWwtdGltZXBpY2tlci9zcmMvYXBwL21hdGVyaWFsLXRpbWVwaWNrZXIvZGlyZWN0aXZlcy9vdmVybGF5LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9ELE9BQU8sRUFBQyxpQ0FBaUMsRUFBQyxNQUFNLG1EQUFtRCxDQUFDOztBQUtwRyxJQUFhLGdCQUFnQixHQUE3QixNQUFhLGdCQUFnQjtBQUM3QixJQUdJLFlBQW9CLFlBQStDO0FBQ3ZFLFFBRHdCLGlCQUFZLEdBQVosWUFBWSxDQUFtQztBQUFDLElBQ3BFLENBQUM7QUFDTCxJQUdJLE9BQU8sQ0FBQyxDQUFNO0FBQ2xCLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUU7QUFDaEMsWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQyxTQUFTO0FBQ1QsUUFBUSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDM0IsSUFBSSxDQUFDO0FBQ0wsQ0FDQzs7OztrRUFBQTtBQUNEO0FBQTBDLFlBYkosaUNBQWlDO0FBQUc7QUFGcEQ7QUFBcUIsSUFBdEMsS0FBSyxDQUFDLFNBQVMsQ0FBQztBQUFDLHNEQUFzQjtBQU94QztBQUNELElBRkUsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3RDLCtDQUtLO0FBZFEsZ0JBQWdCLDRCQUg1QixTQUFTLENBQUMsVUFDUCxRQUFRLEVBQUU7VUFBVyxNQUN4QixDQUFDLElBQ1c7WUFBZ0IsQ0FnQjVCOzs7Ozs7Ozs7b0JBQ0Q7QUFBQyxTQWpCWSxnQkFBZ0I7QUFFN0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Tmd4TWF0ZXJpYWxUaW1lcGlja2VyRXZlbnRTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlcy9uZ3gtbWF0ZXJpYWwtdGltZXBpY2tlci1ldmVudC5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbb3ZlcmxheV0nXG59KVxuZXhwb3J0IGNsYXNzIE92ZXJsYXlEaXJlY3RpdmUge1xuXG4gICAgQElucHV0KCdvdmVybGF5JykgcHJldmVudENsaWNrOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBldmVudFNlcnZpY2U6IE5neE1hdGVyaWFsVGltZXBpY2tlckV2ZW50U2VydmljZSkge1xuICAgIH1cblxuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICAgIG9uQ2xpY2soZTogYW55KSB7XG4gICAgICAgIGlmICghdGhpcy5wcmV2ZW50Q2xpY2spIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRTZXJ2aWNlLmRpc3BhdGNoRXZlbnQoZSk7XG4gICAgICAgIH1cbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxufVxuIl19