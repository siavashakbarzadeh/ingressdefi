import * as tslib_1 from "tslib";
import { Inject, Pipe } from '@angular/core';
import { TIME_LOCALE } from '../tokens/time-locale.token';
import { TimeUnit } from '../models/time-unit.enum';
import { DateTime } from 'luxon';
import * as ɵngcc0 from '@angular/core';
let TimeLocalizerPipe = class TimeLocalizerPipe {
    constructor(locale) {
        this.locale = locale;
    }
    transform(time, timeUnit, isKeyboardEnabled = false) {
        if (time == null || time === '') {
            return '';
        }
        switch (timeUnit) {
            case TimeUnit.HOUR: {
                const format = (time === 0 || isKeyboardEnabled) ? 'HH' : 'H';
                return this.formatTime('hour', time, format);
            }
            case TimeUnit.MINUTE:
                return this.formatTime('minute', time, 'mm');
            default:
                throw new Error(`There is no Time Unit with type ${timeUnit}`);
        }
    }
    formatTime(timeMeasure, time, format) {
        try {
            return DateTime.fromObject({ [timeMeasure]: +time }).setLocale(this.locale).toFormat(format);
        }
        catch (_a) {
            throw new Error(`Cannot format provided time - ${time} to locale - ${this.locale}`);
        }
    }
};
TimeLocalizerPipe.ɵfac = function TimeLocalizerPipe_Factory(t) { return new (t || TimeLocalizerPipe)(ɵngcc0.ɵɵdirectiveInject(TIME_LOCALE)); };
TimeLocalizerPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "timeLocalizer", type: TimeLocalizerPipe, pure: true });
TimeLocalizerPipe.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [TIME_LOCALE,] }] }
];
TimeLocalizerPipe = tslib_1.__decorate([ tslib_1.__param(0, Inject(TIME_LOCALE))
], TimeLocalizerPipe);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimeLocalizerPipe, [{
        type: Pipe,
        args: [{
                name: 'timeLocalizer'
            }]
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [TIME_LOCALE]
            }] }]; }, null); })();
export { TimeLocalizerPipe };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1sb2NhbGl6ZXIucGlwZS5qcyIsInNvdXJjZXMiOlsibmc6L25neC1tYXRlcmlhbC10aW1lcGlja2VyL3NyYy9hcHAvbWF0ZXJpYWwtdGltZXBpY2tlci9waXBlcy90aW1lLWxvY2FsaXplci5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDNUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzFELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sT0FBTyxDQUFDOztBQU9qQyxJQUFhLGlCQUFpQixHQUE5QixNQUFhLGlCQUFpQjtBQUFHLElBRTdCLFlBQXlDLE1BQWM7QUFDM0QsUUFENkMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtBQUFDLElBQ3hELENBQUM7QUFDTCxJQUNJLFNBQVMsQ0FBQyxJQUFxQixFQUFFLFFBQWtCLEVBQUUsaUJBQWlCLEdBQUcsS0FBSztBQUFJLFFBQzlFLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRSxFQUFFO0FBQ3pDLFlBQVksT0FBTyxFQUFFLENBQUM7QUFDdEIsU0FBUztBQUNULFFBQ1EsUUFBUSxRQUFRLEVBQUU7QUFDMUIsWUFBWSxLQUFLLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoQyxnQkFBZ0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxJQUFJLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0FBQzlFLGdCQUFnQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM3RCxhQUFhO0FBQ2IsWUFBWSxLQUFLLFFBQVEsQ0FBQyxNQUFNO0FBQ2hDLGdCQUFnQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM3RCxZQUFZO0FBQ1osZ0JBQWdCLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDL0UsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ1ksVUFBVSxDQUFDLFdBQXdCLEVBQUUsSUFBcUIsRUFBRSxNQUFjO0FBQUksUUFDbEYsSUFBSTtBQUNaLFlBQVksT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUMsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLElBQUksRUFBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdkcsU0FBUztBQUFDLFFBQUEsV0FBTTtBQUNoQixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsaUNBQWlDLElBQUksZ0JBQWdCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQ2hHLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxDQUFDOzs4R0FBQTtBQUNEO0FBQTJDLHlDQTVCMUIsTUFBTSxTQUFDLFdBQVc7QUFBUTtBQUY5QixpQkFBaUIsNEJBSDdCLElBQUksQ0FBQyxVQUNGLElBQUksRUFBRSwxQkFFTixDQUVhLG1CQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUpYLE1BQ3hCLENBQUMsUEFHbUMsR0FGeEIsaUJBQWlCLENBNkI3Qjs7Ozs7Ozs7O2tDQUNEO0FBQUMsU0E5QlksaUJBQWlCO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRJTUVfTE9DQUxFIH0gZnJvbSAnLi4vdG9rZW5zL3RpbWUtbG9jYWxlLnRva2VuJztcbmltcG9ydCB7IFRpbWVVbml0IH0gZnJvbSAnLi4vbW9kZWxzL3RpbWUtdW5pdC5lbnVtJztcbmltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSAnbHV4b24nO1xuXG50eXBlIFRpbWVNZWFzdXJlID0gJ2hvdXInIHwgJ21pbnV0ZSc7XG5cbkBQaXBlKHtcbiAgICBuYW1lOiAndGltZUxvY2FsaXplcidcbn0pXG5leHBvcnQgY2xhc3MgVGltZUxvY2FsaXplclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoVElNRV9MT0NBTEUpIHByaXZhdGUgbG9jYWxlOiBzdHJpbmcpIHtcbiAgICB9XG5cbiAgICB0cmFuc2Zvcm0odGltZTogbnVtYmVyIHwgc3RyaW5nLCB0aW1lVW5pdDogVGltZVVuaXQsIGlzS2V5Ym9hcmRFbmFibGVkID0gZmFsc2UpOiBzdHJpbmcge1xuICAgICAgICBpZiAodGltZSA9PSBudWxsIHx8IHRpbWUgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHRpbWVVbml0KSB7XG4gICAgICAgICAgICBjYXNlIFRpbWVVbml0LkhPVVI6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXQgPSAodGltZSA9PT0gMCB8fCBpc0tleWJvYXJkRW5hYmxlZCkgPyAnSEgnIDogJ0gnO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdFRpbWUoJ2hvdXInLCB0aW1lLCBmb3JtYXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBUaW1lVW5pdC5NSU5VVEU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0VGltZSgnbWludXRlJywgdGltZSwgJ21tJyk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlcmUgaXMgbm8gVGltZSBVbml0IHdpdGggdHlwZSAke3RpbWVVbml0fWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmb3JtYXRUaW1lKHRpbWVNZWFzdXJlOiBUaW1lTWVhc3VyZSwgdGltZTogc3RyaW5nIHwgbnVtYmVyLCBmb3JtYXQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbU9iamVjdCh7W3RpbWVNZWFzdXJlXTogK3RpbWV9KS5zZXRMb2NhbGUodGhpcy5sb2NhbGUpLnRvRm9ybWF0KGZvcm1hdCk7XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZm9ybWF0IHByb3ZpZGVkIHRpbWUgLSAke3RpbWV9IHRvIGxvY2FsZSAtICR7dGhpcy5sb2NhbGV9YCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=