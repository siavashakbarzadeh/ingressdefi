import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';
import * as ɵngcc0 from '@angular/core';
var NgxMaterialTimepickerHoursFace = /** @class */ (function () {
    function NgxMaterialTimepickerHoursFace(format) {
        this.hourChange = new EventEmitter();
        this.hourSelected = new EventEmitter();
        this.hoursList = [];
        this.hoursList = TimepickerTimeUtils.getHours(format);
    }
    NgxMaterialTimepickerHoursFace.prototype.onTimeSelected = function (time) {
        this.hourSelected.next(time);
    };
    tslib_1.__decorate([
        Input()
    ], NgxMaterialTimepickerHoursFace.prototype, "selectedHour", void 0);
    tslib_1.__decorate([
        Input()
    ], NgxMaterialTimepickerHoursFace.prototype, "minTime", void 0);
    tslib_1.__decorate([
        Input()
    ], NgxMaterialTimepickerHoursFace.prototype, "maxTime", void 0);
    tslib_1.__decorate([
        Input()
    ], NgxMaterialTimepickerHoursFace.prototype, "format", void 0);
    tslib_1.__decorate([
        Output()
    ], NgxMaterialTimepickerHoursFace.prototype, "hourChange", void 0);
    tslib_1.__decorate([
        Output()
    ], NgxMaterialTimepickerHoursFace.prototype, "hourSelected", void 0);
NgxMaterialTimepickerHoursFace.ɵfac = function NgxMaterialTimepickerHoursFace_Factory(t) { ɵngcc0.ɵɵinvalidFactory(); };
NgxMaterialTimepickerHoursFace.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgxMaterialTimepickerHoursFace, inputs: { selectedHour: "selectedHour", minTime: "minTime", maxTime: "maxTime", format: "format" }, outputs: { hourChange: "hourChange", hourSelected: "hourSelected" } });

    return NgxMaterialTimepickerHoursFace;
}());
export { NgxMaterialTimepickerHoursFace };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdGVyaWFsLXRpbWVwaWNrZXItaG91cnMtZmFjZS5qcyIsInNvdXJjZXMiOlsibmc6L25neC1tYXRlcmlhbC10aW1lcGlja2VyL3NyYy9hcHAvbWF0ZXJpYWwtdGltZXBpY2tlci9jb21wb25lbnRzL3RpbWVwaWNrZXItaG91cnMtZmFjZS9uZ3gtbWF0ZXJpYWwtdGltZXBpY2tlci1ob3Vycy1mYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHNUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7O0FBR3hFO0FBRW1CLElBVWYsd0NBQXNCLE1BQWM7QUFDeEMsUUFOYyxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQWlCLENBQUM7QUFDN0QsUUFBYyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7QUFDeEQsUUFDSSxjQUFTLEdBQW9CLEVBQUUsQ0FBQztBQUNwQyxRQUVRLElBQUksQ0FBQyxTQUFTLEdBQUcsbUJBQW1CLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlELElBQUksQ0FBQztBQUNMLElBQ0ksdURBQWMsR0FBZCxVQUFlLElBQVk7QUFBSSxRQUMzQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNyQyxJQUFJLENBQUM7QUFDSixJQWpCWTtBQUFxQixRQUE3QixLQUFLLEVBQUU7QUFBQyx3RUFBNEI7QUFDeEMsSUFBWTtBQUNYLFFBREcsS0FBSyxFQUFFO0FBQUMsbUVBQWtCO0FBQzlCLElBQVk7QUFDWCxRQURHLEtBQUssRUFBRTtBQUFDLG1FQUFrQjtBQUM5QixJQUFZO0FBRVQsUUFGQyxLQUFLLEVBQUU7QUFBQyxrRUFBZTtBQUU1QixJQUFjO0FBQXFCLFFBQTlCLE1BQU0sRUFBRTtBQUFDLHNFQUErQztBQUM1RCxJQUFhO0FBQXFCLFFBQTlCLE1BQU0sRUFBRTtBQUFDLHdFQUEwQzs7O0FBQ3hEO0FBQ0EsSUFTQSxxQ0FBQztBQUNBLENBREEsQUFuQkQsSUFtQkM7QUFDRCxTQXBCYSw4QkFBOEI7QUFFM0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSAnbHV4b24nO1xuaW1wb3J0IHsgQ2xvY2tGYWNlVGltZSB9IGZyb20gJy4uLy4uL21vZGVscy9jbG9jay1mYWNlLXRpbWUuaW50ZXJmYWNlJztcbmltcG9ydCB7IFRpbWVwaWNrZXJUaW1lVXRpbHMgfSBmcm9tICcuLi8uLi91dGlscy90aW1lcGlja2VyLXRpbWUudXRpbHMnO1xuXG5cbmV4cG9ydCBjbGFzcyBOZ3hNYXRlcmlhbFRpbWVwaWNrZXJIb3Vyc0ZhY2Uge1xuXG4gICAgQElucHV0KCkgc2VsZWN0ZWRIb3VyOiBDbG9ja0ZhY2VUaW1lO1xuICAgIEBJbnB1dCgpIG1pblRpbWU6IERhdGVUaW1lO1xuICAgIEBJbnB1dCgpIG1heFRpbWU6IERhdGVUaW1lO1xuICAgIEBJbnB1dCgpIGZvcm1hdDogbnVtYmVyO1xuXG4gICAgQE91dHB1dCgpIGhvdXJDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPENsb2NrRmFjZVRpbWU+KCk7XG4gICAgQE91dHB1dCgpIGhvdXJTZWxlY3RlZCA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xuXG4gICAgaG91cnNMaXN0OiBDbG9ja0ZhY2VUaW1lW10gPSBbXTtcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihmb3JtYXQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLmhvdXJzTGlzdCA9IFRpbWVwaWNrZXJUaW1lVXRpbHMuZ2V0SG91cnMoZm9ybWF0KTtcbiAgICB9XG5cbiAgICBvblRpbWVTZWxlY3RlZCh0aW1lOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5ob3VyU2VsZWN0ZWQubmV4dCh0aW1lKTtcbiAgICB9XG59XG4iXX0=