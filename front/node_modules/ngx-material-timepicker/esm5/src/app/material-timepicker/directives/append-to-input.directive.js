import * as tslib_1 from "tslib";
import { AfterViewInit, Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var AppendToInputDirective = /** @class */ (function () {
    function AppendToInputDirective(elementRef, renderer) {
        this.renderer = renderer;
        this.element = elementRef.nativeElement;
    }
    Object.defineProperty(AppendToInputDirective.prototype, "inputCords", {
        get: function () {
            return this.inputElement.getBoundingClientRect();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppendToInputDirective.prototype, "direction", {
        get: function () {
            var height = this.element.offsetHeight;
            var _a = this._inputCords, bottom = _a.bottom, top = _a.top;
            var isElementFit = (window && window.innerHeight) - bottom < height;
            var isTop = isElementFit && top > height;
            var isCenter = isElementFit && top < height;
            if (isTop) {
                return 'top';
            }
            else if (isCenter) {
                return 'center';
            }
            return 'bottom';
        },
        enumerable: true,
        configurable: true
    });
    AppendToInputDirective.prototype.ngAfterViewInit = function () {
        this._inputCords = this.inputCords;
        this._direction = this.direction;
        this.append();
    };
    AppendToInputDirective.prototype.changePosition = function () {
        var _a = this.inputCords, bottom = _a.bottom, top = _a.top;
        var y = this.defineElementYByDirection(top, bottom);
        this.setStyle('top', y + "px");
    };
    AppendToInputDirective.prototype.append = function () {
        var _a = this._inputCords, left = _a.left, bottom = _a.bottom, top = _a.top;
        var y = this.defineElementYByDirection(top, bottom);
        this.setStyle('position', 'fixed');
        this.setStyle('left', left + "px");
        this.setStyle('top', y + "px");
    };
    AppendToInputDirective.prototype.setStyle = function (style, value) {
        this.renderer.setStyle(this.element, style, value);
    };
    AppendToInputDirective.prototype.defineElementYByDirection = function (inputTop, inputBottom) {
        if (this._direction === 'top') {
            return inputTop - this.element.offsetHeight;
        }
        else if (this._direction === 'center') {
            return inputTop - (this.element.offsetHeight / 2);
        }
        return inputBottom;
    };
    AppendToInputDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    tslib_1.__decorate([
        Input('ngxAppendToInput')
    ], AppendToInputDirective.prototype, "inputElement", void 0);
    tslib_1.__decorate([
        HostListener('window:scroll')
    ], AppendToInputDirective.prototype, "changePosition", null);
AppendToInputDirective.ɵfac = function AppendToInputDirective_Factory(t) { return new (t || AppendToInputDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
AppendToInputDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AppendToInputDirective, selectors: [["", "ngxAppendToInput", ""]], hostBindings: function AppendToInputDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("scroll", function AppendToInputDirective_scroll_HostBindingHandler() { return ctx.changePosition(); }, false, ɵngcc0.ɵɵresolveWindow);
    } }, inputs: { inputElement: ["ngxAppendToInput", "inputElement"] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppendToInputDirective, [{
        type: Directive,
        args: [{
                selector: '[ngxAppendToInput]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { changePosition: [{
            type: HostListener,
            args: ['window:scroll']
        }], inputElement: [{
            type: Input,
            args: ['ngxAppendToInput']
        }] }); })();
    return AppendToInputDirective;
}());
export { AppendToInputDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwZW5kLXRvLWlucHV0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmc6L25neC1tYXRlcmlhbC10aW1lcGlja2VyL3NyYy9hcHAvbWF0ZXJpYWwtdGltZXBpY2tlci9kaXJlY3RpdmVzL2FwcGVuZC10by1pbnB1dC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFPckc7QUFBMEQsSUFRdEQsZ0NBQVksVUFBbUMsRUFDM0IsUUFBbUI7QUFDM0MsUUFEd0IsYUFBUSxHQUFSLFFBQVEsQ0FBVztBQUFDLFFBQ3BDLElBQUksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQztBQUNoRCxJQUFJLENBQUM7QUFDTCxJQUNJLHNCQUFZLDhDQUFVO0FBQUksYUFBMUI7QUFBYyxZQUNWLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0FBQ3pELFFBQUksQ0FBQztBQUVMO0FBQTBCO0FBQ3hCLE9BSEc7QUFDTCxJQUNJLHNCQUFZLDZDQUFTO0FBQUksYUFBekI7QUFBYyxZQUNWLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO0FBQ2pELFlBQWMsSUFBQSxxQkFBZ0MsRUFBL0Isa0JBQU0sRUFBRSxZQUF1QixDQUFDO0FBQy9DLFlBQVEsSUFBTSxZQUFZLEdBQUcsQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDOUUsWUFBUSxJQUFNLEtBQUssR0FBRyxZQUFZLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQztBQUNuRCxZQUFRLElBQU0sUUFBUSxHQUFHLFlBQVksSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDO0FBQ3RELFlBQ1EsSUFBSSxLQUFLLEVBQUU7QUFDbkIsZ0JBQVksT0FBTyxLQUFLLENBQUM7QUFDekIsYUFBUztBQUFDLGlCQUFLLElBQUksUUFBUSxFQUFFO0FBQzdCLGdCQUFZLE9BQU8sUUFBUSxDQUFDO0FBQzVCLGFBQVM7QUFDVCxZQUFRLE9BQU8sUUFBUSxDQUFDO0FBQ3hCLFFBQUksQ0FBQztBQUVMO0FBQTBCO0FBQ0gsT0FIbEI7QUFDTCxJQUNJLGdEQUFlLEdBQWY7QUFBYyxRQUNWLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUMzQyxRQUFRLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztBQUN6QyxRQUNRLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUN0QixJQUFJLENBQUM7QUFFTCxJQUNJLCtDQUFjLEdBQWQ7QUFBYyxRQUNKLElBQUEsb0JBQStCLEVBQTlCLGtCQUFNLEVBQUUsWUFBc0IsQ0FBQztBQUM5QyxRQUFRLElBQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDOUQsUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBSyxDQUFDLE9BQUksQ0FBQyxDQUFDO0FBQ3ZDLElBQUksQ0FBQztBQUVMLElBQVksdUNBQU0sR0FBZDtBQUFjLFFBQ0osSUFBQSxxQkFBc0MsRUFBckMsY0FBSSxFQUFFLGtCQUFNLEVBQUUsWUFBdUIsQ0FBQztBQUNyRCxRQUFRLElBQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDOUQsUUFDUSxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMzQyxRQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFLLElBQUksT0FBSSxDQUFDLENBQUM7QUFDM0MsUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBSyxDQUFDLE9BQUksQ0FBQyxDQUFDO0FBQ3ZDLElBQUksQ0FBQztBQUVMLElBQVkseUNBQVEsR0FBaEIsVUFBaUIsS0FBYSxFQUFFLEtBQWE7QUFBSSxRQUM3QyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztBQUMzRCxJQUFJLENBQUM7QUFFTCxJQUFZLDBEQUF5QixHQUFqQyxVQUFrQyxRQUFnQixFQUFFLFdBQW1CO0FBQUksUUFDdkUsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLEtBQUssRUFBRTtBQUN2QyxZQUFZLE9BQU8sUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO0FBQ3hELFNBQVM7QUFBQyxhQUFLLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxRQUFRLEVBQUU7QUFDakQsWUFBWSxPQUFPLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzlELFNBQVM7QUFDVCxRQUFRLE9BQU8sV0FBVyxDQUFDO0FBQzNCLElBQUksQ0FBQztBQUNKO0FBQ2lFLGdCQTVEdEMsVUFBVTtBQUFJLGdCQUNSLFNBQVM7QUFBRztBQUNyQyxJQVJzQjtBQUU5QixRQUZJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQztBQUFDLGdFQUFrQjtBQUVqRCxJQW9DSTtBQUFxQixRQURwQixZQUFZLENBQUMsZUFBZSxDQUFDO0FBQ2xDLGdFQUlLO0lBNUNRLHNCQUFzQixnQ0FIbEMsU0FBUyxDQUFDLGNBQ1AsUUFBUSxFQUFFLG9CQUFvQixVQUNqQyxDQUFDLFFBQ1csc0JBQXNCLENBbUVsQzs7Ozs7Ozs7Ozs7Ozs7O29CQUNEO0FBQUMsSUFERCw2QkFBQztBQUNBLENBREEsQUFuRUQsSUFtRUM7QUFDRCxTQXBFYSxzQkFBc0I7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdExpc3RlbmVyLCBJbnB1dCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbnR5cGUgVGltZXBpY2tlckRpcmVjdGlvbiA9ICd0b3AnIHwgJ2NlbnRlcicgfCAnYm90dG9tJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbbmd4QXBwZW5kVG9JbnB1dF0nXG59KVxuZXhwb3J0IGNsYXNzIEFwcGVuZFRvSW5wdXREaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcblxuICAgIEBJbnB1dCgnbmd4QXBwZW5kVG9JbnB1dCcpIGlucHV0RWxlbWVudDogYW55O1xuXG4gICAgcHJpdmF0ZSBfZGlyZWN0aW9uOiBUaW1lcGlja2VyRGlyZWN0aW9uO1xuICAgIHByaXZhdGUgX2lucHV0Q29yZHM6IENsaWVudFJlY3Q7XG4gICAgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50OiBIVE1MRWxlbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICAgICAgICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgaW5wdXRDb3JkcygpOiBDbGllbnRSZWN0IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0IGRpcmVjdGlvbigpOiBUaW1lcGlja2VyRGlyZWN0aW9uIHtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5lbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICAgICAgY29uc3Qge2JvdHRvbSwgdG9wfSA9IHRoaXMuX2lucHV0Q29yZHM7XG4gICAgICAgIGNvbnN0IGlzRWxlbWVudEZpdCA9ICh3aW5kb3cgJiYgd2luZG93LmlubmVySGVpZ2h0KSAtIGJvdHRvbSA8IGhlaWdodDtcbiAgICAgICAgY29uc3QgaXNUb3AgPSBpc0VsZW1lbnRGaXQgJiYgdG9wID4gaGVpZ2h0O1xuICAgICAgICBjb25zdCBpc0NlbnRlciA9IGlzRWxlbWVudEZpdCAmJiB0b3AgPCBoZWlnaHQ7XG5cbiAgICAgICAgaWYgKGlzVG9wKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3RvcCc7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNDZW50ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAnY2VudGVyJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ2JvdHRvbSc7XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9pbnB1dENvcmRzID0gdGhpcy5pbnB1dENvcmRzO1xuICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSB0aGlzLmRpcmVjdGlvbjtcblxuICAgICAgICB0aGlzLmFwcGVuZCgpO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzpzY3JvbGwnKVxuICAgIGNoYW5nZVBvc2l0aW9uKCk6IHZvaWQge1xuICAgICAgICBjb25zdCB7Ym90dG9tLCB0b3B9ID0gdGhpcy5pbnB1dENvcmRzO1xuICAgICAgICBjb25zdCB5ID0gdGhpcy5kZWZpbmVFbGVtZW50WUJ5RGlyZWN0aW9uKHRvcCwgYm90dG9tKTtcbiAgICAgICAgdGhpcy5zZXRTdHlsZSgndG9wJywgYCR7eX1weGApO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXBwZW5kKCk6IHZvaWQge1xuICAgICAgICBjb25zdCB7bGVmdCwgYm90dG9tLCB0b3B9ID0gdGhpcy5faW5wdXRDb3JkcztcbiAgICAgICAgY29uc3QgeSA9IHRoaXMuZGVmaW5lRWxlbWVudFlCeURpcmVjdGlvbih0b3AsIGJvdHRvbSk7XG5cbiAgICAgICAgdGhpcy5zZXRTdHlsZSgncG9zaXRpb24nLCAnZml4ZWQnKTtcbiAgICAgICAgdGhpcy5zZXRTdHlsZSgnbGVmdCcsIGAke2xlZnR9cHhgKTtcbiAgICAgICAgdGhpcy5zZXRTdHlsZSgndG9wJywgYCR7eX1weGApO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0U3R5bGUoc3R5bGU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWxlbWVudCwgc3R5bGUsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRlZmluZUVsZW1lbnRZQnlEaXJlY3Rpb24oaW5wdXRUb3A6IG51bWJlciwgaW5wdXRCb3R0b206IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIGlmICh0aGlzLl9kaXJlY3Rpb24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXRUb3AgLSB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2RpcmVjdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dFRvcCAtICh0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0IC8gMik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlucHV0Qm90dG9tO1xuICAgIH1cbn1cbiJdfQ==