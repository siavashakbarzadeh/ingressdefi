import * as tslib_1 from "tslib";
import { Directive, HostListener, Input } from '@angular/core';
import { NgxMaterialTimepickerEventService } from '../services/ngx-material-timepicker-event.service';
import * as ɵngcc0 from '@angular/core';
var OverlayDirective = /** @class */ (function () {
    function OverlayDirective(eventService) {
        this.eventService = eventService;
    }
    OverlayDirective.prototype.onClick = function (e) {
        if (!this.preventClick) {
            this.eventService.dispatchEvent(e);
        }
        e.preventDefault();
    };
    OverlayDirective.ctorParameters = function () { return [
        { type: NgxMaterialTimepickerEventService }
    ]; };
    tslib_1.__decorate([
        Input('overlay')
    ], OverlayDirective.prototype, "preventClick", void 0);
    tslib_1.__decorate([
        HostListener('click', ['$event'])
    ], OverlayDirective.prototype, "onClick", null);
OverlayDirective.ɵfac = function OverlayDirective_Factory(t) { return new (t || OverlayDirective)(ɵngcc0.ɵɵdirectiveInject(NgxMaterialTimepickerEventService)); };
OverlayDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: OverlayDirective, selectors: [["", "overlay", ""]], hostBindings: function OverlayDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function OverlayDirective_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } }, inputs: { preventClick: ["overlay", "preventClick"] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayDirective, [{
        type: Directive,
        args: [{
                selector: '[overlay]'
            }]
    }], function () { return [{ type: NgxMaterialTimepickerEventService }]; }, { onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], preventClick: [{
            type: Input,
            args: ['overlay']
        }] }); })();
    return OverlayDirective;
}());
export { OverlayDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtbWF0ZXJpYWwtdGltZXBpY2tlci9zcmMvYXBwL21hdGVyaWFsLXRpbWVwaWNrZXIvZGlyZWN0aXZlcy9vdmVybGF5LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9ELE9BQU8sRUFBQyxpQ0FBaUMsRUFBQyxNQUFNLG1EQUFtRCxDQUFDOztBQUtwRztBQUVtQixJQUVmLDBCQUFvQixZQUErQztBQUN2RSxRQUR3QixpQkFBWSxHQUFaLFlBQVksQ0FBbUM7QUFBQyxJQUNwRSxDQUFDO0FBQ0wsSUFHSSxrQ0FBTyxHQUFQLFVBQVEsQ0FBTTtBQUNsQixRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO0FBQ2hDLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0MsU0FBUztBQUNULFFBQVEsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQzNCLElBQUksQ0FBQztBQUVMO0FBQzJELGdCQWJyQixpQ0FBaUM7QUFBRztBQUl6RSxJQU5xQjtBQUFxQixRQUF0QyxLQUFLLENBQUMsU0FBUyxDQUFDO0FBQUMsMERBQXNCO0FBRTVDLElBS0k7QUFDRCxRQUZFLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN0QyxtREFLSztJQWRRLGdCQUFnQixnQ0FINUIsU0FBUyxDQUFDLGNBQ1AsUUFBUSxFQUFFLFdBQVcsVUFDeEIsQ0FBQyxRQUNXLGdCQUFnQixDQWdCNUI7Ozs7Ozs7Ozs7Ozs7OztvQkFDRDtBQUFDLElBREQsdUJBQUM7QUFDQSxDQURBLEFBaEJELElBZ0JDO0FBQ0QsU0FqQmEsZ0JBQWdCO0FBRTdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge05neE1hdGVyaWFsVGltZXBpY2tlckV2ZW50U2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMvbmd4LW1hdGVyaWFsLXRpbWVwaWNrZXItZXZlbnQuc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW292ZXJsYXldJ1xufSlcbmV4cG9ydCBjbGFzcyBPdmVybGF5RGlyZWN0aXZlIHtcblxuICAgIEBJbnB1dCgnb3ZlcmxheScpIHByZXZlbnRDbGljazogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZXZlbnRTZXJ2aWNlOiBOZ3hNYXRlcmlhbFRpbWVwaWNrZXJFdmVudFNlcnZpY2UpIHtcbiAgICB9XG5cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcbiAgICBvbkNsaWNrKGU6IGFueSkge1xuICAgICAgICBpZiAoIXRoaXMucHJldmVudENsaWNrKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50U2VydmljZS5kaXNwYXRjaEV2ZW50KGUpO1xuICAgICAgICB9XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbn1cbiJdfQ==