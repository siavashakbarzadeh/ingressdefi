import * as tslib_1 from "tslib";
import { Inject, Pipe } from '@angular/core';
import { TIME_LOCALE } from '../tokens/time-locale.token';
import { TimeUnit } from '../models/time-unit.enum';
import { DateTime } from 'luxon';
import * as ɵngcc0 from '@angular/core';
var TimeLocalizerPipe = /** @class */ (function () {
    function TimeLocalizerPipe(locale) {
        this.locale = locale;
    }
    TimeLocalizerPipe.prototype.transform = function (time, timeUnit, isKeyboardEnabled) {
        if (isKeyboardEnabled === void 0) { isKeyboardEnabled = false; }
        if (time == null || time === '') {
            return '';
        }
        switch (timeUnit) {
            case TimeUnit.HOUR: {
                var format = (time === 0 || isKeyboardEnabled) ? 'HH' : 'H';
                return this.formatTime('hour', time, format);
            }
            case TimeUnit.MINUTE:
                return this.formatTime('minute', time, 'mm');
            default:
                throw new Error("There is no Time Unit with type " + timeUnit);
        }
    };
    TimeLocalizerPipe.prototype.formatTime = function (timeMeasure, time, format) {
        var _a;
        try {
            return DateTime.fromObject((_a = {}, _a[timeMeasure] = +time, _a)).setLocale(this.locale).toFormat(format);
        }
        catch (_b) {
            throw new Error("Cannot format provided time - " + time + " to locale - " + this.locale);
        }
    };
    TimeLocalizerPipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [TIME_LOCALE,] }] }
    ]; };
    TimeLocalizerPipe = tslib_1.__decorate([ tslib_1.__param(0, Inject(TIME_LOCALE))
    ], TimeLocalizerPipe);
TimeLocalizerPipe.ɵfac = function TimeLocalizerPipe_Factory(t) { return new (t || TimeLocalizerPipe)(ɵngcc0.ɵɵdirectiveInject(TIME_LOCALE)); };
TimeLocalizerPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "timeLocalizer", type: TimeLocalizerPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimeLocalizerPipe, [{
        type: Pipe,
        args: [{
                name: 'timeLocalizer'
            }]
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [TIME_LOCALE]
            }] }]; }, null); })();
    return TimeLocalizerPipe;
}());
export { TimeLocalizerPipe };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1sb2NhbGl6ZXIucGlwZS5qcyIsInNvdXJjZXMiOlsibmc6L25neC1tYXRlcmlhbC10aW1lcGlja2VyL3NyYy9hcHAvbWF0ZXJpYWwtdGltZXBpY2tlci9waXBlcy90aW1lLWxvY2FsaXplci5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDNUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzFELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sT0FBTyxDQUFDOztBQU9qQztBQUFxRCxJQUVqRCwyQkFBeUMsTUFBYztBQUMzRCxRQUQ2QyxXQUFNLEdBQU4sTUFBTSxDQUFRO0FBQUMsSUFDeEQsQ0FBQztBQUNMLElBQ0kscUNBQVMsR0FBVCxVQUFVLElBQXFCLEVBQUUsUUFBa0IsRUFBRSxpQkFBeUI7QUFBSSxRQUE3QixrQ0FBQSxFQUFBLHlCQUF5QjtBQUFJLFFBQzlFLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRSxFQUFFO0FBQ3pDLFlBQVksT0FBTyxFQUFFLENBQUM7QUFDdEIsU0FBUztBQUNULFFBQ1EsUUFBUSxRQUFRLEVBQUU7QUFDMUIsWUFBWSxLQUFLLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoQyxnQkFBZ0IsSUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxJQUFJLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0FBQzlFLGdCQUFnQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM3RCxhQUFhO0FBQ2IsWUFBWSxLQUFLLFFBQVEsQ0FBQyxNQUFNO0FBQ2hDLGdCQUFnQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM3RCxZQUFZO0FBQ1osZ0JBQWdCLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQW1DLFFBQVUsQ0FBQyxDQUFDO0FBQy9FLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFFTCxJQUFZLHNDQUFVLEdBQWxCLFVBQW1CLFdBQXdCLEVBQUUsSUFBcUIsRUFBRSxNQUFjO0FBQUk7QUFDbEYsUUFBQSxJQUFJO0FBQ1osWUFBWSxPQUFPLFFBQVEsQ0FBQyxVQUFVLFdBQUUsR0FBQyxXQUFXLElBQUcsQ0FBQyxJQUFJLE1BQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN2RyxTQUFTO0FBQUMsUUFBQSxXQUFNO0FBQ2hCLFlBQVksTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBaUMsSUFBSSxxQkFBZ0IsSUFBSSxDQUFDLE1BQVEsQ0FBQyxDQUFDO0FBQ2hHLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDSjtBQUM0RCw2Q0E1QjVDLE1BQU0sU0FBQyxXQUFXO0FBQVE7QUFBVSxJQUZ4QyxpQkFBaUIsZ0NBSDdCLElBQUksQ0FBQyxjQUNGLElBQUksRUFBRSxsQ0FFRixDQUVTLG1CQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUpYLFVBQ3hCLENBQUMsbkJBR21DLE9BRnhCLGlCQUFpQixDQTZCN0I7Ozs7Ozs7Ozs7O2tDQUNEO0FBQUMsSUFERCx3QkFBQztBQUNBLENBREEsQUE3QkQsSUE2QkM7QUFDRCxTQTlCYSxpQkFBaUI7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVElNRV9MT0NBTEUgfSBmcm9tICcuLi90b2tlbnMvdGltZS1sb2NhbGUudG9rZW4nO1xuaW1wb3J0IHsgVGltZVVuaXQgfSBmcm9tICcuLi9tb2RlbHMvdGltZS11bml0LmVudW0nO1xuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICdsdXhvbic7XG5cbnR5cGUgVGltZU1lYXN1cmUgPSAnaG91cicgfCAnbWludXRlJztcblxuQFBpcGUoe1xuICAgIG5hbWU6ICd0aW1lTG9jYWxpemVyJ1xufSlcbmV4cG9ydCBjbGFzcyBUaW1lTG9jYWxpemVyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChUSU1FX0xPQ0FMRSkgcHJpdmF0ZSBsb2NhbGU6IHN0cmluZykge1xuICAgIH1cblxuICAgIHRyYW5zZm9ybSh0aW1lOiBudW1iZXIgfCBzdHJpbmcsIHRpbWVVbml0OiBUaW1lVW5pdCwgaXNLZXlib2FyZEVuYWJsZWQgPSBmYWxzZSk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aW1lID09IG51bGwgfHwgdGltZSA9PT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAodGltZVVuaXQpIHtcbiAgICAgICAgICAgIGNhc2UgVGltZVVuaXQuSE9VUjoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdCA9ICh0aW1lID09PSAwIHx8IGlzS2V5Ym9hcmRFbmFibGVkKSA/ICdISCcgOiAnSCc7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0VGltZSgnaG91cicsIHRpbWUsIGZvcm1hdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFRpbWVVbml0Lk1JTlVURTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRUaW1lKCdtaW51dGUnLCB0aW1lLCAnbW0nKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGVyZSBpcyBubyBUaW1lIFVuaXQgd2l0aCB0eXBlICR7dGltZVVuaXR9YCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGZvcm1hdFRpbWUodGltZU1lYXN1cmU6IFRpbWVNZWFzdXJlLCB0aW1lOiBzdHJpbmcgfCBudW1iZXIsIGZvcm1hdDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBEYXRlVGltZS5mcm9tT2JqZWN0KHtbdGltZU1lYXN1cmVdOiArdGltZX0pLnNldExvY2FsZSh0aGlzLmxvY2FsZSkudG9Gb3JtYXQoZm9ybWF0KTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBmb3JtYXQgcHJvdmlkZWQgdGltZSAtICR7dGltZX0gdG8gbG9jYWxlIC0gJHt0aGlzLmxvY2FsZX1gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==