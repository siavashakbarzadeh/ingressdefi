import * as tslib_1 from "tslib";
import { Inject, Injectable, Pipe } from '@angular/core';
import { TIME_LOCALE } from '../tokens/time-locale.token';
import { TimeUnit } from '../models/time-unit.enum';
import { DateTime } from 'luxon';
import * as ɵngcc0 from '@angular/core';
var TimeParserPipe = /** @class */ (function () {
    function TimeParserPipe(locale) {
        this.locale = locale;
        this.numberingSystem = DateTime.local().setLocale(this.locale).resolvedLocaleOpts().numberingSystem;
    }
    TimeParserPipe.prototype.transform = function (time, timeUnit) {
        if (timeUnit === void 0) { timeUnit = TimeUnit.HOUR; }
        if (time == null || time === '') {
            return '';
        }
        if (!isNaN(+time)) {
            return time;
        }
        if (timeUnit === TimeUnit.MINUTE) {
            return this.parseTime(time, 'm', 'minute');
        }
        return this.parseTime(time, 'H', 'hour');
    };
    TimeParserPipe.prototype.parseTime = function (time, format, timeMeasure) {
        var parsedTime = DateTime.fromFormat(String(time), format, { numberingSystem: this.numberingSystem })[timeMeasure];
        if (!isNaN(parsedTime)) {
            return parsedTime;
        }
        throw new Error("Cannot parse time - " + time);
    };
    TimeParserPipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [TIME_LOCALE,] }] }
    ]; };
    TimeParserPipe = tslib_1.__decorate([ tslib_1.__param(0, Inject(TIME_LOCALE))
    ], TimeParserPipe);
TimeParserPipe.ɵfac = function TimeParserPipe_Factory(t) { return new (t || TimeParserPipe)(ɵngcc0.ɵɵdirectiveInject(TIME_LOCALE)); };
TimeParserPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "timeParser", type: TimeParserPipe, pure: true });
TimeParserPipe.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TimeParserPipe, factory: function (t) { return TimeParserPipe.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimeParserPipe, [{
        type: Pipe,
        args: [{
                name: 'timeParser'
            }]
    }, {
        type: Injectable
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [TIME_LOCALE]
            }] }]; }, null); })();
    return TimeParserPipe;
}());
export { TimeParserPipe };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1wYXJzZXIucGlwZS5qcyIsInNvdXJjZXMiOlsibmc6L25neC1tYXRlcmlhbC10aW1lcGlja2VyL3NyYy9hcHAvbWF0ZXJpYWwtdGltZXBpY2tlci9waXBlcy90aW1lLXBhcnNlci5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLE9BQU8sQ0FBQzs7QUFRakM7QUFBa0QsSUFJOUMsd0JBQXlDLE1BQWM7QUFDM0QsUUFENkMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtBQUFDLFFBQ3BELElBQUksQ0FBQyxlQUFlLEdBQUcsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxlQUFlLENBQUM7QUFDNUcsSUFBSSxDQUFDO0FBQ0wsSUFDSSxrQ0FBUyxHQUFULFVBQVUsSUFBcUIsRUFBRSxRQUF3QjtBQUFJLFFBQTVCLHlCQUFBLEVBQUEsV0FBVyxRQUFRLENBQUMsSUFBSTtBQUFJLFFBQ3pELElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRSxFQUFFO0FBQ3pDLFlBQVksT0FBTyxFQUFFLENBQUM7QUFDdEIsU0FBUztBQUNULFFBQ1EsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQzNCLFlBQVksT0FBTyxJQUFJLENBQUM7QUFDeEIsU0FBUztBQUNULFFBQ1EsSUFBSSxRQUFRLEtBQUssUUFBUSxDQUFDLE1BQU0sRUFBRTtBQUMxQyxZQUFZLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3ZELFNBQVM7QUFDVCxRQUNRLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ2pELElBQ0ksQ0FBQztBQUVMLElBQVksa0NBQVMsR0FBakIsVUFBa0IsSUFBcUIsRUFBRSxNQUFjLEVBQUUsV0FBd0I7QUFBSSxRQUNqRixJQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLGVBQWUsRUFBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDM0gsUUFDUSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQ2hDLFlBQVksT0FBTyxVQUFVLENBQUM7QUFDOUIsU0FBUztBQUNULFFBQ1EsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBdUIsSUFBTSxDQUFDLENBQUM7QUFDdkQsSUFBSSxDQUFDO0FBRUw7QUFDeUQsNkNBaEN4QyxNQUFNLFNBQUMsV0FBVztBQUFRO0FBQVUsSUFKeEMsY0FBYyxnQ0FKMUIsSUFBSSxDQUFDLGNBQ0YsSUFBSSxFQUFFLGxDQUdGLENBSVMsbUJBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0tBUGQsVUFDckIsQ0FBQyxoQkFNbUMsT0FKeEIsY0FBYyxDQW1DMUI7RUFwQ0EsVUFBVSxFQUFFOzs7Ozs7Ozs7Ozs7O2tDQXFDYjtBQUFDLElBREQscUJBQUM7QUFDQSxDQURBLEFBbkNELElBbUNDO0FBQ0QsU0FwQ2EsY0FBYztBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUSU1FX0xPQ0FMRSB9IGZyb20gJy4uL3Rva2Vucy90aW1lLWxvY2FsZS50b2tlbic7XG5pbXBvcnQgeyBUaW1lVW5pdCB9IGZyb20gJy4uL21vZGVscy90aW1lLXVuaXQuZW51bSc7XG5pbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gJ2x1eG9uJztcblxudHlwZSBUaW1lTWVhc3VyZSA9ICdob3VyJyB8ICdtaW51dGUnO1xuXG5AUGlwZSh7XG4gICAgbmFtZTogJ3RpbWVQYXJzZXInXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRpbWVQYXJzZXJQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IG51bWJlcmluZ1N5c3RlbTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChUSU1FX0xPQ0FMRSkgcHJpdmF0ZSBsb2NhbGU6IHN0cmluZykge1xuICAgICAgICB0aGlzLm51bWJlcmluZ1N5c3RlbSA9IERhdGVUaW1lLmxvY2FsKCkuc2V0TG9jYWxlKHRoaXMubG9jYWxlKS5yZXNvbHZlZExvY2FsZU9wdHMoKS5udW1iZXJpbmdTeXN0ZW07XG4gICAgfVxuXG4gICAgdHJhbnNmb3JtKHRpbWU6IHN0cmluZyB8IG51bWJlciwgdGltZVVuaXQgPSBUaW1lVW5pdC5IT1VSKTogbnVtYmVyIHwgc3RyaW5nIHtcbiAgICAgICAgaWYgKHRpbWUgPT0gbnVsbCB8fCB0aW1lID09PSAnJykge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc05hTigrdGltZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRpbWVVbml0ID09PSBUaW1lVW5pdC5NSU5VVEUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlVGltZSh0aW1lLCAnbScsICdtaW51dGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVGltZSh0aW1lLCAnSCcsICdob3VyJyk7XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIHBhcnNlVGltZSh0aW1lOiBzdHJpbmcgfCBudW1iZXIsIGZvcm1hdDogc3RyaW5nLCB0aW1lTWVhc3VyZTogVGltZU1lYXN1cmUpOiBudW1iZXIge1xuICAgICAgICBjb25zdCBwYXJzZWRUaW1lID0gRGF0ZVRpbWUuZnJvbUZvcm1hdChTdHJpbmcodGltZSksIGZvcm1hdCwge251bWJlcmluZ1N5c3RlbTogdGhpcy5udW1iZXJpbmdTeXN0ZW19KVt0aW1lTWVhc3VyZV07XG5cbiAgICAgICAgaWYgKCFpc05hTihwYXJzZWRUaW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlZFRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBwYXJzZSB0aW1lIC0gJHt0aW1lfWApO1xuICAgIH1cblxufVxuIl19