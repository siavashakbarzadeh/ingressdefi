import * as tslib_1 from "tslib";
import { DateTime } from 'luxon';
import { TimeFormat } from '../models/time-format.enum';
import { TimePeriod } from '../models/time-period.enum';
import { isBetween, isSameOrAfter, isSameOrBefore } from '../utils/timepicker.utils';
// @dynamic
var TimeAdapter = /** @class */ (function () {
    function TimeAdapter() {
    }
    TimeAdapter.parseTime = function (time, opts) {
        var _a = TimeAdapter.getLocaleOptionsByTime(time, opts), numberingSystem = _a.numberingSystem, locale = _a.locale;
        var isPeriodExist = time.split(' ').length === 2;
        var timeMask = isPeriodExist ? TimeFormat.TWELVE_SHORT : TimeFormat.TWENTY_FOUR_SHORT;
        return DateTime.fromFormat(time, timeMask, { numberingSystem: numberingSystem, locale: locale });
    };
    TimeAdapter.formatTime = function (time, opts) {
        if (!time) {
            return 'Invalid Time';
        }
        var format = opts.format;
        var parsedTime = TimeAdapter.parseTime(time, opts).setLocale(TimeAdapter.DEFAULT_LOCALE);
        if (format !== 24) {
            return parsedTime.toLocaleString(tslib_1.__assign({}, DateTime.TIME_SIMPLE, { hour12: format !== 24, numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM })).replace(/\u200E/g, '');
        }
        return parsedTime.toISOTime({
            includeOffset: false,
            suppressMilliseconds: true,
            suppressSeconds: true
        }).replace(/\u200E/g, '');
    };
    TimeAdapter.toLocaleTimeString = function (time, opts) {
        if (opts === void 0) { opts = {}; }
        var _a = opts.format, format = _a === void 0 ? TimeAdapter.DEFAULT_FORMAT : _a, _b = opts.locale, locale = _b === void 0 ? TimeAdapter.DEFAULT_LOCALE : _b;
        var hourCycle = format === 24 ? 'h23' : 'h12';
        var timeFormat = tslib_1.__assign({}, DateTime.TIME_SIMPLE, { hourCycle: hourCycle });
        var timeMask = (format === 24) ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;
        return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(timeFormat);
    };
    TimeAdapter.isTimeAvailable = function (time, min, max, granularity, minutesGap, format) {
        if (!time) {
            return;
        }
        var convertedTime = this.parseTime(time, { format: format });
        var minutes = convertedTime.minute;
        if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {
            throw new Error("Your minutes - " + minutes + " doesn't match your minutesGap - " + minutesGap);
        }
        var isAfter = (min && !max)
            && isSameOrAfter(convertedTime, min, granularity);
        var isBefore = (max && !min)
            && isSameOrBefore(convertedTime, max, granularity);
        var between = (min && max)
            && isBetween(convertedTime, min, max, granularity);
        var isAvailable = !min && !max;
        return isAfter || isBefore || between || isAvailable;
    };
    /***
     *  Format hour according to time format (12 or 24)
     */
    TimeAdapter.formatHour = function (currentHour, format, period) {
        if (format === 24) {
            return currentHour;
        }
        var hour = period === TimePeriod.AM ? currentHour : currentHour + 12;
        if (period === TimePeriod.AM && hour === 12) {
            return 0;
        }
        else if (period === TimePeriod.PM && hour === 24) {
            return 12;
        }
        return hour;
    };
    TimeAdapter.fromDateTimeToString = function (time, format) {
        var timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;
        return time.reconfigure({
            numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM,
            locale: TimeAdapter.DEFAULT_LOCALE
        }).toFormat(timeFormat);
    };
    TimeAdapter.getLocaleOptionsByTime = function (time, opts) {
        var _a = DateTime.local().setLocale(opts.locale).resolvedLocaleOpts(), numberingSystem = _a.numberingSystem, locale = _a.locale;
        var localeConfig = { numberingSystem: numberingSystem, locale: locale };
        var defaultConfig = { numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM, locale: TimeAdapter.DEFAULT_LOCALE };
        return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;
    };
    TimeAdapter.DEFAULT_FORMAT = 12;
    TimeAdapter.DEFAULT_LOCALE = 'en-US';
    TimeAdapter.DEFAULT_NUMBERING_SYSTEM = 'latn';
    return TimeAdapter;
}());
export { TimeAdapter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1hZGFwdGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LW1hdGVyaWFsLXRpbWVwaWNrZXIvIiwic291cmNlcyI6WyJzcmMvYXBwL21hdGVyaWFsLXRpbWVwaWNrZXIvc2VydmljZXMvdGltZS1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFpQixNQUFNLE9BQU8sQ0FBQztBQUVoRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBR3JGLFdBQVc7QUFDWDtJQUFBO0lBeUdBLENBQUM7SUFwR1UscUJBQVMsR0FBaEIsVUFBaUIsSUFBWSxFQUFFLElBQWlCO1FBQ3RDLElBQUEsbURBQTBFLEVBQXpFLG9DQUFlLEVBQUUsa0JBQXdELENBQUM7UUFDakYsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO1FBQ25ELElBQU0sUUFBUSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDO1FBRXhGLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUMsZUFBZSxpQkFBQSxFQUFFLE1BQU0sUUFBQSxFQUFDLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRU0sc0JBQVUsR0FBakIsVUFBa0IsSUFBWSxFQUFFLElBQWlCO1FBQzdDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDUCxPQUFPLGNBQWMsQ0FBQztTQUN6QjtRQUNNLElBQUEsb0JBQU0sQ0FBUztRQUN0QixJQUFNLFVBQVUsR0FBRyxXQUFXLENB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LFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7SUFDcEUsQ0FBQztJQXZHTSwwQkFBYyxHQUFHLEVBQUUsQ0FBQztJQUNwQiwwQkFBYyxHQUFHLE9BQU8sQ0FBQztJQUN6QixvQ0FBd0IsR0FBRyxNQUFNLENBQUM7SUFzRzdDLGtCQUFDO0NBQUEsQUF6R0QsSUF5R0M7U0F6R1ksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGVUaW1lLCBMb2NhbGVPcHRpb25zIH0gZnJvbSAnbHV4b24nO1xuXG5pbXBvcnQgeyBUaW1lRm9ybWF0IH0gZnJvbSAnLi4vbW9kZWxzL3RpbWUtZm9ybWF0LmVudW0nO1xuaW1wb3J0IHsgVGltZVBlcmlvZCB9IGZyb20gJy4uL21vZGVscy90aW1lLXBlcmlvZC5lbnVtJztcbmltcG9ydCB7IGlzQmV0d2VlbiwgaXNTYW1lT3JBZnRlciwgaXNTYW1lT3JCZWZvcmUgfSBmcm9tICcuLi91dGlscy90aW1lcGlja2VyLnV0aWxzJztcbmltcG9ydCB7IFRpbWVPcHRpb25zIH0gZnJvbSAnLi4vbW9kZWxzL3RpbWUtb3B0aW9ucy5pbnRlcmZhY2UnO1xuXG4vLyBAZHluYW1pY1xuZXhwb3J0IGNsYXNzIFRpbWVBZGFwdGVyIHtcbiAgICBzdGF0aWMgREVGQVVMVF9GT1JNQVQgPSAxMjtcbiAgICBzdGF0aWMgREVGQVVMVF9MT0NBTEUgPSAnZW4tVVMnO1xuICAgIHN0YXRpYyBERUZBVUxUX05VTUJFUklOR19TWVNURU0gPSAnbGF0bic7XG5cbiAgICBzdGF0aWMgcGFyc2VUaW1lKHRpbWU6IHN0cmluZywgb3B0czogVGltZU9wdGlvbnMpOiBEYXRlVGltZSB7XG4gICAgICAgIGNvbnN0IHtudW1iZXJpbmdTeXN0ZW0sIGxvY2FsZX0gPSBUaW1lQWRhcHRlci5nZXRMb2NhbGVPcHRpb25zQnlUaW1lKHRpbWUsIG9wdHMpO1xuICAgICAgICBjb25zdCBpc1BlcmlvZEV4aXN0ID0gdGltZS5zcGxpdCgnICcpLmxlbmd0aCA9PT0gMjtcbiAgICAgICAgY29uc3QgdGltZU1hc2sgPSBpc1BlcmlvZEV4aXN0ID8gVGltZUZvcm1hdC5UV0VMVkVfU0hPUlQgOiBUaW1lRm9ybWF0LlRXRU5UWV9GT1VSX1NIT1JUO1xuXG4gICAgICAgIHJldHVybiBEYXRlVGltZS5mcm9tRm9ybWF0KHRpbWUsIHRpbWVNYXNrLCB7bnVtYmVyaW5nU3lzdGVtLCBsb2NhbGV9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZm9ybWF0VGltZSh0aW1lOiBzdHJpbmcsIG9wdHM6IFRpbWVPcHRpb25zKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKCF0aW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0ludmFsaWQgVGltZSc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qge2Zvcm1hdH0gPSBvcHRzO1xuICAgICAgICBjb25zdCBwYXJzZWRUaW1lID0gVGltZUFkYXB0ZXIucGFyc2VUaW1lKHRpbWUsIG9wdHMpLnNldExvY2FsZShUaW1lQWRhcHRlci5ERUZBVUxUX0xPQ0FMRSk7XG5cbiAgICAgICAgaWYgKGZvcm1hdCAhPT0gMjQpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZWRUaW1lLnRvTG9jYWxlU3RyaW5nKHtcbiAgICAgICAgICAgICAgICAuLi5EYXRlVGltZS5USU1FX1NJTVBMRSxcbiAgICAgICAgICAgICAgICBob3VyMTI6IGZvcm1hdCAhPT0gMjQsXG4gICAgICAgICAgICAgICAgbnVtYmVyaW5nU3lzdGVtOiBUaW1lQWRhcHRlci5ERUZBVUxUX05VTUJFUklOR19TWVNURU1cbiAgICAgICAgICAgIH0pLnJlcGxhY2UoL1xcdTIwMEUvZywgJycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWRUaW1lLnRvSVNPVGltZSh7XG4gICAgICAgICAgICBpbmNsdWRlT2Zmc2V0OiBmYWxzZSxcbiAgICAgICAgICAgIHN1cHByZXNzTWlsbGlzZWNvbmRzOiB0cnVlLFxuICAgICAgICAgICAgc3VwcHJlc3NTZWNvbmRzOiB0cnVlXG4gICAgICAgIH0pLnJlcGxhY2UoL1xcdTIwMEUvZywgJycpO1xuICAgIH1cblxuICAgIHN0YXRpYyB0b0xvY2FsZVRpbWVTdHJpbmcodGltZTogc3RyaW5nLCBvcHRzOiBUaW1lT3B0aW9ucyA9IHt9KTogc3RyaW5nIHtcbiAgICAgICAgY29uc3Qge2Zvcm1hdCA9IFRpbWVBZGFwdGVyLkRFRkFVTFRfRk9STUFULCBsb2NhbGUgPSBUaW1lQWRhcHRlci5ERUZBVUxUX0xPQ0FMRX0gPSBvcHRzO1xuICAgICAgICBjb25zdCBob3VyQ3ljbGUgPSBmb3JtYXQgPT09IDI0ID8gJ2gyMycgOiAnaDEyJztcbiAgICAgICAgY29uc3QgdGltZUZvcm1hdCA9IHsuLi5EYXRlVGltZS5USU1FX1NJTVBMRSwgaG91ckN5Y2xlfTtcbiAgICAgICAgY29uc3QgdGltZU1hc2sgPSAoZm9ybWF0ID09PSAyNCkgPyBUaW1lRm9ybWF0LlRXRU5UWV9GT1VSX1NIT1JUIDogVGltZUZvcm1hdC5UV0VMVkVfU0hPUlQ7XG5cbiAgICAgICAgcmV0dXJuIERhdGVUaW1lLmZyb21Gb3JtYXQodGltZSwgdGltZU1hc2spLnNldExvY2FsZShsb2NhbGUpLnRvTG9jYWxlU3RyaW5nKHRpbWVGb3JtYXQpO1xuICAgIH1cblxuICAgIHN0YXRpYyBpc1RpbWVBdmFpbGFibGUoXG4gICAgICAgIHRpbWU6IHN0cmluZyxcbiAgICAgICAgbWluPzogRGF0ZVRpbWUsXG4gICAgICAgIG1heD86IERhdGVUaW1lLFxuICAgICAgICBncmFudWxhcml0eT86ICdob3VycycgfCAnbWludXRlcycsXG4gICAgICAgIG1pbnV0ZXNHYXA/OiBudW1iZXIgfCBudWxsLFxuICAgICAgICBmb3JtYXQ/OiBudW1iZXJcbiAgICApOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCF0aW1lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb252ZXJ0ZWRUaW1lID0gdGhpcy5wYXJzZVRpbWUodGltZSwge2Zvcm1hdH0pO1xuICAgICAgICBjb25zdCBtaW51dGVzID0gY29udmVydGVkVGltZS5taW51dGU7XG5cbiAgICAgICAgaWYgKG1pbnV0ZXNHYXAgJiYgbWludXRlcyA9PT0gbWludXRlcyAmJiBtaW51dGVzICUgbWludXRlc0dhcCAhPT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBZb3VyIG1pbnV0ZXMgLSAke21pbnV0ZXN9IGRvZXNuXFwndCBtYXRjaCB5b3VyIG1pbnV0ZXNHYXAgLSAke21pbnV0ZXNHYXB9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNBZnRlciA9IChtaW4gJiYgIW1heClcbiAgICAgICAgICAgICYmIGlzU2FtZU9yQWZ0ZXIoY29udmVydGVkVGltZSwgbWluLCBncmFudWxhcml0eSk7XG4gICAgICAgIGNvbnN0IGlzQmVmb3JlID0gKG1heCAmJiAhbWluKVxuICAgICAgICAgICAgJiYgaXNTYW1lT3JCZWZvcmUoY29udmVydGVkVGltZSwgbWF4LCBncmFudWxhcml0eSk7XG4gICAgICAgIGNvbnN0IGJldHdlZW4gPSAobWluICYmIG1heClcbiAgICAgICAgICAgICYmIGlzQmV0d2Vlbihjb252ZXJ0ZWRUaW1lLCBtaW4sIG1heCwgZ3JhbnVsYXJpdHkpO1xuICAgICAgICBjb25zdCBpc0F2YWlsYWJsZSA9ICFtaW4gJiYgIW1heDtcblxuICAgICAgICByZXR1cm4gaXNBZnRlciB8fCBpc0JlZm9yZSB8fCBiZXR3ZWVuIHx8IGlzQXZhaWxhYmxlO1xuICAgIH1cblxuICAgIC8qKipcbiAgICAgKiAgRm9ybWF0IGhvdXIgYWNjb3JkaW5nIHRvIHRpbWUgZm9ybWF0ICgxMiBvciAyNClcbiAgICAgKi9cbiAgICBzdGF0aWMgZm9ybWF0SG91cihjdXJyZW50SG91cjogbnVtYmVyLCBmb3JtYXQ6IG51bWJlciwgcGVyaW9kOiBUaW1lUGVyaW9kKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gMjQpIHtcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50SG91cjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBob3VyID0gcGVyaW9kID09PSBUaW1lUGVyaW9kLkFNID8gY3VycmVudEhvdXIgOiBjdXJyZW50SG91ciArIDEyO1xuXG4gICAgICAgIGlmIChwZXJpb2QgPT09IFRpbWVQZXJpb2QuQU0gJiYgaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9IGVsc2UgaWYgKHBlcmlvZCA9PT0gVGltZVBlcmlvZC5QTSAmJiBob3VyID09PSAyNCkge1xuICAgICAgICAgICAgcmV0dXJuIDEyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBob3VyO1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tRGF0ZVRpbWVUb1N0cmluZyh0aW1lOiBEYXRlVGltZSwgZm9ybWF0OiBudW1iZXIpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCB0aW1lRm9ybWF0ID0gZm9ybWF0ID09PSAyNCA/IFRpbWVGb3JtYXQuVFdFTlRZX0ZPVVIgOiBUaW1lRm9ybWF0LlRXRUxWRTtcblxuICAgICAgICByZXR1cm4gdGltZS5yZWNvbmZpZ3VyZSh7XG4gICAgICAgICAgICBudW1iZXJpbmdTeXN0ZW06IFRpbWVBZGFwdGVyLkRFRkFVTFRfTlVNQkVSSU5HX1NZU1RFTSxcbiAgICAgICAgICAgIGxvY2FsZTogVGltZUFkYXB0ZXIuREVGQVVMVF9MT0NBTEVcbiAgICAgICAgfSkudG9Gb3JtYXQodGltZUZvcm1hdCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0TG9jYWxlT3B0aW9uc0J5VGltZSh0aW1lOiBzdHJpbmcsIG9wdHM6IFRpbWVPcHRpb25zKTogTG9jYWxlT3B0aW9ucyB7XG4gICAgICAgIGNvbnN0IHtudW1iZXJpbmdTeXN0ZW0sIGxvY2FsZX0gPSBEYXRlVGltZS5sb2NhbCgpLnNldExvY2FsZShvcHRzLmxvY2FsZSkucmVzb2x2ZWRMb2NhbGVPcHRzKCk7XG4gICAgICAgIGNvbnN0IGxvY2FsZUNvbmZpZzogTG9jYWxlT3B0aW9ucyA9IHtudW1iZXJpbmdTeXN0ZW06IG51bWJlcmluZ1N5c3RlbSwgbG9jYWxlfTtcbiAgICAgICAgY29uc3QgZGVmYXVsdENvbmZpZzogTG9jYWxlT3B0aW9ucyA9IHtudW1iZXJpbmdTeXN0ZW06IFRpbWVBZGFwdGVyLkRFRkFVTFRfTlVNQkVSSU5HX1NZU1RFTSwgbG9jYWxlOiBUaW1lQWRhcHRlci5ERUZBVUxUX0xPQ0FMRX07XG5cbiAgICAgICAgcmV0dXJuIGlzTmFOKHBhcnNlSW50KHRpbWUsIDEwKSkgPyBsb2NhbGVDb25maWcgOiBkZWZhdWx0Q29uZmlnO1xuICAgIH1cbn1cbiJdfQ==