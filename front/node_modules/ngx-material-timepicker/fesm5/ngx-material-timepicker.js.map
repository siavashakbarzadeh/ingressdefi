{"version":3,"file":"ngx-material-timepicker.js","sources":["ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker-event.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/dom.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-unit.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-period.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-format.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker.utils.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/time-adapter.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/tokens/time-locale.token.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/ngx-material-timepicker-container/ngx-material-timepicker-container.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-toggle-icon.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-timepicker.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-theme.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker-time.utils.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-face/ngx-material-timepicker-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial/ngx-material-timepicker-dial.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-parser.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial-control/ngx-material-timepicker-dial-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-period/ngx-material-timepicker-period.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/overlay.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/minutes-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/autofocus.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/ngx-timepicker-field.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/timepicker-time-control/ngx-timepicker-time-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/timepicker-period-selector/ngx-timepicker-period-selector.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-localizer.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/active-hour.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/active-minute.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/ngx-material-timepicker-content/ngx-material-timepicker-content.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/append-to-input.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.module.ts","ng://ngx-material-timepicker/ngx-material-timepicker.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NgxMaterialTimepickerEventService {\n\n    private backdropClickSubject: Subject<MouseEvent> = new Subject();\n    private keydownEventSubject: Subject<KeyboardEvent> = new Subject();\n\n    get backdropClick(): Observable<MouseEvent> {\n        return this.backdropClickSubject.asObservable().pipe(shareReplay({bufferSize: 1, refCount: true}));\n    }\n\n    get keydownEvent(): Observable<KeyboardEvent> {\n        return this.keydownEventSubject.asObservable().pipe(shareReplay({bufferSize: 1, refCount: true}));\n    }\n\n    dispatchEvent(event: KeyboardEvent | MouseEvent): void {\n        switch (event.type) {\n            case 'click':\n                this.backdropClickSubject.next(<MouseEvent>event);\n                break;\n            case 'keydown':\n                this.keydownEventSubject.next(<KeyboardEvent>event);\n                break;\n            default:\n                throw new Error('no such event type');\n        }\n    }\n\n}\n","import {\n    ApplicationRef,\n    ComponentFactoryResolver,\n    ComponentRef,\n    EmbeddedViewRef,\n    Inject,\n    Injectable,\n    Injector,\n    Optional,\n    Type\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    NgxMaterialTimepickerContainerComponent\n} from '../components/ngx-material-timepicker-container/ngx-material-timepicker-container.component';\nimport { TimepickerConfig } from '../models/timepicker-config.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DomService {\n\n    private componentRef: ComponentRef<NgxMaterialTimepickerContainerComponent>;\n\n    constructor(private cfr: ComponentFactoryResolver,\n                private appRef: ApplicationRef,\n                private injector: Injector,\n                @Optional() @Inject(DOCUMENT) private document: any) {\n    }\n\n    appendTimepickerToBody(timepicker: Type<NgxMaterialTimepickerContainerComponent>, config: TimepickerConfig): void {\n        this.componentRef = this.cfr.resolveComponentFactory(timepicker).create(this.injector);\n\n        Object.keys(config).forEach(key => this.componentRef.instance[key] = config[key]);\n\n        this.appRef.attachView(this.componentRef.hostView);\n\n        const domElement: HTMLElement = (this.componentRef.hostView as EmbeddedViewRef<NgxMaterialTimepickerContainerComponent>)\n            .rootNodes[0];\n\n        this.document.body.appendChild(domElement);\n    }\n\n    destroyTimepicker(): void {\n        this.componentRef.destroy();\n        this.appRef.detachView(this.componentRef.hostView);\n    }\n}\n","export enum TimeUnit {\n    HOUR,\n    MINUTE\n}\n","export enum TimePeriod {\n    AM = 'AM',\n    PM = 'PM'\n}\n","export enum TimeFormat {\n    TWELVE = 'hh:mm a',\n    TWELVE_SHORT = 'h:m a',\n    TWENTY_FOUR = 'HH:mm',\n    TWENTY_FOUR_SHORT = 'H:m'\n}\n","/* tslint:disable */\nimport { DateTime } from 'luxon';\n\n\nexport function isSameOrAfter(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return time.hour >= compareWith.hour;\n    }\n    if (unit === 'minutes') {\n        return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\n    }\n}\n\nexport function isSameOrBefore(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return time.hour <= compareWith.hour;\n    }\n    if (unit === 'minutes') {\n        return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\n    }\n}\n\nexport function isBetween(time: DateTime, before: DateTime, after: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return isSameOrBefore(time, after, unit) && isSameOrAfter(time, before, unit);\n    }\n    if (unit === 'minutes') {\n        return isSameOrBefore(time, after) && isSameOrAfter(time, before);\n    }\n}\n\nexport function isDigit(e: KeyboardEvent) {\n    // Allow: backspace, delete, tab, escape, enter\n    if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\n        // Allow: Ctrl/cmd+A\n        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: Ctrl/cmd+C\n        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: Ctrl/cmd+X\n        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: home, end, left, right, up, down\n        (e.keyCode >= 35 && e.keyCode <= 40)) {\n\n        return true;\n    }\n    return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\n}\n","import { DateTime, LocaleOptions } from 'luxon';\n\nimport { TimeFormat } from '../models/time-format.enum';\nimport { TimePeriod } from '../models/time-period.enum';\nimport { isBetween, isSameOrAfter, isSameOrBefore } from '../utils/timepicker.utils';\nimport { TimeOptions } from '../models/time-options.interface';\n\n// @dynamic\nexport class TimeAdapter {\n    static DEFAULT_FORMAT = 12;\n    static DEFAULT_LOCALE = 'en-US';\n    static DEFAULT_NUMBERING_SYSTEM = 'latn';\n\n    static parseTime(time: string, opts: TimeOptions): DateTime {\n        const {numberingSystem, locale} = TimeAdapter.getLocaleOptionsByTime(time, opts);\n        const isPeriodExist = time.split(' ').length === 2;\n        const timeMask = isPeriodExist ? TimeFormat.TWELVE_SHORT : TimeFormat.TWENTY_FOUR_SHORT;\n\n        return DateTime.fromFormat(time, timeMask, {numberingSystem, locale});\n    }\n\n    static formatTime(time: string, opts: TimeOptions): string {\n        if (!time) {\n            return 'Invalid Time';\n        }\n        const {format} = opts;\n        const parsedTime = TimeAdapter.parseTime(time, opts).setLocale(TimeAdapter.DEFAULT_LOCALE);\n\n        if (format !== 24) {\n            return parsedTime.toLocaleString({\n                ...DateTime.TIME_SIMPLE,\n                hour12: format !== 24,\n                numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM\n            }).replace(/\\u200E/g, '');\n        }\n        return parsedTime.toISOTime({\n            includeOffset: false,\n            suppressMilliseconds: true,\n            suppressSeconds: true\n        }).replace(/\\u200E/g, '');\n    }\n\n    static toLocaleTimeString(time: string, opts: TimeOptions = {}): string {\n        const {format = TimeAdapter.DEFAULT_FORMAT, locale = TimeAdapter.DEFAULT_LOCALE} = opts;\n        const hourCycle = format === 24 ? 'h23' : 'h12';\n        const timeFormat = {...DateTime.TIME_SIMPLE, hourCycle};\n        const timeMask = (format === 24) ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;\n\n        return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(timeFormat);\n    }\n\n    static isTimeAvailable(\n        time: string,\n        min?: DateTime,\n        max?: DateTime,\n        granularity?: 'hours' | 'minutes',\n        minutesGap?: number | null,\n        format?: number\n    ): boolean {\n        if (!time) {\n            return;\n        }\n\n        const convertedTime = this.parseTime(time, {format});\n        const minutes = convertedTime.minute;\n\n        if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {\n            throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\n        }\n        const isAfter = (min && !max)\n            && isSameOrAfter(convertedTime, min, granularity);\n        const isBefore = (max && !min)\n            && isSameOrBefore(convertedTime, max, granularity);\n        const between = (min && max)\n            && isBetween(convertedTime, min, max, granularity);\n        const isAvailable = !min && !max;\n\n        return isAfter || isBefore || between || isAvailable;\n    }\n\n    /***\n     *  Format hour according to time format (12 or 24)\n     */\n    static formatHour(currentHour: number, format: number, period: TimePeriod): number {\n        if (format === 24) {\n            return currentHour;\n        }\n        const hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\n\n        if (period === TimePeriod.AM && hour === 12) {\n            return 0;\n        } else if (period === TimePeriod.PM && hour === 24) {\n            return 12;\n        }\n        return hour;\n    }\n\n    static fromDateTimeToString(time: DateTime, format: number): string {\n        const timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\n\n        return time.reconfigure({\n            numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM,\n            locale: TimeAdapter.DEFAULT_LOCALE\n        }).toFormat(timeFormat);\n    }\n\n    private static getLocaleOptionsByTime(time: string, opts: TimeOptions): LocaleOptions {\n        const {numberingSystem, locale} = DateTime.local().setLocale(opts.locale).resolvedLocaleOpts();\n        const localeConfig: LocaleOptions = {numberingSystem: numberingSystem, locale};\n        const defaultConfig: LocaleOptions = {numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM, locale: TimeAdapter.DEFAULT_LOCALE};\n\n        return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ClockFaceTime } from '../models/clock-face-time.interface';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { TimePeriod } from '../models/time-period.enum';\nimport { TimeAdapter } from './time-adapter';\nimport { DateTime } from 'luxon';\n\n\nconst DEFAULT_HOUR: ClockFaceTime = {\n    time: 12,\n    angle: 360\n};\nconst DEFAULT_MINUTE: ClockFaceTime = {\n    time: 0,\n    angle: 360\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NgxMaterialTimepickerService {\n\n    private hourSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_HOUR);\n    private minuteSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_MINUTE);\n    private periodSubject = new BehaviorSubject<TimePeriod>(TimePeriod.AM);\n\n\n    set hour(hour: ClockFaceTime) {\n        this.hourSubject.next(hour);\n    }\n\n    get selectedHour(): Observable<ClockFaceTime> {\n        return this.hourSubject.asObservable();\n    }\n\n    set minute(minute: ClockFaceTime) {\n        this.minuteSubject.next(minute);\n    }\n\n    get selectedMinute(): Observable<ClockFaceTime> {\n        return this.minuteSubject.asObservable();\n    }\n\n    set period(period: TimePeriod) {\n        const isPeriodValid = (period === TimePeriod.AM) || (period === TimePeriod.PM);\n\n        if (isPeriodValid) {\n            this.periodSubject.next(period);\n        }\n    }\n\n    get selectedPeriod(): Observable<TimePeriod> {\n        return this.periodSubject.asObservable();\n    }\n\n\n    setDefaultTimeIfAvailable(time: string, min: DateTime, max: DateTime, format: number, minutesGap?: number) {\n        /* Workaround to double error message*/\n        try {\n            if (TimeAdapter.isTimeAvailable(time, min, max, 'minutes', minutesGap)) {\n                this.setDefaultTime(time, format);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    getFullTime(format: number): string {\n        const selectedHour = this.hourSubject.getValue().time;\n        const selectedMinute = this.minuteSubject.getValue().time;\n        const hour = selectedHour != null ? selectedHour : DEFAULT_HOUR.time;\n        const minute = selectedMinute != null ? selectedMinute : DEFAULT_MINUTE.time;\n        const period = format === 12 ? this.periodSubject.getValue() : '';\n        const time = `${hour}:${minute} ${period}`.trim();\n\n        return TimeAdapter.formatTime(time, {format});\n    }\n\n    private setDefaultTime(time: string, format: number) {\n        const defaultTime = TimeAdapter.parseTime(time, {format}).toJSDate();\n\n        if (DateTime.fromJSDate(defaultTime).isValid) {\n            const period = time.substr(time.length - 2).toUpperCase();\n            const hour = defaultTime.getHours();\n\n            this.hour = {...DEFAULT_HOUR, time: formatHourByPeriod(hour, period as TimePeriod)};\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\n            this.period = period as TimePeriod;\n\n        } else {\n            this.resetTime();\n        }\n    }\n\n    private resetTime(): void {\n        this.hour = {...DEFAULT_HOUR};\n        this.minute = {...DEFAULT_MINUTE};\n        this.period = TimePeriod.AM;\n    }\n}\n\n/***\n *  Format hour in 24hours format to meridian (AM or PM) format\n */\nfunction formatHourByPeriod(hour: number, period: TimePeriod): number {\n    switch (period) {\n        case TimePeriod.AM:\n            return hour === 0 ? 12 : hour;\n        case TimePeriod.PM:\n            return hour === 12 ? 12 : hour - 12;\n        default:\n            return hour;\n    }\n}\n","import { InjectionToken } from '@angular/core';\nimport { TimeAdapter } from '../services/time-adapter';\n\nexport const TIME_LOCALE = new InjectionToken<string>('TimeLocale', {\n    providedIn: 'root',\n    factory: () => TimeAdapter.DEFAULT_LOCALE\n});\n","import { Component, HostListener, Inject, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { DateTime } from 'luxon';\nimport { animate, AnimationEvent, style, transition, trigger } from '@angular/animations';\nimport { NgxMaterialTimepickerService } from '../../services/ngx-material-timepicker.service';\nimport { Observable, Subject } from 'rxjs';\nimport { shareReplay, takeUntil } from 'rxjs/operators';\nimport { TimeAdapter } from '../../services/time-adapter';\nimport { TimepickerRef } from '../../models/timepicker-ref.interface';\nimport { TimepickerConfig } from '../../models/timepicker-config.interface';\nimport { NgxMaterialTimepickerEventService } from '../../services/ngx-material-timepicker-event.service';\nimport { NgxMaterialTimepickerTheme } from '../../models/ngx-material-timepicker-theme.interface';\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\n\nexport enum AnimationState {\n    ENTER = 'enter',\n    LEAVE = 'leave'\n}\n\n@Component({\n    selector: 'ngx-material-timepicker-container',\n    templateUrl: './ngx-material-timepicker-container.component.html',\n    styleUrls: ['./ngx-material-timepicker-container.component.scss'],\n    animations: [\n        trigger('timepicker', [\n            transition(`* => ${AnimationState.ENTER}`, [\n                style({transform: 'translateY(-30%)'}),\n                animate('0.2s ease-out', style({transform: 'translateY(0)'}))\n            ]),\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\n                style({transform: 'translateY(0)', opacity: 1}),\n                animate('0.2s ease-out', style({transform: 'translateY(-30%)', opacity: 0}))\n            ])\n        ])\n    ],\n    providers: [NgxMaterialTimepickerService]\n})\nexport class NgxMaterialTimepickerContainerComponent implements OnInit, OnDestroy, TimepickerConfig {\n\n    selectedHour: Observable<ClockFaceTime>;\n    selectedMinute: Observable<ClockFaceTime>;\n    selectedPeriod: Observable<TimePeriod>;\n\n    timeUnit = TimeUnit;\n    activeTimeUnit = TimeUnit.HOUR;\n\n    animationState: AnimationState;\n\n    cancelBtnTmpl: TemplateRef<Node>;\n    editableHintTmpl: TemplateRef<Node>;\n    confirmBtnTmpl: TemplateRef<Node>;\n    inputElement: any;\n\n    enableKeyboardInput: boolean;\n    preventOverlayClick: boolean;\n    disableAnimation: boolean;\n    disabled: boolean;\n    appendToInput: boolean;\n    hoursOnly: boolean;\n\n    format: number;\n    minutesGap: number;\n\n    minTime: DateTime;\n    maxTime: DateTime;\n    time: string;\n\n    timepickerClass: string;\n    theme: NgxMaterialTimepickerTheme;\n    timepickerBaseRef: TimepickerRef;\n\n    @Input()\n    set defaultTime(time: string) {\n        this._defaultTime = time;\n        this.setDefaultTime(time);\n    }\n\n    get defaultTime(): string {\n        return this._defaultTime;\n    }\n\n    private _defaultTime: string;\n\n    private unsubscribe = new Subject();\n\n    constructor(private timepickerService: NgxMaterialTimepickerService,\n                private eventService: NgxMaterialTimepickerEventService,\n                @Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(e: any): void {\n        this.eventService.dispatchEvent(e);\n        e.stopPropagation();\n    }\n\n    ngOnInit(): void {\n\n        this.animationState = !this.disableAnimation && AnimationState.ENTER;\n\n        this.defineTime();\n\n        this.selectedHour = this.timepickerService.selectedHour\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n\n        this.selectedMinute = this.timepickerService.selectedMinute\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n\n        this.selectedPeriod = this.timepickerService.selectedPeriod\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n\n        this.timepickerBaseRef.timeUpdated.pipe(takeUntil(this.unsubscribe))\n            .subscribe(this.setDefaultTime.bind(this));\n    }\n\n    onHourChange(hour: ClockFaceTime): void {\n        this.timepickerService.hour = hour;\n        this.onTimeChange();\n    }\n\n    onHourSelected(hour: number): void {\n        if (!this.hoursOnly) {\n            this.changeTimeUnit(TimeUnit.MINUTE);\n        }\n        this.timepickerBaseRef.hourSelected.next(hour);\n    }\n\n    onMinuteChange(minute: ClockFaceTime): void {\n        this.timepickerService.minute = minute;\n        this.onTimeChange();\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.timepickerService.period = period;\n        this.onTimeChange();\n    }\n\n    changeTimeUnit(unit: TimeUnit): void {\n        this.activeTimeUnit = unit;\n    }\n\n    setTime(): void {\n        this.timepickerBaseRef.timeSet.next(this.timepickerService.getFullTime(this.format));\n        this.close();\n    }\n\n    close(): void {\n        if (this.disableAnimation) {\n            this.timepickerBaseRef.close();\n            return;\n        }\n\n        this.animationState = AnimationState.LEAVE;\n    }\n\n    animationDone(event: AnimationEvent): void {\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\n            this.timepickerBaseRef.close();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.unsubscribe.next();\n        this.unsubscribe.complete();\n    }\n\n    private setDefaultTime(time: string): void {\n        this.timepickerService.setDefaultTimeIfAvailable(\n            time, this.minTime, this.maxTime, this.format, this.minutesGap);\n    }\n\n    private defineTime(): void {\n        const minTime = this.minTime;\n\n        if (minTime && (!this.time && !this.defaultTime)) {\n            const time = TimeAdapter.fromDateTimeToString(minTime, this.format);\n\n            this.setDefaultTime(time);\n        }\n    }\n\n    private onTimeChange(): void {\n        const time = TimeAdapter.toLocaleTimeString(this.timepickerService.getFullTime(this.format), {\n            locale: this.locale,\n            format: this.format\n        });\n\n        this.timepickerBaseRef.timeChanged.emit(time);\n    }\n\n}\n","import { Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\nimport { merge, Subject } from 'rxjs';\nimport { NgxMaterialTimepickerEventService } from './services/ngx-material-timepicker-event.service';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\nimport { DateTime } from 'luxon';\nimport { DomService } from './services/dom.service';\nimport {\n    NgxMaterialTimepickerContainerComponent\n} from './components/ngx-material-timepicker-container/ngx-material-timepicker-container.component';\nimport { TimepickerRef } from './models/timepicker-ref.interface';\nimport { NgxMaterialTimepickerTheme } from './models/ngx-material-timepicker-theme.interface';\n\nconst ESCAPE = 27;\n\n@Component({\n    selector: 'ngx-material-timepicker',\n    template: '',\n})\nexport class NgxMaterialTimepickerComponent implements TimepickerRef {\n\n    timeUpdated = new Subject<string>();\n\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\n    @Input('ESC') isEsc = true;\n    @Input() enableKeyboardInput: boolean;\n    @Input() preventOverlayClick: boolean;\n    @Input() disableAnimation: boolean;\n    @Input() appendToInput: boolean;\n    @Input() hoursOnly = false;\n    @Input() defaultTime: string;\n    @Input() timepickerClass: string;\n    @Input() theme: NgxMaterialTimepickerTheme;\n    @Input() min: DateTime;\n    @Input() max: DateTime;\n    /**\n     * @deprecated Since version 5.1.1. Will be deleted on version 6.0.0. Use @Input() theme instead\n     */\n    @Input()\n    set ngxMaterialTimepickerTheme(theme: NgxMaterialTimepickerTheme) {\n        console.warn(`'ngxMaterialTimepickerTheme' is deprecated. Use 'theme' instead`);\n        this._ngxMaterialTimepickerTheme = theme;\n    }\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n    }\n\n    get format(): number {\n        return this.timepickerInput ? this.timepickerInput.format : this._format;\n    }\n\n    @Input()\n    set minutesGap(gap: number) {\n        if (gap == null) {\n            return;\n        }\n        gap = Math.floor(gap);\n        this._minutesGap = gap <= 59 ? gap : 1;\n    }\n\n    get minutesGap(): number {\n        return this._minutesGap;\n    }\n\n    @Output() timeSet = new EventEmitter<string>();\n    @Output() opened = new EventEmitter<null>();\n    @Output() closed = new EventEmitter<null>();\n    @Output() hourSelected = new EventEmitter<number>();\n    @Output() timeChanged = new EventEmitter<string>();\n\n    private _minutesGap: number;\n    private _format: number;\n    private _ngxMaterialTimepickerTheme: NgxMaterialTimepickerTheme;\n    private timepickerInput: TimepickerDirective;\n    private unsubscribe = new Subject();\n\n    constructor(private eventService: NgxMaterialTimepickerEventService,\n                private domService: DomService) {\n    }\n\n    get minTime(): DateTime {\n        return this.timepickerInput ? (this.timepickerInput.min as DateTime) : this.min;\n    }\n\n    get maxTime(): DateTime {\n        return this.timepickerInput ? (this.timepickerInput.max as DateTime) : this.max;\n    }\n\n    get disabled(): boolean {\n        return this.timepickerInput && this.timepickerInput.disabled;\n    }\n\n    get time(): string {\n        return this.timepickerInput && this.timepickerInput.value;\n    }\n\n    get inputElement(): any {\n        return this.timepickerInput && this.timepickerInput.element;\n    }\n\n    /***\n     * Register an input with this timepicker.\n     * input - The timepicker input to register with this timepicker\n     */\n    registerInput(input: TimepickerDirective): void {\n        if (this.timepickerInput) {\n            throw Error('A Timepicker can only be associated with a single input.');\n        }\n        this.timepickerInput = input;\n    }\n\n    open(): void {\n        this.domService.appendTimepickerToBody(NgxMaterialTimepickerContainerComponent, {\n            timepickerBaseRef: this,\n            time: this.time,\n            defaultTime: this.defaultTime,\n            maxTime: this.maxTime,\n            minTime: this.minTime,\n            format: this.format,\n            minutesGap: this.minutesGap,\n            disableAnimation: this.disableAnimation,\n            cancelBtnTmpl: this.cancelBtnTmpl,\n            confirmBtnTmpl: this.confirmBtnTmpl,\n            editableHintTmpl: this.editableHintTmpl,\n            disabled: this.disabled,\n            enableKeyboardInput: this.enableKeyboardInput,\n            preventOverlayClick: this.preventOverlayClick,\n            appendToInput: this.appendToInput,\n            hoursOnly: this.hoursOnly,\n            theme: this.theme || this._ngxMaterialTimepickerTheme,\n            timepickerClass: this.timepickerClass,\n            inputElement: this.inputElement\n        });\n        this.opened.next();\n        this.subscribeToEvents();\n    }\n\n    close(): void {\n        this.domService.destroyTimepicker();\n        this.closed.next();\n        this.unsubscribeFromEvents();\n    }\n\n    updateTime(time: string): void {\n        this.timeUpdated.next(time);\n    }\n\n    private subscribeToEvents(): void {\n        merge(this.eventService.backdropClick,\n            this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc)))\n            .pipe(takeUntil(this.unsubscribe))\n            .subscribe(() => this.close());\n    }\n\n    private unsubscribeFromEvents(): void {\n        this.unsubscribe.next();\n        this.unsubscribe.complete();\n    }\n}\n","import {Directive} from '@angular/core';\n\n/* To override a default toggle icon */\n@Directive({selector: '[ngxMaterialTimepickerToggleIcon]'})\n\nexport class NgxMaterialTimepickerToggleIconDirective {\n}\n","import {Component, ContentChild, Input} from '@angular/core';\nimport {NgxMaterialTimepickerToggleIconDirective} from '../../directives/ngx-material-timepicker-toggle-icon.directive';\nimport {NgxMaterialTimepickerComponent} from '../../ngx-material-timepicker.component';\n\n@Component({\n    selector: 'ngx-material-timepicker-toggle',\n    templateUrl: 'ngx-material-timepicker-toggle.component.html',\n    styleUrls: ['ngx-material-timepicker-toggle.component.scss']\n})\n\nexport class NgxMaterialTimepickerToggleComponent {\n\n    @Input('for') timepicker: NgxMaterialTimepickerComponent;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    private _disabled: boolean;\n\n    @ContentChild(NgxMaterialTimepickerToggleIconDirective, {static: true}) customIcon: NgxMaterialTimepickerToggleIconDirective;\n\n    open(event): void {\n        if (this.timepicker) {\n            this.timepicker.open();\n            event.stopPropagation();\n        }\n    }\n}\n","import { Directive, ElementRef, HostListener, Inject, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { NgxMaterialTimepickerComponent } from '../ngx-material-timepicker.component';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { TimeAdapter } from '../services/time-adapter';\nimport { DateTime } from 'luxon';\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\n\n@Directive({\n    selector: '[ngxTimepicker]',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: TimepickerDirective,\n            multi: true\n        }\n    ],\n    host: {\n        '[disabled]': 'disabled',\n        '(change)': 'updateValue($event.target.value)',\n        '(blur)': 'onTouched()',\n    },\n})\nexport class TimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n        const isDynamicallyChanged = value && (this.previousFormat && this.previousFormat !== this._format);\n\n        if (isDynamicallyChanged) {\n            this.value = this._value;\n            this._timepicker.updateTime(this._value);\n        }\n        this.previousFormat = this._format;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n    private _format = 12;\n\n    @Input()\n    set min(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._min = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\n            return;\n        }\n        this._min = value;\n    }\n\n    get min(): string | DateTime {\n        return this._min;\n    }\n\n    private _min: string | DateTime;\n\n    @Input()\n    set max(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._max = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\n            return;\n        }\n        this._max = value;\n    }\n\n    get max(): string | DateTime {\n        return this._max;\n    }\n\n    private _max: string | DateTime;\n\n    @Input('ngxTimepicker')\n    set timepicker(picker: NgxMaterialTimepickerComponent) {\n        this.registerTimepicker(picker);\n    }\n\n    private _timepicker: NgxMaterialTimepickerComponent;\n\n    @Input()\n    set value(value: string) {\n        if (!value) {\n            this._value = '';\n            this.updateInputValue();\n            return;\n        }\n        const time = TimeAdapter.formatTime(value, {locale: this.locale, format: this.format});\n        const isAvailable = TimeAdapter.isTimeAvailable(\n            time,\n            <DateTime>this._min,\n            <DateTime>this._max,\n            'minutes',\n            this._timepicker.minutesGap,\n            this._format\n        );\n\n        if (isAvailable) {\n            this._value = time;\n            this.updateInputValue();\n            return;\n        }\n        console.warn('Selected time doesn\\'t match min or max value');\n    }\n\n    get value(): string {\n        if (!this._value) {\n            return '';\n        }\n        return TimeAdapter.toLocaleTimeString(this._value, {format: this.format, locale: this.locale});\n    }\n\n    private _value = '';\n\n    @Input() disabled: boolean;\n    @Input() disableClick: boolean;\n\n    private timepickerSubscriptions: Subscription[] = [];\n    private previousFormat: number;\n\n    onTouched = () => {\n    }\n\n    private onChange: (value: any) => void = () => {\n    }\n\n    constructor(private elementRef: ElementRef,\n                @Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    get element(): any {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    private set defaultTime(time: string) {\n        this._timepicker.defaultTime = TimeAdapter.formatTime(time, {locale: this.locale, format: this.format});\n    }\n\n    updateValue(value: string) {\n        this.value = value;\n        this.onChange(value);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['value'] && changes['value'].currentValue) {\n            this.defaultTime = changes['value'].currentValue;\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event) {\n        if (!this.disableClick) {\n            this._timepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    writeValue(value: string): void {\n        this.value = value;\n        if (value) {\n            this.defaultTime = value;\n        }\n    }\n\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    ngOnDestroy() {\n        this.timepickerSubscriptions.forEach(s => s.unsubscribe());\n    }\n\n    private registerTimepicker(picker: NgxMaterialTimepickerComponent): void {\n        if (picker) {\n            this._timepicker = picker;\n            this._timepicker.registerInput(this);\n            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time: string) => {\n                this.value = time;\n                this.onChange(this.value);\n                this.onTouched();\n                this.defaultTime = this._value;\n            }));\n        } else {\n            throw new Error('NgxMaterialTimepickerComponent is not defined.' +\n                ' Please make sure you passed the timepicker to ngxTimepicker directive');\n        }\n    }\n\n    private updateInputValue(): void {\n        this.elementRef.nativeElement.value = this.value;\n    }\n\n}\n\n","import {AfterViewInit, Directive, ElementRef, Input} from '@angular/core';\nimport {NgxMaterialTimepickerTheme} from '../models/ngx-material-timepicker-theme.interface';\n\n@Directive({selector: '[ngxMaterialTimepickerTheme]'})\nexport class NgxMaterialTimepickerThemeDirective implements AfterViewInit {\n\n    @Input('ngxMaterialTimepickerTheme') theme: NgxMaterialTimepickerTheme;\n\n    private element: HTMLElement;\n\n    constructor(elementRef: ElementRef) {\n        this.element = elementRef.nativeElement;\n    }\n\n    ngAfterViewInit() {\n        if (this.theme) {\n            this.setTheme(this.theme);\n        }\n    }\n\n    private setTheme(theme): void {\n        for (const val in theme) {\n            if (theme.hasOwnProperty(val)) {\n                if (typeof theme[val] === 'string') {\n                    for (const prop in theme) {\n                        if (theme.hasOwnProperty(prop)) {\n                            this.element.style.setProperty(`--${camelCaseToDash(prop)}`, theme[prop]);\n                        }\n                    }\n                    return;\n                }\n                this.setTheme(theme[val]);\n            }\n\n        }\n    }\n}\n\nfunction camelCaseToDash(myStr) {\n    return myStr.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n","import { ClockFaceTime } from '../models/clock-face-time.interface';\nimport { TimeAdapter } from '../services/time-adapter';\nimport { TimeFormat } from '../models/time-format.enum';\nimport { DisabledTimeConfig } from '../models/disabled-time-config.interface';\nimport { DateTime } from 'luxon';\n\n// @dynamic\nexport class TimepickerTimeUtils {\n\n  static  getHours(format: number): ClockFaceTime[] {\n        return Array(format).fill(1).map((v, i) => {\n            const angleStep = 30;\n            const time = v + i;\n            const angle = angleStep * time;\n            return {time: time === 24 ? 0 : time, angle};\n        });\n    }\n\n  static  disableHours(hours: ClockFaceTime[], config: DisabledTimeConfig): ClockFaceTime[] {\n        if (config.min || config.max) {\n\n            return hours.map(value => {\n                const hour = config.format === 24 ? value.time : TimeAdapter.formatHour(value.time, config.format, config.period);\n                const currentTime = DateTime.fromObject({hour}).toFormat(TimeFormat.TWELVE);\n\n                return {\n                    ...value,\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours')\n                };\n            });\n        }\n        return hours;\n    }\n\n   static getMinutes(gap = 1): ClockFaceTime[] {\n        const minutesCount = 60;\n        const angleStep = 360 / minutesCount;\n        const minutes = [];\n\n        for (let i = 0; i < minutesCount; i++) {\n            const angle = angleStep * i;\n            if (i % gap === 0) {\n                minutes.push({time: i, angle: angle !== 0 ? angle : 360});\n            }\n        }\n        return minutes;\n    }\n\n    static disableMinutes(minutes: ClockFaceTime[], selectedHour: number, config: DisabledTimeConfig) {\n        if (config.min || config.max) {\n\n            const hour = TimeAdapter.formatHour(selectedHour, config.format, config.period);\n\n            return minutes.map(value => {\n                const currentTime = DateTime.fromObject({hour, minute: value.time}).toFormat(TimeFormat.TWELVE);\n\n                return {\n                    ...value,\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes')\n                };\n            });\n        }\n        return minutes;\n    }\n\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\nimport { DateTime } from 'luxon';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n\nexport class NgxMaterialTimepickerHoursFace {\n\n    @Input() selectedHour: ClockFaceTime;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() format: number;\n\n    @Output() hourChange = new EventEmitter<ClockFaceTime>();\n    @Output() hourSelected = new EventEmitter<number>();\n\n    hoursList: ClockFaceTime[] = [];\n\n    protected constructor(format: number) {\n        this.hoursList = TimepickerTimeUtils.getHours(format);\n    }\n\n    onTimeSelected(time: number): void {\n        this.hourSelected.next(time);\n    }\n}\n","import { AfterContentInit, ChangeDetectionStrategy, Component } from '@angular/core';\nimport { NgxMaterialTimepickerHoursFace } from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n@Component({\n    selector: 'ngx-material-timepicker-24-hours-face',\n    templateUrl: 'ngx-material-timepicker-24-hours-face.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements AfterContentInit {\n\n    constructor() {\n        super(24);\n    }\n\n    ngAfterContentInit() {\n        this.hoursList = TimepickerTimeUtils.disableHours(this.hoursList, {\n            min: this.minTime,\n            max: this.maxTime,\n            format: this.format\n        });\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { NgxMaterialTimepickerHoursFace } from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n\n@Component({\n    selector: 'ngx-material-timepicker-12-hours-face',\n    templateUrl: 'ngx-material-timepicker-12-hours-face.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements OnChanges {\n\n    @Input() period: TimePeriod;\n\n    constructor() {\n        super(12);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue) {\n            this.hoursList = TimepickerTimeUtils.disableHours(this.hoursList, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { DateTime } from 'luxon';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n\n@Component({\n    selector: 'ngx-material-timepicker-minutes-face',\n    templateUrl: './ngx-material-timepicker-minutes-face.component.html'\n})\nexport class NgxMaterialTimepickerMinutesFaceComponent implements OnChanges {\n\n    minutesList: ClockFaceTime[] = [];\n    timeUnit = TimeUnit;\n\n    @Input() selectedMinute: ClockFaceTime;\n    @Input() selectedHour: number;\n    @Input() period: TimePeriod;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() format: number;\n    @Input() minutesGap: number;\n\n    @Output() minuteChange = new EventEmitter<ClockFaceTime>();\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue) {\n            const minutes = TimepickerTimeUtils.getMinutes(this.minutesGap);\n            this.minutesList = TimepickerTimeUtils.disableMinutes(minutes, this.selectedHour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\n\nconst CLOCK_HAND_STYLES = {\n    small: {\n        height: '75px',\n        top: 'calc(50% - 75px)'\n    },\n    large: {\n        height: '103px',\n        top: 'calc(50% - 103px)'\n    }\n};\n\n@Component({\n    selector: 'ngx-material-timepicker-face',\n    templateUrl: './ngx-material-timepicker-face.component.html',\n    styleUrls: ['./ngx-material-timepicker-face.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\n\n    timeUnit = TimeUnit;\n\n    isClockFaceDisabled: boolean;\n    innerClockFaceSize = 85;\n\n    @Input() faceTime: ClockFaceTime[];\n    @Input() selectedTime: ClockFaceTime;\n    @Input() unit: TimeUnit;\n    @Input() format: number;\n    @Input() minutesGap: number;\n\n    @Output() timeChange = new EventEmitter<ClockFaceTime>();\n    @Output() timeSelected = new EventEmitter<number>();\n\n    @ViewChild('clockFace', {static: true}) clockFace: ElementRef;\n    @ViewChild('clockHand', {static: true}) clockHand: ElementRef;\n\n    private isStarted: boolean;\n    private touchStartHandler: () => any;\n    private touchEndHandler: () => any;\n\n    ngAfterViewInit() {\n        this.setClockHandPosition();\n        this.addTouchEvents();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const faceTimeChanges = changes['faceTime'];\n        const selectedTimeChanges = changes['selectedTime'];\n\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\n            /* Set time according to passed an input value */\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\n        }\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\n            this.setClockHandPosition();\n        }\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\n            setTimeout(() => this.selectAvailableTime());\n        }\n    }\n\n\n    trackByTime(_, time: ClockFaceTime): string | number {\n        return time.time;\n    }\n\n    @HostListener('mousedown', ['$event'])\n    onMousedown(e: any) {\n        e.preventDefault();\n        this.isStarted = true;\n    }\n\n    @HostListener('click', ['$event'])\n    @HostListener('touchmove', ['$event.changedTouches[0]'])\n    @HostListener('touchend', ['$event.changedTouches[0]'])\n    @HostListener('mousemove', ['$event'])\n    selectTime(e: any): void {\n\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\n            return;\n        }\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\n\n        /* Get x0 and y0 of the circle */\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\n        /* Counting the arctangent and convert it to from radian to deg */\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\n        /* Get angle according to quadrant */\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\n        /* Check if selected time from the inner clock face (24 hours format only) */\n        const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\n        /* Round angle according to angle step */\n        const angleStep = this.unit === TimeUnit.MINUTE ? (6 * (this.minutesGap || 1)) : 30;\n        const roundedAngle = roundAngle(circleAngle, angleStep);\n        const angle = (roundedAngle || 360) + (isInnerClockChosen ? 360 : 0);\n\n        const selectedTime = this.faceTime.find(val => val.angle === angle);\n\n        if (selectedTime && !selectedTime.disabled) {\n            this.timeChange.next(selectedTime);\n\n            /* To let know whether user ended interaction with clock face */\n            if (!this.isStarted) {\n                this.timeSelected.next(selectedTime.time);\n            }\n        }\n\n    }\n\n    @HostListener('mouseup', ['$event'])\n    onMouseup(e: any) {\n        e.preventDefault();\n        this.isStarted = false;\n    }\n\n    ngOnDestroy() {\n        this.removeTouchEvents();\n    }\n\n    private addTouchEvents(): void {\n        this.touchStartHandler = this.onMousedown.bind(this);\n        this.touchEndHandler = this.onMouseup.bind(this);\n\n        this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\n        this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\n    }\n\n    private removeTouchEvents(): void {\n        this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\n        this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\n    }\n\n    private setClockHandPosition(): void {\n        if (this.format === 24) {\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\n                this.decreaseClockHand();\n            } else {\n                this.increaseClockHand();\n            }\n        }\n\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\n    }\n\n    private selectAvailableTime(): void {\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\n\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\n            const availableTime = this.faceTime.find(time => !time.disabled);\n\n            this.timeChange.next(availableTime);\n        }\n    }\n\n    private isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\n        /* Detect whether time from the inner clock face or not (24 format only) */\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\n    }\n\n    private decreaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\n    }\n\n    private increaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\n    }\n}\n\nfunction roundAngle(angle: number, step: number): number {\n    return Math.round(angle / step) * step;\n}\n\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\n    if (y > y0 && x >= x0) {// II quarter\n        return 180 - currentAngle;\n    } else if (y > y0 && x < x0) {// III quarter\n        return 180 + currentAngle;\n    } else if (y < y0 && x < x0) {// IV quarter\n        return 360 - currentAngle;\n    } else {// I quarter\n        return currentAngle;\n    }\n}\n","import {Component} from '@angular/core';\n\n@Component({\n    selector: 'ngx-material-timepicker-button',\n    templateUrl: './ngx-material-timepicker-button.component.html',\n    styleUrls: ['./ngx-material-timepicker-button.component.scss']\n})\nexport class NgxMaterialTimepickerButtonComponent {\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges,\n    TemplateRef\n} from '@angular/core';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { DateTime, Info } from 'luxon';\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n@Component({\n    selector: 'ngx-material-timepicker-dial',\n    templateUrl: 'ngx-material-timepicker-dial.component.html',\n    styleUrls: ['ngx-material-timepicker-dial.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMaterialTimepickerDialComponent implements OnChanges {\n\n    timeUnit = TimeUnit;\n\n    hours: ClockFaceTime[];\n    minutes: ClockFaceTime[];\n    meridiems = Info.meridiems({locale: this.locale});\n\n    isHintVisible: boolean;\n\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() hour: number | string;\n    @Input() minute: number | string;\n    @Input() format: number;\n    @Input() period: TimePeriod;\n    @Input() activeTimeUnit: TimeUnit;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() isEditable: boolean;\n    @Input() minutesGap: number;\n    @Input() hoursOnly: boolean;\n\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\n    @Output() hourChanged = new EventEmitter<ClockFaceTime>();\n    @Output() minuteChanged = new EventEmitter<ClockFaceTime>();\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue\n            || changes['format'] && changes['format'].currentValue) {\n            const hours = TimepickerTimeUtils.getHours(this.format);\n\n            this.hours = TimepickerTimeUtils.disableHours(hours, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n        if (changes['period'] && changes['period'].currentValue\n            || changes['hour'] && changes['hour'].currentValue) {\n            const minutes = TimepickerTimeUtils.getMinutes(this.minutesGap);\n\n            this.minutes = TimepickerTimeUtils.disableMinutes(minutes, +this.hour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n\n    changeTimeUnit(unit: TimeUnit): void {\n        this.timeUnitChanged.next(unit);\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.periodChanged.next(period);\n    }\n\n    changeHour(hour: ClockFaceTime): void {\n        this.hourChanged.next(hour);\n    }\n\n    changeMinute(minute: ClockFaceTime): void {\n        this.minuteChanged.next(minute);\n    }\n\n    showHint(): void {\n        this.isHintVisible = true;\n    }\n\n    hideHint(): void {\n        this.isHintVisible = false;\n    }\n}\n","import { Inject, Injectable, Pipe, PipeTransform } from '@angular/core';\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime } from 'luxon';\n\ntype TimeMeasure = 'hour' | 'minute';\n\n@Pipe({\n    name: 'timeParser'\n})\n@Injectable()\nexport class TimeParserPipe implements PipeTransform {\n\n    private readonly numberingSystem: string;\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n        this.numberingSystem = DateTime.local().setLocale(this.locale).resolvedLocaleOpts().numberingSystem;\n    }\n\n    transform(time: string | number, timeUnit = TimeUnit.HOUR): number | string {\n        if (time == null || time === '') {\n            return '';\n        }\n\n        if (!isNaN(+time)) {\n            return time;\n        }\n\n        if (timeUnit === TimeUnit.MINUTE) {\n            return this.parseTime(time, 'm', 'minute');\n        }\n\n        return this.parseTime(time, 'H', 'hour');\n\n    }\n\n    private parseTime(time: string | number, format: string, timeMeasure: TimeMeasure): number {\n        const parsedTime = DateTime.fromFormat(String(time), format, {numberingSystem: this.numberingSystem})[timeMeasure];\n\n        if (!isNaN(parsedTime)) {\n            return parsedTime;\n        }\n\n        throw new Error(`Cannot parse time - ${time}`);\n    }\n\n}\n","/* tslint:disable:triple-equals */\nimport {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\nimport {TimeUnit} from '../../models/time-unit.enum';\nimport {isDigit} from '../../utils/timepicker.utils';\nimport {TimeParserPipe} from '../../pipes/time-parser.pipe';\n\n@Component({\n    selector: 'ngx-material-timepicker-dial-control',\n    templateUrl: 'ngx-material-timepicker-dial-control.component.html',\n    styleUrls: ['ngx-material-timepicker-dial-control.component.scss'],\n    providers: [TimeParserPipe]\n})\nexport class NgxMaterialTimepickerDialControlComponent {\n\n    previousTime: number | string;\n\n    @Input() timeList: ClockFaceTime[];\n    @Input() timeUnit: TimeUnit;\n    @Input() time: string;\n    @Input() isActive: boolean;\n    @Input() isEditable: boolean;\n    @Input() minutesGap: number;\n    @Input() disabled: boolean;\n\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\n    @Output() timeChanged = new EventEmitter<ClockFaceTime>();\n    @Output() focused = new EventEmitter<null>();\n    @Output() unfocused = new EventEmitter<null>();\n\n    constructor(private timeParserPipe: TimeParserPipe) {\n    }\n\n    private get selectedTime(): ClockFaceTime {\n        if (!!this.time) {\n            return this.timeList.find(t => t.time === +this.time);\n        }\n    }\n\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: TimeUnit): void {\n        event.preventDefault();\n        this.previousTime = this.time;\n        this.timeUnitChanged.next(unit);\n        this.focused.next();\n    }\n\n    updateTime(): void {\n        const time = this.selectedTime;\n        if (time) {\n            this.timeChanged.next(time);\n            this.previousTime = time.time;\n        }\n    }\n\n    changeTimeByKeyboard(e: any): void {\n        const char = String.fromCharCode(e.keyCode);\n\n        if (isTimeDisabledToChange(this.time, char, this.timeList)) {\n            e.preventDefault();\n        }\n    }\n\n    onKeydown(e: any): void {\n        if (!isDigit(e)) {\n            e.preventDefault();\n        } else {\n            this.changeTimeByArrow(e.keyCode);\n        }\n    }\n\n    onModelChange(value: string): void {\n        this.time = this.timeParserPipe.transform(value, this.timeUnit).toString();\n    }\n\n    private changeTimeByArrow(keyCode: number): void {\n        const ARROW_UP = 38;\n        const ARROW_DOWN = 40;\n        let time: string;\n\n        if (keyCode === ARROW_UP) {\n            time = String(+this.time + (this.minutesGap || 1));\n        } else if (keyCode === ARROW_DOWN) {\n            time = String(+this.time - (this.minutesGap || 1));\n        }\n\n        if (!isTimeUnavailable(time, this.timeList)) {\n            this.time = time;\n            this.updateTime();\n        }\n    }\n\n}\n\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: ClockFaceTime[]): boolean {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n        return isTimeUnavailable(time, timeList);\n    }\n}\n\nfunction isTimeUnavailable(time: string, timeList: ClockFaceTime[]): boolean {\n    const selectedTime = timeList.find(value => value.time === +time);\n    return !selectedTime || (selectedTime && selectedTime.disabled);\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { animate, sequence, style, transition, trigger } from '@angular/animations';\nimport { DateTime } from 'luxon';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n@Component({\n    selector: 'ngx-material-timepicker-period',\n    templateUrl: 'ngx-material-timepicker-period.component.html',\n    styleUrls: ['ngx-material-timepicker-period.component.scss'],\n    animations: [\n        trigger('scaleInOut', [\n            transition(':enter', [\n                style({transform: 'scale(0)'}),\n                animate('.2s', style({transform: 'scale(1)'})),\n                sequence([\n                    animate('3s', style({opacity: 1})),\n                    animate('.3s', style({opacity: 0}))\n                ])\n            ])\n        ])\n    ]\n})\nexport class NgxMaterialTimepickerPeriodComponent {\n\n    timePeriod = TimePeriod;\n    isPeriodAvailable = true;\n\n    @Input() selectedPeriod: TimePeriod;\n    @Input() format: number;\n    @Input() activeTimeUnit: TimeUnit;\n    @Input() hours: ClockFaceTime[];\n    @Input() minutes: ClockFaceTime[];\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() selectedHour: number | string;\n    @Input() meridiems: string[];\n\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\n\n    changePeriod(period: TimePeriod): void {\n        this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);\n        if (this.isPeriodAvailable) {\n            this.periodChanged.next(period);\n        }\n    }\n\n    animationDone(): void {\n        this.isPeriodAvailable = true;\n    }\n\n    private isSwitchPeriodAvailable(period: TimePeriod): boolean {\n        const time = this.getDisabledTimeByPeriod(period);\n        return !time.every(t => t.disabled);\n    }\n\n    private getDisabledTimeByPeriod(period: TimePeriod): ClockFaceTime[] {\n        switch (this.activeTimeUnit) {\n            case TimeUnit.HOUR:\n                return TimepickerTimeUtils.disableHours(this.hours, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            case TimeUnit.MINUTE:\n                return TimepickerTimeUtils.disableMinutes(this.minutes, +this.selectedHour, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            default:\n                throw new Error('no such TimeUnit');\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime } from 'luxon';\n\n@Pipe({\n    name: 'timeFormatter'\n})\nexport class TimeFormatterPipe implements PipeTransform {\n\n    transform(time: number | string, timeUnit: TimeUnit): any {\n        if (time == null || time === '') {\n            return time;\n        }\n        switch (timeUnit) {\n            case TimeUnit.HOUR:\n                return DateTime.fromObject({hour: +time}).toFormat('HH');\n            case TimeUnit.MINUTE:\n                return DateTime.fromObject({minute: +time}).toFormat('mm');\n            default:\n                throw new Error('no such time unit');\n        }\n    }\n\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport {NgxMaterialTimepickerEventService} from '../services/ngx-material-timepicker-event.service';\n\n@Directive({\n    selector: '[overlay]'\n})\nexport class OverlayDirective {\n\n    @Input('overlay') preventClick: boolean;\n\n    constructor(private eventService: NgxMaterialTimepickerEventService) {\n    }\n\n\n    @HostListener('click', ['$event'])\n    onClick(e: any) {\n        if (!this.preventClick) {\n            this.eventService.dispatchEvent(e);\n        }\n        e.preventDefault();\n    }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n    name: 'minutesFormatter'\n})\nexport class MinutesFormatterPipe implements PipeTransform {\n\n    transform(minute: number, gap = 5): number | string {\n        if (!minute) {\n            return minute;\n        }\n\n        return minute % gap === 0 ? minute : '';\n    }\n\n}\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\n@Directive({\n    selector: '[timepickerAutofocus]'\n})\nexport class AutofocusDirective implements OnChanges, OnDestroy {\n\n    @Input('timepickerAutofocus') isFocusActive: boolean;\n\n    private activeElement: HTMLElement;\n\n    constructor(private element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\n        this.activeElement = this.document.activeElement;\n    }\n\n    ngOnChanges() {\n        if (this.isFocusActive) {\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n            setTimeout(() => this.element.nativeElement.focus({ preventScroll: true }));\n        }\n    }\n\n    ngOnDestroy() {\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n        setTimeout(() => this.activeElement.focus({ preventScroll: true }));\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, OnDestroy, OnInit, Output, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { NgxMaterialTimepickerService } from '../../services/ngx-material-timepicker.service';\nimport { Observable, Subject } from 'rxjs';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { NgxMaterialTimepickerTheme } from '../../models/ngx-material-timepicker-theme.interface';\nimport { TimeAdapter } from '../../services/time-adapter';\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\nimport { DateTime } from 'luxon';\nimport { distinctUntilChanged, map, takeUntil, tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'ngx-timepicker-field',\n    templateUrl: './ngx-timepicker-field.component.html',\n    styleUrls: ['./ngx-timepicker-field.component.scss'],\n    providers: [\n        NgxMaterialTimepickerService,\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: NgxTimepickerFieldComponent,\n            multi: true\n        }\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxTimepickerFieldComponent implements OnInit, OnDestroy, ControlValueAccessor {\n\n    period: TimePeriod;\n    hour$: Observable<ClockFaceTime>;\n    minute$: Observable<ClockFaceTime>;\n\n    minHour = 1;\n    maxHour = 12;\n\n    timeUnit = TimeUnit;\n    timepickerTime: string;\n\n    hoursList: ClockFaceTime[];\n    minutesList: ClockFaceTime[];\n\n    isTimeRangeSet: boolean;\n    isChangePeriodDisabled: boolean;\n\n    @Input() disabled: boolean;\n    @Input() toggleIcon: TemplateRef<HTMLObjectElement>;\n    @Input() buttonAlign: 'right' | 'left' = 'right';\n    @Input() clockTheme: NgxMaterialTimepickerTheme;\n    @Input() controlOnly: boolean;\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n        this.minHour = this._format === 12 ? 1 : 0;\n        this.maxHour = this._format === 12 ? 12 : 23;\n        this.hoursList = TimepickerTimeUtils.getHours(this._format);\n        const isDynamicallyChanged = value && (this.previousFormat && this.previousFormat !== this._format);\n\n        if (isDynamicallyChanged) {\n            this.updateTime(this.timepickerTime);\n        }\n        this.previousFormat = this._format;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n    @Input()\n    set min(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._min = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\n            return;\n        }\n        this._min = value;\n    }\n\n    get min(): string | DateTime {\n        return this._min;\n    }\n\n    @Input()\n    set max(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._max = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\n            return;\n        }\n        this._max = value;\n    }\n\n    get max(): string | DateTime {\n        return this._max;\n    }\n\n    @Input()\n    set defaultTime(val: string) {\n        this._defaultTime = val;\n        this.isDefaultTime = !!val;\n    }\n\n    get defaultTime(): string {\n        return this._defaultTime;\n    }\n\n    @Output() timeChanged = new EventEmitter<string>();\n\n    private _defaultTime: string;\n    private _format = 12;\n    private _min: string | DateTime;\n    private _max: string | DateTime;\n    private previousFormat: number;\n\n    private unsubscribe$ = new Subject();\n\n    private isFirstTimeChange = true;\n    private isDefaultTime: boolean;\n    private selectedHour: number;\n\n    private onChange: (value: string) => void = () => {\n    }\n\n    constructor(private timepickerService: NgxMaterialTimepickerService,\n                @Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    ngOnInit() {\n        this.initTime(this.defaultTime);\n\n        this.hoursList = TimepickerTimeUtils.getHours(this._format);\n        this.minutesList = TimepickerTimeUtils.getMinutes();\n        this.isTimeRangeSet = !!(this.min || this.max);\n\n        this.hour$ = this.timepickerService.selectedHour.pipe(\n            tap((clockTime: ClockFaceTime) => this.selectedHour = clockTime.time),\n            map(this.changeDefaultTimeValue.bind(this)),\n            tap(() => this.isTimeRangeSet && this.updateAvailableMinutes())\n        ) as Observable<ClockFaceTime>;\n        this.minute$ = this.timepickerService.selectedMinute.pipe(\n            map(this.changeDefaultTimeValue.bind(this)),\n            tap(() => this.isFirstTimeChange = false)\n        ) as Observable<ClockFaceTime>;\n\n        if (this.format === 12) {\n            this.timepickerService.selectedPeriod.pipe(\n                distinctUntilChanged<TimePeriod>(),\n                tap((period: TimePeriod) => this.period = period),\n                tap(period => this.isChangePeriodDisabled = this.isPeriodDisabled(period)),\n                takeUntil(this.unsubscribe$)\n            ).subscribe(() => this.isTimeRangeSet && this.updateAvailableTime());\n        }\n\n    }\n\n    writeValue(val: string): void {\n        if (val) {\n            this.initTime(val);\n        } else {\n            this.resetTime();\n        }\n    }\n\n    registerOnTouched(fn: any): void {\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    changeHour(hour: number): void {\n        this.timepickerService.hour = this.hoursList.find(h => h.time === hour);\n        this.changeTime();\n    }\n\n    changeMinute(minute: number): void {\n        this.timepickerService.minute = this.minutesList.find(m => m.time === minute);\n        this.changeTime();\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.timepickerService.period = period;\n        this.changeTime();\n    }\n\n    onTimeSet(time: string): void {\n        this.updateTime(time);\n        this.emitLocalTimeChange(time);\n    }\n\n    ngOnDestroy(): void {\n        this.unsubscribe$.next();\n        this.unsubscribe$.complete();\n    }\n\n    private changeTime(): void {\n        const time = this.timepickerService.getFullTime(this.format);\n        this.timepickerTime = time;\n\n        this.emitLocalTimeChange(time);\n    }\n\n    private resetTime(): void {\n        this.timepickerService.hour = {angle: 0, time: null};\n        this.timepickerService.minute = {angle: 0, time: null};\n    }\n\n    private emitLocalTimeChange(time: string): void {\n        const localTime = TimeAdapter.toLocaleTimeString(time, {format: this.format, locale: this.locale});\n\n        this.onChange(localTime);\n        this.timeChanged.emit(localTime);\n    }\n\n    private changeDefaultTimeValue(clockFaceTime: ClockFaceTime): ClockFaceTime {\n        if (!this.isDefaultTime && this.isFirstTimeChange) {\n            return {...clockFaceTime, time: null};\n        }\n        return clockFaceTime;\n    }\n\n    private updateAvailableHours(): void {\n        this.hoursList = TimepickerTimeUtils.disableHours(this.hoursList, {\n            min: this.min as DateTime,\n            max: this.max as DateTime,\n            format: this.format,\n            period: this.period\n        });\n    }\n\n    private updateAvailableMinutes(): void {\n        this.minutesList = TimepickerTimeUtils.disableMinutes(this.minutesList, this.selectedHour, {\n            min: this.min as DateTime,\n            max: this.max as DateTime,\n            format: this.format,\n            period: this.period\n        });\n    }\n\n    private updateAvailableTime(): void {\n        this.updateAvailableHours();\n        if (this.selectedHour) {\n            this.updateAvailableMinutes();\n        }\n    }\n\n    private updateTime(time: string): void {\n        if (time) {\n            const formattedTime = TimeAdapter.formatTime(time, {locale: this.locale, format: this.format});\n            this.timepickerService.setDefaultTimeIfAvailable(formattedTime, this.min as DateTime, this.max as DateTime, this.format);\n            this.timepickerTime = formattedTime;\n        }\n    }\n\n    private initTime(time): void {\n        const isDefaultTimeAvailable = TimeAdapter\n            .isTimeAvailable(time, this.min as DateTime, this.max as DateTime, 'minutes', null, this.format);\n        if (!isDefaultTimeAvailable) {\n            if (this.min) {\n                this.updateTime(TimeAdapter.fromDateTimeToString(this.min as DateTime, this.format));\n                return;\n            }\n            if (this.max) {\n                this.updateTime(TimeAdapter.fromDateTimeToString(this.max as DateTime, this.format));\n                return;\n            }\n        }\n        this.updateTime(time);\n    }\n\n    private isPeriodDisabled(period): boolean {\n        return TimepickerTimeUtils.disableHours(TimepickerTimeUtils.getHours(12), {\n            min: this.min as DateTime,\n            max: this.max as DateTime,\n            format: 12,\n            period: period === TimePeriod.AM ? TimePeriod.PM : TimePeriod.AM\n        }).every(time => time.disabled);\n    }\n\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { isDigit } from '../../../utils/timepicker.utils';\nimport { TimeUnit } from '../../../models/time-unit.enum';\nimport { TimeParserPipe } from '../../../pipes/time-parser.pipe';\nimport { ClockFaceTime } from '../../../models/clock-face-time.interface';\n\n@Component({\n    selector: 'ngx-timepicker-time-control',\n    templateUrl: './ngx-timepicker-time-control.component.html',\n    styleUrls: ['./ngx-timepicker-time-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TimeParserPipe]\n})\n\nexport class NgxTimepickerTimeControlComponent implements OnChanges {\n\n    @Input() time: number;\n    @Input() min: number;\n    @Input() max: number;\n    @Input() placeholder: string;\n    @Input() timeUnit: TimeUnit;\n    @Input() disabled: boolean;\n    @Input() timeList: ClockFaceTime[];\n    @Input() preventTyping: boolean;\n\n    @Output() timeChanged = new EventEmitter<number>();\n\n    isFocused: boolean;\n\n    private previousTime: number;\n\n    constructor(private timeParser: TimeParserPipe) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.timeList && this.time != null) {\n            if (this.isSelectedTimeDisabled(this.time)) {\n                this.setAvailableTime();\n            }\n        }\n    }\n\n    changeTime(event: any): void {\n        event.stopPropagation();\n\n        const char = String.fromCharCode(event.keyCode);\n        const time = concatTime(String(this.time), char);\n\n        this.changeTimeIfValid(time);\n    }\n\n    onKeydown(event: any): void {\n        event.stopPropagation();\n\n        if (!isDigit(event)) {\n            event.preventDefault();\n        }\n\n        switch (event.key) {\n            case 'ArrowUp':\n                this.increase();\n                break;\n            case 'ArrowDown':\n                this.decrease();\n                break;\n        }\n\n        if (this.preventTyping && event.key !== 'Tab') {\n            event.preventDefault();\n        }\n    }\n\n    increase(): void {\n        if (!this.disabled) {\n            let nextTime = +this.time + 1;\n\n            if (nextTime > this.max) {\n                nextTime = this.min;\n            }\n\n            if (this.isSelectedTimeDisabled(nextTime)) {\n                nextTime = this.getAvailableTime(nextTime, this.getNextAvailableTime.bind(this));\n            }\n\n            if (nextTime !== this.time) {\n                this.timeChanged.emit(nextTime);\n            }\n        }\n    }\n\n    decrease(): void {\n        if (!this.disabled) {\n            let previousTime = +this.time - 1;\n\n            if (previousTime < this.min) {\n                previousTime = this.max;\n            }\n\n            if (this.isSelectedTimeDisabled(previousTime)) {\n                previousTime = this.getAvailableTime(previousTime, this.getPrevAvailableTime.bind(this));\n            }\n\n            if (previousTime !== this.time) {\n                this.timeChanged.emit(previousTime);\n            }\n        }\n    }\n\n    onFocus(): void {\n        this.isFocused = true;\n        this.previousTime = this.time;\n    }\n\n    onBlur(): void {\n        this.isFocused = false;\n\n        if (this.previousTime !== this.time) {\n            this.changeTimeIfValid(+this.time);\n        }\n    }\n\n    onModelChange(value: string): void {\n        this.time = +this.timeParser.transform(value, this.timeUnit);\n    }\n\n    private changeTimeIfValid(value: number | undefined) {\n        if (!isNaN(value)) {\n            this.time = value;\n\n            if (this.time > this.max) {\n                const timeString = String(value);\n                this.time = +timeString[timeString.length - 1];\n            }\n\n            if (this.time < this.min) {\n                this.time = this.min;\n            }\n\n            this.timeChanged.emit(this.time);\n        }\n    }\n\n    private isSelectedTimeDisabled(time: number): boolean {\n        return this.timeList.find((faceTime: ClockFaceTime) => faceTime.time === time).disabled;\n    }\n\n    private getNextAvailableTime(index: number): number | undefined {\n        const timeCollection = this.timeList;\n        const maxValue = timeCollection.length;\n        for (let i = index + 1; i < maxValue; i++) {\n            const time = timeCollection[i];\n            if (!time.disabled) {\n                return time.time;\n            }\n        }\n    }\n\n    private getPrevAvailableTime(index: number): number | undefined {\n        for (let i = index; i >= 0; i--) {\n            const time = this.timeList[i];\n            if (!time.disabled) {\n                return time.time;\n            }\n        }\n    }\n\n    private getAvailableTime(currentTime: number, fn: (index: number) => number | undefined): number | undefined {\n        const currentTimeIndex = this.timeList.findIndex(time => time.time === currentTime);\n        const availableTime = fn(currentTimeIndex);\n\n        return availableTime != null ? availableTime : this.time;\n    }\n\n    private setAvailableTime(): void {\n        this.time = this.timeList.find(t => !t.disabled).time;\n        this.timeChanged.emit(this.time);\n    }\n}\n\nfunction concatTime(currentTime: string, nextTime: string): number {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n        return +time;\n    }\n}\n\n","import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { TimePeriod } from '../../../models/time-period.enum';\nimport { animate, style, transition, trigger } from '@angular/animations';\nimport { TIME_LOCALE } from '../../../tokens/time-locale.token';\nimport { Info } from 'luxon';\n\n@Component({\n    selector: 'ngx-timepicker-period-selector',\n    templateUrl: 'ngx-timepicker-period-selector.component.html',\n    styleUrls: ['./ngx-timepicker-period-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger('scaleInOut', [\n            transition(':enter', [\n                style({transform: 'scale(0)', opacity: 0}),\n                animate(200, style({transform: 'scale(1)', opacity: 1}))\n            ]),\n            transition(':leave', [\n                animate(200, style({transform: 'scale(0)', opacity: 0}))\n            ])\n        ])\n    ]\n})\n\nexport class NgxTimepickerPeriodSelectorComponent {\n\n    @Input() isOpened: boolean;\n    @Input() disabled: boolean;\n    @Input()\n    set selectedPeriod(period: TimePeriod) {\n        if (period) {\n            const periods = [TimePeriod.AM, TimePeriod.PM];\n            this.localizedPeriod = this.meridiems[periods.indexOf(period)];\n        }\n    }\n\n    @Output() periodSelected = new EventEmitter<TimePeriod>();\n\n    period = TimePeriod;\n    meridiems = Info.meridiems({locale: this.locale});\n    localizedPeriod: string;\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    open(): void {\n        if (!this.disabled) {\n            this.isOpened = true;\n        }\n    }\n\n    select(period: TimePeriod): void {\n        this.periodSelected.next(period);\n        this.isOpened = false;\n    }\n\n    backdropClick(): void {\n        this.isOpened = false;\n    }\n}\n","import { Inject, Pipe, PipeTransform } from '@angular/core';\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime } from 'luxon';\n\ntype TimeMeasure = 'hour' | 'minute';\n\n@Pipe({\n    name: 'timeLocalizer'\n})\nexport class TimeLocalizerPipe implements PipeTransform {\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    transform(time: number | string, timeUnit: TimeUnit, isKeyboardEnabled = false): string {\n        if (time == null || time === '') {\n            return '';\n        }\n\n        switch (timeUnit) {\n            case TimeUnit.HOUR: {\n                const format = (time === 0 || isKeyboardEnabled) ? 'HH' : 'H';\n                return this.formatTime('hour', time, format);\n            }\n            case TimeUnit.MINUTE:\n                return this.formatTime('minute', time, 'mm');\n            default:\n                throw new Error(`There is no Time Unit with type ${timeUnit}`);\n        }\n    }\n\n    private formatTime(timeMeasure: TimeMeasure, time: string | number, format: string): string {\n        try {\n            return DateTime.fromObject({[timeMeasure]: +time}).setLocale(this.locale).toFormat(format);\n        } catch {\n            throw new Error(`Cannot format provided time - ${time} to locale - ${this.locale}`);\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'activeHour'\n})\nexport class ActiveHourPipe implements PipeTransform {\n\n    transform(hour: number, currentHour: number, isClockFaceDisabled: boolean): boolean {\n        if (hour == null || isClockFaceDisabled) {\n            return false;\n        }\n\n        return hour === currentHour;\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'activeMinute'\n})\nexport class ActiveMinutePipe implements PipeTransform {\n\n    transform(minute: number, currentMinute: number, gap: number, isClockFaceDisabled: boolean): boolean {\n        if (minute == null || isClockFaceDisabled) {\n            return false;\n        }\n        const defaultGap = 5;\n\n        return ((currentMinute === minute) && (minute % (gap || defaultGap) === 0));\n    }\n\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'ngx-material-timepicker-content',\n    templateUrl: './ngx-material-timepicker-content.component.html',\n})\nexport class NgxMaterialTimepickerContentComponent {\n    @Input() appendToInput: boolean;\n    @Input() inputElement: any;\n}\n","import { AfterViewInit, Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';\n\ntype TimepickerDirection = 'top' | 'center' | 'bottom';\n\n@Directive({\n    selector: '[ngxAppendToInput]'\n})\nexport class AppendToInputDirective implements AfterViewInit {\n\n    @Input('ngxAppendToInput') inputElement: any;\n\n    private _direction: TimepickerDirection;\n    private _inputCords: ClientRect;\n    private readonly element: HTMLElement;\n\n    constructor(elementRef: ElementRef<HTMLElement>,\n                private renderer: Renderer2) {\n        this.element = elementRef.nativeElement;\n    }\n\n    private get inputCords(): ClientRect {\n        return this.inputElement.getBoundingClientRect();\n    }\n\n    private get direction(): TimepickerDirection {\n        const height = this.element.offsetHeight;\n        const {bottom, top} = this._inputCords;\n        const isElementFit = (window && window.innerHeight) - bottom < height;\n        const isTop = isElementFit && top > height;\n        const isCenter = isElementFit && top < height;\n\n        if (isTop) {\n            return 'top';\n        } else if (isCenter) {\n            return 'center';\n        }\n        return 'bottom';\n    }\n\n    ngAfterViewInit(): void {\n        this._inputCords = this.inputCords;\n        this._direction = this.direction;\n\n        this.append();\n    }\n\n    @HostListener('window:scroll')\n    changePosition(): void {\n        const {bottom, top} = this.inputCords;\n        const y = this.defineElementYByDirection(top, bottom);\n        this.setStyle('top', `${y}px`);\n    }\n\n    private append(): void {\n        const {left, bottom, top} = this._inputCords;\n        const y = this.defineElementYByDirection(top, bottom);\n\n        this.setStyle('position', 'fixed');\n        this.setStyle('left', `${left}px`);\n        this.setStyle('top', `${y}px`);\n    }\n\n    private setStyle(style: string, value: string): void {\n        this.renderer.setStyle(this.element, style, value);\n    }\n\n    private defineElementYByDirection(inputTop: number, inputBottom: number): number {\n        if (this._direction === 'top') {\n            return inputTop - this.element.offsetHeight;\n        } else if (this._direction === 'center') {\n            return inputTop - (this.element.offsetHeight / 2);\n        }\n        return inputBottom;\n    }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxMaterialTimepickerComponent } from './ngx-material-timepicker.component';\nimport { FormsModule } from '@angular/forms';\nimport { NgxMaterialTimepickerToggleComponent } from './components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\nimport { NgxMaterialTimepickerToggleIconDirective } from './directives/ngx-material-timepicker-toggle-icon.directive';\nimport { NgxMaterialTimepickerThemeDirective } from './directives/ngx-material-timepicker-theme.directive';\nimport {\n    NgxMaterialTimepicker24HoursFaceComponent\n} from './components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component';\nimport {\n    NgxMaterialTimepicker12HoursFaceComponent\n} from './components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component';\nimport {\n    NgxMaterialTimepickerMinutesFaceComponent } from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';\nimport { NgxMaterialTimepickerFaceComponent } from './components/timepicker-face/ngx-material-timepicker-face.component';\nimport { NgxMaterialTimepickerButtonComponent } from './components/timepicker-button/ngx-material-timepicker-button.component';\nimport { NgxMaterialTimepickerDialComponent } from './components/timepicker-dial/ngx-material-timepicker-dial.component';\nimport {\n    NgxMaterialTimepickerDialControlComponent } from './components/timepicker-dial-control/ngx-material-timepicker-dial-control.component';\nimport { NgxMaterialTimepickerPeriodComponent } from './components/timepicker-period/ngx-material-timepicker-period.component';\nimport { TimeFormatterPipe } from './pipes/time-formatter.pipe';\nimport { OverlayDirective } from './directives/overlay.directive';\nimport { MinutesFormatterPipe } from './pipes/minutes-formatter.pipe';\nimport { AutofocusDirective } from './directives/autofocus.directive';\nimport { NgxTimepickerFieldComponent } from './components/timepicker-field/ngx-timepicker-field.component';\nimport {\n    NgxTimepickerTimeControlComponent\n} from './components/timepicker-field/timepicker-time-control/ngx-timepicker-time-control.component';\nimport {\n    NgxTimepickerPeriodSelectorComponent\n} from './components/timepicker-field/timepicker-period-selector/ngx-timepicker-period-selector.component';\nimport { TimeLocalizerPipe } from './pipes/time-localizer.pipe';\nimport { TIME_LOCALE } from './tokens/time-locale.token';\nimport { TimeParserPipe } from './pipes/time-parser.pipe';\nimport { ActiveHourPipe } from './pipes/active-hour.pipe';\nimport { ActiveMinutePipe } from './pipes/active-minute.pipe';\nimport {\n    NgxMaterialTimepickerContainerComponent\n} from './components/ngx-material-timepicker-container/ngx-material-timepicker-container.component';\nimport {\n    NgxMaterialTimepickerContentComponent\n} from './components/ngx-material-timepicker-content/ngx-material-timepicker-content.component';\nimport { AppendToInputDirective } from './directives/append-to-input.directive';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [\n        NgxMaterialTimepickerComponent,\n        NgxMaterialTimepickerToggleComponent,\n        NgxTimepickerFieldComponent,\n        TimepickerDirective,\n        NgxMaterialTimepickerToggleIconDirective,\n        NgxMaterialTimepickerThemeDirective,\n        NgxMaterialTimepicker24HoursFaceComponent,\n        NgxMaterialTimepicker12HoursFaceComponent,\n        NgxMaterialTimepickerMinutesFaceComponent,\n        NgxMaterialTimepickerFaceComponent,\n        NgxMaterialTimepickerDialComponent,\n        NgxMaterialTimepickerDialControlComponent\n    ],\n    declarations: [\n        NgxMaterialTimepickerComponent,\n        NgxMaterialTimepicker24HoursFaceComponent,\n        NgxMaterialTimepicker12HoursFaceComponent,\n        NgxMaterialTimepickerMinutesFaceComponent,\n        NgxMaterialTimepickerFaceComponent,\n        NgxMaterialTimepickerToggleComponent,\n        NgxMaterialTimepickerButtonComponent,\n        NgxMaterialTimepickerDialComponent,\n        NgxMaterialTimepickerDialControlComponent,\n        NgxMaterialTimepickerPeriodComponent,\n        TimeFormatterPipe,\n        TimepickerDirective,\n        OverlayDirective,\n        NgxMaterialTimepickerToggleIconDirective,\n        AutofocusDirective,\n        MinutesFormatterPipe,\n        NgxMaterialTimepickerThemeDirective,\n        NgxTimepickerFieldComponent,\n        NgxTimepickerTimeControlComponent,\n        NgxTimepickerPeriodSelectorComponent,\n        TimeLocalizerPipe,\n        TimeParserPipe,\n        ActiveHourPipe,\n        ActiveMinutePipe,\n        NgxMaterialTimepickerContainerComponent,\n        NgxMaterialTimepickerContentComponent,\n        AppendToInputDirective\n    ],\n    entryComponents: [NgxMaterialTimepickerContainerComponent]\n})\nexport class NgxMaterialTimepickerModule {\n\n    static setLocale(locale: string): ModuleWithProviders<NgxMaterialTimepickerModule> {\n        return {\n            ngModule: NgxMaterialTimepickerModule,\n            providers: [\n                {provide: TIME_LOCALE, useValue: locale}\n            ]\n        };\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {AnimationState as ɵs,NgxMaterialTimepickerContainerComponent as ɵt} from './src/app/material-timepicker/components/ngx-material-timepicker-container/ngx-material-timepicker-container.component';\nexport {NgxMaterialTimepickerContentComponent as ɵu} from './src/app/material-timepicker/components/ngx-material-timepicker-content/ngx-material-timepicker-content.component';\nexport {NgxMaterialTimepickerButtonComponent as ɵh} from './src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component';\nexport {NgxTimepickerPeriodSelectorComponent as ɵo} from './src/app/material-timepicker/components/timepicker-field/timepicker-period-selector/ngx-timepicker-period-selector.component';\nexport {NgxTimepickerTimeControlComponent as ɵn} from './src/app/material-timepicker/components/timepicker-field/timepicker-time-control/ngx-timepicker-time-control.component';\nexport {NgxMaterialTimepickerHoursFace as ɵf} from './src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face';\nexport {NgxMaterialTimepickerPeriodComponent as ɵi} from './src/app/material-timepicker/components/timepicker-period/ngx-material-timepicker-period.component';\nexport {NgxMaterialTimepickerToggleComponent as ɵc} from './src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\nexport {AppendToInputDirective as ɵv} from './src/app/material-timepicker/directives/append-to-input.directive';\nexport {AutofocusDirective as ɵl} from './src/app/material-timepicker/directives/autofocus.directive';\nexport {OverlayDirective as ɵk} from './src/app/material-timepicker/directives/overlay.directive';\nexport {ActiveHourPipe as ɵq} from './src/app/material-timepicker/pipes/active-hour.pipe';\nexport {ActiveMinutePipe as ɵr} from './src/app/material-timepicker/pipes/active-minute.pipe';\nexport {MinutesFormatterPipe as ɵm} from './src/app/material-timepicker/pipes/minutes-formatter.pipe';\nexport {TimeFormatterPipe as ɵj} from './src/app/material-timepicker/pipes/time-formatter.pipe';\nexport {TimeLocalizerPipe as ɵp} from './src/app/material-timepicker/pipes/time-localizer.pipe';\nexport {TimeParserPipe as ɵg} from './src/app/material-timepicker/pipes/time-parser.pipe';\nexport {DomService as ɵb} from './src/app/material-timepicker/services/dom.service';\nexport {NgxMaterialTimepickerEventService as ɵa} from './src/app/material-timepicker/services/ngx-material-timepicker-event.service';\nexport {NgxMaterialTimepickerService as ɵd} from './src/app/material-timepicker/services/ngx-material-timepicker.service';\nexport {TIME_LOCALE as ɵe} from './src/app/material-timepicker/tokens/time-locale.token';"],"names":["tslib_1.__param","tslib_1.__decorate","tslib_1.__extends"],"mappings":"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"}