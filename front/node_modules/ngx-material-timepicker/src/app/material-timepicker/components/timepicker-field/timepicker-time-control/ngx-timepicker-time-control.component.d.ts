import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { TimeUnit } from '../../../models/time-unit.enum';
import { TimeParserPipe } from '../../../pipes/time-parser.pipe';
import { ClockFaceTime } from '../../../models/clock-face-time.interface';
import * as ɵngcc0 from '@angular/core';
export declare class NgxTimepickerTimeControlComponent implements OnChanges {
    private timeParser;
    time: number;
    min: number;
    max: number;
    placeholder: string;
    timeUnit: TimeUnit;
    disabled: boolean;
    timeList: ClockFaceTime[];
    preventTyping: boolean;
    timeChanged: EventEmitter<number>;
    isFocused: boolean;
    private previousTime;
    constructor(timeParser: TimeParserPipe);
    ngOnChanges(changes: SimpleChanges): void;
    changeTime(event: any): void;
    onKeydown(event: any): void;
    increase(): void;
    decrease(): void;
    onFocus(): void;
    onBlur(): void;
    onModelChange(value: string): void;
    private changeTimeIfValid;
    private isSelectedTimeDisabled;
    private getNextAvailableTime;
    private getPrevAvailableTime;
    private getAvailableTime;
    private setAvailableTime;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxTimepickerTimeControlComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxTimepickerTimeControlComponent, "ngx-timepicker-time-control", never, { "time": "time"; "min": "min"; "max": "max"; "placeholder": "placeholder"; "timeUnit": "timeUnit"; "disabled": "disabled"; "timeList": "timeList"; "preventTyping": "preventTyping"; }, { "timeChanged": "timeChanged"; }, never, never>;
}

//# sourceMappingURL=ngx-timepicker-time-control.component.d.ts.map